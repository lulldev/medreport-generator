{"version":3,"sources":["db/base.js","constants/mainForm.js","components/PatientDetails/PatientDetails.js","api/index.js","constants/api.js","components/DoctorsAppointment/DoctorsAppointment.js","components/NavBar/NavBar.js","components/MainForm/MainForm.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["app","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","base","Rebase","createClass","database","FIRST_NAV_TAB","INITIAL_STATE_DOCTORS_APPOINTMENT","patientName","officeAddress","doctorName","doctorValue","isPatientSelected","dateReceipt","INITIAL_STATE_PATIENT","ssn","addressPatient","city","state","zip","phoneNumber","dob","gender","insuranceHolder","isSameHolder","policyNumber","diagnoses","services","relastionship","isEmployment","isAutoAccident","isOtherAccident","stateAccident","GENDER_LIST","value","label","RELATIONSHIP_LIST","USA_STATES","PatientDetails","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSSNChange","bind","assertThisInitialized","onPatientNameChange","onInsuranceHolderChange","onPolicyNumberChange","onDobChange","onSameHolderChange","onAddressPatientChange","onStateChange","onGenderChange","onZipChange","onCityChange","onPhoneNumberChange","checkValidForm","onEmploymentChange","onAutoAccidentChange","onOtherAccidentChange","onStateAccidentChange","onRelastionshipChange","onSubmit","event","setState","target","moment","format","_this$state","preventDefault","patient","addPatien","NotificationManager","success","error","_this$state2","react_default","a","createElement","Form","Row","form","Col","md","FormGroup","Label","Input","placeholder","onChange","required","react_select_browser_esm","options","type","disabled","check","className","for","CustomInput","id","name","checked","bsSize","Button","color","size","lib","Component","generateFile","data","url","callback","content","diagnosesList","diagnosesRemainList","temporaryDate","doctorsList","paySum","temporarySum","allDiagnoses","forEach","list","indexList","slice","element","indexElement","concat","push","length","join","allDoctors","index","_doctorsList$push","defineProperty","npi","signature","allServices","parseInt","PizZip","doc","docxtemplater","loadZip","setOptions","nullGetter","setData","objectSpread","allDates","firstServices","secondServices","thirdServices","fourthServices","fifthServices","sixthServices","seventhServices","firstRemain","secondRemain","thirdRemain","fourthRemain","fifthRemain","sixthRemains","seventhRemain","render","e","message","stack","properties","console","log","JSON","stringify","output","getZip","generate","mimeType","dateTimeCreate","Date","now","outputName","saveAs","JSZipUtils","getBinaryContent","DoctorsAppointment","onDataReceiptbChange","onOfficeAddress","onPatientChange","onDoctorChange","onServicesChange","onDiagnosesChange","checkValid","setPatientInfo","getPatientByName","patientId","getPatientIdByValue","setSelectedPatientId","_this$props","patientsList","selectedPatientId","servicesList","Array","isArray","_this$props2","day","allOffices","setAllData","date","doctor","office","genData","toConsumableArray","doctorList","window","officeAddressList","_this$props3","selectPatientList","entries","map","_ref","_ref2","slicedToArray","val","isDisabled","isMulti","classNamePrefix","closeMenuOnSelect","hideSelectedOptions","NavBar","toggle","tabPosition","Nav","tabs","NavItem","NavLink","classnames","active","onClick","MainForm","activeTab","tab","patients","components_NavBar_NavBar","TabContent","TabPane","tabId","sm","components_DoctorsAppointment_DoctorsAppointment","components_PatientDetails_PatientDetails","App","addPatient","field","selectedPatient","values","find","_i","_Object$entries","_ref3","key","patientsRef","syncState","context","_this$state3","Container","components_MainForm_MainForm","Boolean","location","hostname","match","ReactDOM","containers_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAaMA,SAAMC,EAASC,cAVN,CACbC,OAAQC,0CACRC,WAAYD,gCACZE,YAAaF,uCACbG,UAAWH,gBACXI,cAAeJ,GACfK,kBAAmBL,eACnBM,MAAON,wCAIHO,EAAOC,IAAOC,YAAYb,EAAIc,8GCNvBC,EAAgB,IAUhBC,EAAoC,CAC/CC,YAAa,GACbC,cAAe,GACfC,WAAY,GACZC,YAAa,GACbC,mBAAmB,EACnBC,YAAa,MAIFC,EAAwB,CACnCN,YAAa,GACbO,IAAK,GACLC,eAAgB,GAChBC,KAAM,GACNC,MAAO,GACPC,IAAK,GACLC,YAAa,GACbC,IAAK,KACLC,OAAQ,GACRC,gBAAiB,GACjBC,cAAc,EACdC,aAAc,GACdC,UAAW,GACXC,SAAU,GACVC,cAAe,GACfC,cAAc,EACdC,gBAAgB,EAChBC,iBAAiB,EACjBC,cAAe,MAGJC,EAAc,CACzB,CAAEC,MAAO,OAAQC,MAAO,QACxB,CAAED,MAAO,SAAUC,MAAO,WAGfC,EAAoB,CAC/B,CAAEF,MAAO,YAAQC,MAAO,aACxB,CAAED,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,QAASC,MAAO,SACzB,CAAED,MAAO,QAASC,MAAO,UAGdE,EAAa,CACxB,CACIH,MAAO,UACPC,MAAO,MAEX,CACID,MAAO,SACPC,MAAO,MAEX,CACID,MAAO,iBACPC,MAAO,MAEX,CACID,MAAO,UACPC,MAAO,MAEX,CACID,MAAO,WACPC,MAAO,MAEX,CACID,MAAO,aACPC,MAAO,MAEX,CACID,MAAO,WACPC,MAAO,MAEX,CACID,MAAO,cACPC,MAAO,MAEX,CACID,MAAO,WACPC,MAAO,MAEX,CACID,MAAO,uBACPC,MAAO,MAEX,CACID,MAAO,iCACPC,MAAO,MAEX,CACID,MAAO,UACPC,MAAO,MAEX,CACID,MAAO,UACPC,MAAO,MAEX,CACID,MAAO,OACPC,MAAO,MAEX,CACID,MAAO,SACPC,MAAO,MAEX,CACID,MAAO,QACPC,MAAO,MAEX,CACID,MAAO,WACPC,MAAO,MAEX,CACID,MAAO,UACPC,MAAO,MAEX,CACID,MAAO,OACPC,MAAO,MAEX,CACID,MAAO,SACPC,MAAO,MAEX,CACID,MAAO,WACPC,MAAO,MAEX,CACID,MAAO,YACPC,MAAO,MAEX,CACID,MAAO,QACPC,MAAO,MAEX,CACID,MAAO,mBACPC,MAAO,MAEX,CACID,MAAO,WACPC,MAAO,MAEX,CACID,MAAO,gBACPC,MAAO,MAEX,CACID,MAAO,WACPC,MAAO,MAEX,CACID,MAAO,YACPC,MAAO,MAEX,CACID,MAAO,cACPC,MAAO,MAEX,CACID,MAAO,WACPC,MAAO,MAEX,CACID,MAAO,UACPC,MAAO,MAEX,CACID,MAAO,WACPC,MAAO,MAEX,CACID,MAAO,SACPC,MAAO,MAEX,CACID,MAAO,gBACPC,MAAO,MAEX,CACID,MAAO,aACPC,MAAO,MAEX,CACID,MAAO,aACPC,MAAO,MAEX,CACID,MAAO,WACPC,MAAO,MAEX,CACID,MAAO,iBACPC,MAAO,MAEX,CACID,MAAO,eACPC,MAAO,MAEX,CACID,MAAO,2BACPC,MAAO,MAEX,CACID,MAAO,OACPC,MAAO,MAEX,CACID,MAAO,WACPC,MAAO,MAEX,CACID,MAAO,SACPC,MAAO,MAEX,CACID,MAAO,QACPC,MAAO,MAEX,CACID,MAAO,eACPC,MAAO,MAEX,CACID,MAAO,cACPC,MAAO,MAEX,CACID,MAAO,eACPC,MAAO,MAEX,CACID,MAAO,iBACPC,MAAO,MAEX,CACID,MAAO,eACPC,MAAO,MAEX,CACID,MAAO,YACPC,MAAO,MAEX,CACID,MAAO,QACPC,MAAO,MAEX,CACID,MAAO,OACPC,MAAO,MAEX,CACID,MAAO,UACPC,MAAO,MAEX,CACID,MAAO,iBACPC,MAAO,MAEX,CACID,MAAO,WACPC,MAAO,MAEX,CACID,MAAO,aACPC,MAAO,MAEX,CACID,MAAO,gBACPC,MAAO,MAEX,CACID,MAAO,YACPC,MAAO,MAEX,CACID,MAAO,UACPC,MAAO,gCCwDEG,4BA5Ub,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAA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","file":"static/js/main.76f352a4.chunk.js","sourcesContent":["import Rebase from 're-base'\nimport firebase from 'firebase'\n\nconst config = {\n  apiKey: process.env.REACT_APP_FIREBASE_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n}\n\nconst app = firebase.initializeApp(config)\nconst base = Rebase.createClass(app.database())\n\nexport { base }","// MAIN FORM\nexport const DATE_FORMAT = 'MMDDYYYY'\nexport const ERROR_LABEL = 'Error message'\nexport const ERROR_MESSAGE = 'Please, fill in all fields!'\nexport const SUCCES_MESSAGE = 'You add new patient'\nexport const SUCCES_LABEL = 'Success'\nexport const SUCCES_GENERATION = 'Generation'\nexport const TIMEOUT_MESSAGE = 3000\nexport const FIRST_NAV_TAB = '1'\nexport const SECOND_NAV_TAB = '2'\nexport const SERVICES_FIELD = 'services'\nexport const DIAGNOSES_FIELD = 'diagnoses'\nexport const TABLE_NAME = 'patients'\nexport const MAX_DAY = 7\nexport const MIN_DAY = 1\n\n//DoctorsAppointment\n\nexport const INITIAL_STATE_DOCTORS_APPOINTMENT = {\n  patientName: '',\n  officeAddress: '',\n  doctorName: '',\n  doctorValue: {},\n  isPatientSelected: true,\n  dateReceipt: null\n}\n\n// PATIENT DETAILS\nexport const INITIAL_STATE_PATIENT = {\n  patientName: '',\n  ssn: '',\n  addressPatient: '',\n  city: '',\n  state: '',\n  zip: '',\n  phoneNumber: '',\n  dob: null,\n  gender: '',\n  insuranceHolder: '',\n  isSameHolder: false,\n  policyNumber: '',\n  diagnoses: [],\n  services: [],\n  relastionship: '',\n  isEmployment: false,\n  isAutoAccident: true,\n  isOtherAccident: false,\n  stateAccident: 'FL'\n}\n\nexport const GENDER_LIST = [\n  { value: 'Male', label: 'Male' },\n  { value: 'Female', label: 'Female' }\n]\n\nexport const RELATIONSHIP_LIST = [\n  { value: 'Selа', label: 'Selа' },\n  { value: 'Spouse', label: 'Spouse' },\n  { value: 'Child', label: 'Child' },\n  { value: 'Other', label: 'Other' }\n]\n\nexport const USA_STATES = [\n  {\n      value: \"Alabama\",\n      label: \"AL\"\n  },\n  {\n      value: \"Alaska\",\n      label: \"AK\"\n  },\n  {\n      value: \"American Samoa\",\n      label: \"AS\"\n  },\n  {\n      value: \"Arizona\",\n      label: \"AZ\"\n  },\n  {\n      value: \"Arkansas\",\n      label: \"AR\"\n  },\n  {\n      value: \"California\",\n      label: \"CA\"\n  },\n  {\n      value: \"Colorado\",\n      label: \"CO\"\n  },\n  {\n      value: \"Connecticut\",\n      label: \"CT\"\n  },\n  {\n      value: \"Delaware\",\n      label: \"DE\"\n  },\n  {\n      value: \"District Of Columbia\",\n      label: \"DC\"\n  },\n  {\n      value: \"Federated States Of Micronesia\",\n      label: \"FM\"\n  },\n  {\n      value: \"Florida\",\n      label: \"FL\"\n  },\n  {\n      value: \"Georgia\",\n      label: \"GA\"\n  },\n  {\n      value: \"Guam\",\n      label: \"GU\"\n  },\n  {\n      value: \"Hawaii\",\n      label: \"HI\"\n  },\n  {\n      value: \"Idaho\",\n      label: \"ID\"\n  },\n  {\n      value: \"Illinois\",\n      label: \"IL\"\n  },\n  {\n      value: \"Indiana\",\n      label: \"IN\"\n  },\n  {\n      value: \"Iowa\",\n      label: \"IA\"\n  },\n  {\n      value: \"Kansas\",\n      label: \"KS\"\n  },\n  {\n      value: \"Kentucky\",\n      label: \"KY\"\n  },\n  {\n      value: \"Louisiana\",\n      label: \"LA\"\n  },\n  {\n      value: \"Maine\",\n      label: \"ME\"\n  },\n  {\n      value: \"Marshall Islands\",\n      label: \"MH\"\n  },\n  {\n      value: \"Maryland\",\n      label: \"MD\"\n  },\n  {\n      value: \"Massachusetts\",\n      label: \"MA\"\n  },\n  {\n      value: \"Michigan\",\n      label: \"MI\"\n  },\n  {\n      value: \"Minnesota\",\n      label: \"MN\"\n  },\n  {\n      value: \"Mississippi\",\n      label: \"MS\"\n  },\n  {\n      value: \"Missouri\",\n      label: \"MO\"\n  },\n  {\n      value: \"Montana\",\n      label: \"MT\"\n  },\n  {\n      value: \"Nebraska\",\n      label: \"NE\"\n  },\n  {\n      value: \"Nevada\",\n      label: \"NV\"\n  },\n  {\n      value: \"New Hampshire\",\n      label: \"NH\"\n  },\n  {\n      value: \"New Jersey\",\n      label: \"NJ\"\n  },\n  {\n      value: \"New Mexico\",\n      label: \"NM\"\n  },\n  {\n      value: \"New York\",\n      label: \"NY\"\n  },\n  {\n      value: \"North Carolina\",\n      label: \"NC\"\n  },\n  {\n      value: \"North Dakota\",\n      label: \"ND\"\n  },\n  {\n      value: \"Northern Mariana Islands\",\n      label: \"MP\"\n  },\n  {\n      value: \"Ohio\",\n      label: \"OH\"\n  },\n  {\n      value: \"Oklahoma\",\n      label: \"OK\"\n  },\n  {\n      value: \"Oregon\",\n      label: \"OR\"\n  },\n  {\n      value: \"Palau\",\n      label: \"PW\"\n  },\n  {\n      value: \"Pennsylvania\",\n      label: \"PA\"\n  },\n  {\n      value: \"Puerto Rico\",\n      label: \"PR\"\n  },\n  {\n      value: \"Rhode Island\",\n      label: \"RI\"\n  },\n  {\n      value: \"South Carolina\",\n      label: \"SC\"\n  },\n  {\n      value: \"South Dakota\",\n      label: \"SD\"\n  },\n  {\n      value: \"Tennessee\",\n      label: \"TN\"\n  },\n  {\n      value: \"Texas\",\n      label: \"TX\"\n  },\n  {\n      value: \"Utah\",\n      label: \"UT\"\n  },\n  {\n      value: \"Vermont\",\n      label: \"VT\"\n  },\n  {\n      value: \"Virgin Islands\",\n      label: \"VI\"\n  },\n  {\n      value: \"Virginia\",\n      label: \"VA\"\n  },\n  {\n      value: \"Washington\",\n      label: \"WA\"\n  },\n  {\n      value: \"West Virginia\",\n      label: \"WV\"\n  },\n  {\n      value: \"Wisconsin\",\n      label: \"WI\"\n  },\n  {\n      value: \"Wyoming\",\n      label: \"WY\"\n  }\n]","import React, { Component } from 'react'\nimport { Button, Form, FormGroup, Label, Input, Col, Row, CustomInput  } from 'reactstrap'\nimport { NotificationContainer, NotificationManager } from 'react-notifications'\nimport {\n  INITIAL_STATE_PATIENT, GENDER_LIST, \n  USA_STATES, DATE_FORMAT, ERROR_LABEL, \n  ERROR_MESSAGE, TIMEOUT_MESSAGE,\n  SUCCES_MESSAGE, SUCCES_LABEL,\n  RELATIONSHIP_LIST\n} from '../../constants/mainForm'\nimport moment from 'moment'\nimport Select from 'react-select'\nimport './PatientDetails.scss'\nimport PropTypes from 'prop-types'\nimport 'react-notifications/lib/notifications.css'\n\nclass PatientDetails extends Component {\n  static propTypes = {\n    addPatien: PropTypes.func.isRequired\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = INITIAL_STATE_PATIENT\n    this.onSSNChange = this.onSSNChange.bind(this)\n    this.onPatientNameChange = this.onPatientNameChange.bind(this)\n    this.onInsuranceHolderChange = this.onInsuranceHolderChange.bind(this)\n    this.onPolicyNumberChange = this.onPolicyNumberChange.bind(this)\n    this.onDobChange = this.onDobChange.bind(this)\n    this.onSameHolderChange = this.onSameHolderChange.bind(this)\n    this.onAddressPatientChange = this.onAddressPatientChange.bind(this)\n    this.onStateChange = this.onStateChange.bind(this)\n    this.onGenderChange = this.onGenderChange.bind(this)\n    this.onZipChange = this.onZipChange.bind(this)\n    this.onCityChange = this.onCityChange.bind(this)\n    this.onPhoneNumberChange = this.onPhoneNumberChange.bind(this)\n    this.checkValidForm = this.checkValidForm.bind(this)\n    this.onEmploymentChange = this.onEmploymentChange.bind(this)\n    this.onAutoAccidentChange = this.onAutoAccidentChange.bind(this)\n    this.onOtherAccidentChange = this.onOtherAccidentChange.bind(this)\n    this.onStateAccidentChange = this.onStateAccidentChange.bind(this)\n    this.onRelastionshipChange = this.onRelastionshipChange.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  onSSNChange(event) {\n    this.setState({ ssn: event.target.value })\n  }\n\n  onRelastionshipChange(event) {\n    this.setState({ relastionship: event.value })\n  }\n\n  onEmploymentChange(event) {\n    const { isEmployment } = this.state\n    this.setState({ isEmployment: !isEmployment })\n  }\n\n  onAutoAccidentChange(event) {\n    const { isAutoAccident } = this.state\n    this.setState({ isAutoAccident: !isAutoAccident })\n  }\n\n  onOtherAccidentChange(event) {\n    const { isOtherAccident } = this.state\n    this.setState({ isOtherAccident: !isOtherAccident })\n  }\n\n  onStateAccidentChange(event) {\n    this.setState({ stateAccident: event.target.value })\n  }\n\n  onPatientNameChange(event) {\n    this.setState({\n      patientName: event.target.value\n    })\n    if (this.state.isSameHolder) {\n      this.setState({\n        insuranceHolder: event.target.value\n      })\n    }\n  }\n\n  onInsuranceHolderChange(event) {\n    this.setState({ insuranceHolder: event.target.value })\n  }\n\n  onPolicyNumberChange(event) {\n    this.setState({ policyNumber: event.target.value })\n  }\n\n  onAddressPatientChange(event) {\n    this.setState({ addressPatient: event.target.value })\n  }\n\n  onDobChange(event) {\n    this.setState({\n      dob: moment(event.target.value).format(DATE_FORMAT)\n    })\n  }\n\n  onCityChange(event) {\n    this.setState({ city: event.target.value })\n  }\n\n  onStateChange(event) {\n    this.setState({ state: event.value })\n  }\n\n  onPhoneNumberChange(event) {\n    this.setState({ phoneNumber: event.target.value })\n  }\n\n  onGenderChange(event) {\n    this.setState({ gender: event.value })\n  }\n\n  onOfficeAddressChange(event) {\n    this.setState({ officeAddress: event.value })\n  }\n\n  onZipChange(event) {\n    this.setState({ zip: event.target.value })\n  }\n\n  onSameHolderChange() {\n    const { isSameHolder, patientName } = this.state\n    !(isSameHolder) ? this.setState({\n      insuranceHolder: patientName,\n    }) : this.setState({\n      insuranceHolder: ''\n    })\n    this.setState({\n      isSameHolder: !isSameHolder\n    })\n  }\n\n  checkValidForm() {\n    return this.state.gender && this.state.state && \n           this.state.relastionship\n  }\n\n  onSubmit(event) {\n    event.preventDefault()\n    if (this.checkValidForm()) {\n      const patient = this.state\n      delete patient.isSameHolder\n      this.props.addPatien(patient)\n      NotificationManager.success(\n        SUCCES_MESSAGE,\n        SUCCES_LABEL,\n        TIMEOUT_MESSAGE\n      )\n    } else {\n      NotificationManager.error(\n        ERROR_LABEL,\n        ERROR_MESSAGE,\n        TIMEOUT_MESSAGE\n      )\n    }\n  }\n\n\n  render() {\n    const { isEmployment, isAutoAccident, isOtherAccident, stateAccident } = this.state\n    return (\n      <Form onSubmit={ this.onSubmit }>\n        <Row form>\n          <Col md={7}>\n          <FormGroup>\n            <Label>Full name patient:</Label>\n              <Input\n                placeholder='full name patient...'\n                onChange={ this.onPatientNameChange }\n                required\n              />\n              </FormGroup>\n            </Col>\n            <Col md={5}>\n              <FormGroup>\n                <Label>Social Security Number (SSN):</Label>\n                <Input\n                  placeholder='ssn...'\n                  onChange={ this.onSSNChange }\n                  required\n                />\n            </FormGroup>\n          </Col>\n        </Row>\n        <FormGroup>\n          <Label>Address patient:</Label>\n          <Input\n            placeholder='address patient...'\n            onChange={ this.onAddressPatientChange }\n            required\n          />\n        </FormGroup>\n        <Row form>\n          <Col md={6}>\n            <FormGroup>\n              <Label>City:</Label>\n              <Input\n                placeholder='city patient...'\n                onChange={ this.onCityChange }\n                required\n              />\n            </FormGroup>\n          </Col>\n          <Col md={4}>\n            <FormGroup>\n              <Label>State:</Label>\n              <Select\n                placeholder='state patient...'\n                options={ USA_STATES }\n                onChange={ this.onStateChange }\n              />\n            </FormGroup>\n          </Col>\n          <Col md={2}>\n            <FormGroup>\n              <Label>Zip:</Label>\n              <Input\n                placeholder='zip patient...'\n                onChange={ this.onZipChange }\n                required\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row form>\n          <Col md={6}>\n            <FormGroup>\n              <Label>Phone number:</Label>\n              <Input\n                placeholder='phone number...'\n                onChange={ this.onPhoneNumberChange }\n                required\n              />\n            </FormGroup>\n          </Col>\n          <Col md={4}>\n            <FormGroup>\n              <Label>Date of Birth:</Label>\n              <Input\n                type='date'\n                placeholder='date of birth...'\n                onChange={ this.onDobChange }\n                required\n              />\n            </FormGroup>\n          </Col>\n          <Col md={2}>\n            <FormGroup>\n              <Label>Gender:</Label>\n                <Select\n                  placeholder='gender...'\n                  options={ GENDER_LIST }\n                  onChange={ this.onGenderChange }\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row form>\n            <Col md={6}>\n              <FormGroup>\n                <Label>Full name insurance holder:</Label>\n                <Input\n                  placeholder='full name insurance holder...'\n                  value={ this.state.insuranceHolder }\n                  disabled={ this.state.isSameHolder }\n                  onChange={ this.onInsuranceHolderChange }\n                  required\n                />\n                <Label check className='check-box'>\n                  <Input\n                    type='checkbox'\n                    onChange={ this.onSameHolderChange }\n                  />{' '}\n                    the name of the insurer matches the name of the patient\n                </Label>\n              </FormGroup>\n            </Col>\n            <Col md={6}>\n              <FormGroup>\n              <Label>Palicy Number:</Label>\n              <Input\n                placeholder='palicy number...'\n                onChange={ this.onPolicyNumberChange }\n              />\n            </FormGroup>\n          </Col>\n          </Row>\n          <Row className='line'>\n            <Col md={6}>\n              <FormGroup>\n                <Label>Patient to relationship to insured:</Label>\n                  <Select\n                    placeholder='...'\n                    options={ RELATIONSHIP_LIST }\n                    onChange={ this.onRelastionshipChange }\n                  />\n              </FormGroup>\n            </Col>\n            <Col md={6}>\n              <FormGroup>\n                <Label for='exampleCheckbox'>Is patients condition related to:</Label>\n                <div>\n                  <CustomInput\n                    type='switch'\n                    id='exampleCustomSwitch'\n                    name='customSwitch'\n                    label='EMPLOYMENT? (Courrent or Previous)'\n                    onChange={ this.onEmploymentChange }\n                    checked={ isEmployment }\n                  />\n                  <Row>\n                    <Col md={3}>\n                      <CustomInput\n                        type='switch'\n                        id='exampleCustomSwitch2'\n                        name='customSwitch'\n                        label='AUTO ACCIDENT?'\n                        onChange={ this.onAutoAccidentChange }\n                        checked={ isAutoAccident }\n                      />\n                    </Col>\n                    <Col className='inputState' md={2}>\n                      State:\n                      <Input\n                        bsSize='sm'\n                        value={ stateAccident }\n                        onChange={ this.onStateAccidentChange }\n                      />\n                    </Col>\n                  </Row>\n                  <CustomInput\n                    type='switch'\n                    id='exampleCustomSwitch3'\n                    label='OTHER ACCIDENT?'\n                    onChange={ this.onOtherAccidentChange }\n                    checked={ isOtherAccident }\n                  />\n                </div>\n              </FormGroup>\n            </Col>\n          </Row>\n        <Button color='secondary' size='lg'>Add</Button>\n        <NotificationContainer />\n      </Form>\n    )\n  }\n}\n\nexport default PatientDetails","import docxtemplater  from 'docxtemplater'\nimport JSZipUtils from 'jszip-utils'\nimport { saveAs } from 'file-saver'\nimport PizZip from 'pizzip'\nimport moment from 'moment'\nimport { \n  URL_TEMPLATE,\n  MINE_TYPE,\n  TYPE_OUTPUT,\n  DATE_FORMAT\n} from '../constants/api'\n\nconst loadFile = (url, callback) => {\n  JSZipUtils.getBinaryContent(url, callback)\n}\n\nexport const generateFile = (data, patient) => {\n  loadFile(URL_TEMPLATE, (error, content) => {\n    if (error) {\n      throw error\n    }\n\n    let diagnosesList = []\n    let diagnosesRemainList = []\n    let temporaryDate = null\n    let doctorsList = []\n    let paySum = []\n    let temporarySum = 0\n\n    data.allDiagnoses.forEach((list, indexList) => {\n      temporaryDate = {}\n      list.slice(0, 11).forEach((element, indexElement) => {\n        temporaryDate[`dai_${indexList}_${indexElement}`] = element.value\n      })\n      diagnosesList.push(temporaryDate)\n      diagnosesRemainList.push(\n        list.slice(11, list.length - 1).join()\n      )\n    })\n\n    data.allDoctors.forEach((element, index) => {\n      doctorsList.push({\n        [`dN_${index}`]: element.name,\n        [`npi_${index}`]: element.npi,\n        [`sig_${index}`]: element.signature\n      })\n    })\n\n    data.allServices.forEach((list, index) => {\n      temporarySum = 0\n      list.forEach(element => {\n        temporarySum += parseInt(element.value)\n      })\n      paySum.push({\n        [`sum_${index}`]: temporarySum\n      })\n    })\n\n    const zip = new PizZip(content)\n    const doc = new docxtemplater().loadZip(zip)\n    doc.setOptions({ nullGetter: () => {\n      return ''\n    }})\n    doc.setData({\n      ...patient,\n      ...data.allDates,\n\n      firstServices: data.allServices[0],\n      secondServices: data.allServices[1],\n      thirdServices: data.allServices[2],\n      fourthServices: data.allServices[3],\n      fifthServices: data.allServices[4],\n      sixthServices: data.allServices[5],\n      seventhServices: data.allServices[6],\n\n      firstRemain: diagnosesRemainList[0],\n      secondRemain: diagnosesRemainList[1],\n      thirdRemain: diagnosesRemainList[2],\n      fourthRemain: diagnosesRemainList[3],\n      fifthRemain: diagnosesRemainList[4],\n      sixthRemains: diagnosesRemainList[5],\n      seventhRemain: diagnosesRemainList[6],\n\n      ...diagnosesList[0],\n      ...diagnosesList[1],\n      ...diagnosesList[2],\n      ...diagnosesList[3],\n      ...diagnosesList[4],\n      ...diagnosesList[5],\n      ...diagnosesList[6],\n\n      ...doctorsList[0],\n      ...doctorsList[1],\n      ...doctorsList[2],\n      ...doctorsList[3],\n      ...doctorsList[4],\n      ...doctorsList[5],\n      ...doctorsList[6],\n\n      ...paySum[0],\n      ...paySum[1],\n      ...paySum[2],\n      ...paySum[3],\n      ...paySum[4],\n      ...paySum[5],\n      ...paySum[6],\n    })\n\n    try {\n      doc.render()\n    }\n    catch (error) {\n      const e = {\n        message: error.message,\n        name: error.name,\n        stack: error.stack,\n        properties: error.properties,\n      }\n      console.log(JSON.stringify({ error: e }))\n      throw error\n    }\n\n    const output = doc.getZip().generate({\n      type: TYPE_OUTPUT,\n      mimeType: MINE_TYPE,\n    })\n    const dateTimeCreate = moment(Date.now()).format(DATE_FORMAT)\n    const outputName = `report_${ dateTimeCreate }.docx`\n    saveAs(output, outputName)\n  })\n}","export const URL_TEMPLATE = '/tag-example.docx'\nexport const MINE_TYPE = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\nexport const DATE_FORMAT = 'YYYY_MM_DD_HH_mm_ss'\nexport const TYPE_OUTPUT = 'blob'","import React, { Component } from 'react'\nimport { Button, Form, FormGroup, Label, Input, Col, Row } from 'reactstrap'\nimport { NotificationContainer, NotificationManager } from 'react-notifications'\nimport {\n  INITIAL_STATE_DOCTORS_APPOINTMENT,\n  DATE_FORMAT, ERROR_LABEL, SUCCES_LABEL,\n  ERROR_MESSAGE, TIMEOUT_MESSAGE, SUCCES_GENERATION,\n  SERVICES_FIELD, DIAGNOSES_FIELD,\n  MIN_DAY, MAX_DAY\n} from '../../constants/mainForm'\nimport { generateFile } from '../../api/index'\nimport moment from 'moment'\nimport Select from 'react-select'\nimport 'react-notifications/lib/notifications.css'\n\nclass DoctorsAppointment extends Component {\n  constructor(props) {\n    super(props)\n    this.state = INITIAL_STATE_DOCTORS_APPOINTMENT\n    this.onDataReceiptbChange = this.onDataReceiptbChange.bind(this)\n    this.onOfficeAddress = this.onOfficeAddress.bind(this)\n    this.onPatientChange = this.onPatientChange.bind(this)\n    this.onDoctorChange = this.onDoctorChange.bind(this)\n    this.onServicesChange = this.onServicesChange.bind(this)\n    this.onDiagnosesChange = this.onDiagnosesChange.bind(this)\n    this.checkValid = this.checkValid.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  onDataReceiptbChange(event) {\n    this.setState({\n      dateReceipt: moment(event.target.value).format(DATE_FORMAT)\n    })\n  }\n\n  onServicesChange(event) {\n    this.props.setPatientInfo(event, SERVICES_FIELD )\n  }\n  \n  onOfficeAddress(event) {\n    this.setState({ officeAddress: event.value })\n  }\n\n  onPatientChange(event) {\n    const patient = this.props.getPatientByName(event.value)\n    const patientId = this.props.getPatientIdByValue(patient)\n    this.props.setSelectedPatientId(patientId)\n    this.setState({\n      patientName: event.value,\n      isPatientSelected: false\n    })\n  }\n\n  onDoctorChange(event) {\n    this.setState({ \n      doctorName: event.label,\n      doctorValue: event.value\n    })\n  }\n\n  onDiagnosesChange(event) {\n    this.props.setPatientInfo(event, DIAGNOSES_FIELD )\n  }\n\n  checkValid() {\n    const { doctorName, patientName, officeAddress } = this.state\n    const { patientsList, selectedPatientId } = this.props\n    const servicesList = patientsList[selectedPatientId].services\n    const diagnosesList = patientsList[selectedPatientId].diagnoses\n    return officeAddress && doctorName && patientName && \n           Array.isArray(servicesList) && servicesList.length && \n           Array.isArray(diagnosesList) && diagnosesList.length\n  }\n\n  onSubmit(event) {\n    event.preventDefault()\n    if (this.checkValid()) {\n      const { \n        patientsList,\n        selectedPatientId,\n        day,\n        allServices,\n        allDiagnoses,\n        allDoctors,\n        allDates,\n        allOffices,\n      } = this.props\n      const { doctorValue, officeAddress, dateReceipt } = this.state\n\n      this.props.setAllData({\n        services: patientsList[selectedPatientId].services,\n        date: dateReceipt,\n        diagnoses: patientsList[selectedPatientId].diagnoses,\n        doctor: doctorValue,\n        office: officeAddress\n      })\n      if (day === MAX_DAY) {\n        const genData = {\n          allServices: [...allServices, patientsList[selectedPatientId].services],\n          allDiagnoses: [...allDiagnoses, patientsList[selectedPatientId].diagnoses],\n          allDoctors: [...allDoctors, doctorValue],\n          allDates: [...allDates, dateReceipt],\n          allOffices: [...allOffices, officeAddress]\n        }\n        try {\n          generateFile(genData, patientsList[selectedPatientId])\n          NotificationManager.success(\n            SUCCES_GENERATION,\n            SUCCES_LABEL,\n            TIMEOUT_MESSAGE\n          )\n        } catch (e) {\n          NotificationManager.error(\n            ERROR_LABEL,\n            '',\n            TIMEOUT_MESSAGE\n          )\n        }\n      }\n    } else {\n      NotificationManager.error(\n        ERROR_LABEL,\n        ERROR_MESSAGE,\n        TIMEOUT_MESSAGE\n      )\n    }\n  }\n\n  render() {\n    const doctorList = window.doctorList\n    const servicesList = window.servicesList\n    const officeAddressList = window.officeAddressList\n    const diagnosesList = window.diagnosesList\n    const { patientsList, selectedPatientId, day } = this.props\n    const { isPatientSelected } = this.state\n    const selectPatientList = []\n    Object.entries(patientsList).map(([key, val]) => {\n      return (\n        selectPatientList.push({\n          value: val.patientName,\n          label: val.patientName\n        })\n      )\n    })\n\n    return (\n      <Form onSubmit={ this.onSubmit }>\n        <h4>Input info for { day } day:</h4>\n        <Row form>\n            <Col md={6}>\n              <FormGroup>\n                <Label>Patient:</Label>\n                <Select \n                  options={ selectPatientList }\n                  onChange={ this.onPatientChange }\n                  isDisabled={ day !== MIN_DAY }\n                />\n              </FormGroup>\n            </Col>\n            <Col md={6}>\n              <FormGroup>\n                <Label>Date of Receipt:</Label>\n                <Input\n                  type='date'\n                  placeholder='date of receipt...'\n                  onChange={ this.onDataReceiptbChange }\n                  required\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row form>\n            <Col md={6}>\n              <FormGroup>\n                <Label>Office address:</Label>\n                <Select\n                  options={ officeAddressList }\n                  onChange={ this.onOfficeAddress }\n                />\n              </FormGroup>\n            </Col>\n            <Col md={6}>\n              <FormGroup>\n                <Label>Doctor:</Label>\n                <Select \n                  options={ doctorList }\n                  onChange={ this.onDoctorChange }\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row form>\n            <Col md={6}>\n              <FormGroup>\n              <Label>Diagnoses:</Label>\n              <Select\n                isMulti name='colors' options={ diagnosesList }\n                className='basic-multi-select'\n                classNamePrefix='select'\n                closeMenuOnSelect={ false }\n                hideSelectedOptions={ true }\n                onChange={ this.onDiagnosesChange }\n                isDisabled={ isPatientSelected }\n                value={ selectedPatientId && patientsList[selectedPatientId].diagnoses }\n              />\n              </FormGroup>\n            </Col>\n            <Col md={6}>\n              <FormGroup>\n              <Label>Selection of services rendered:</Label>\n              <Select\n                isMulti name='colors' options={ servicesList }\n                className='basic-multi-select'\n                classNamePrefix='select'\n                closeMenuOnSelect={ false }\n                hideSelectedOptions={ true }\n                onChange={ this.onServicesChange }\n                isDisabled={ isPatientSelected }\n                value={ selectedPatientId && patientsList[selectedPatientId].services }\n              />\n              </FormGroup>\n            </Col>\n          </Row>\n        <Button color='secondary' size='lg'>Submit</Button>\n        <NotificationContainer />\n      </Form>\n    )\n  }\n}\n\nexport default DoctorsAppointment","import React, { Component } from 'react'\nimport { Nav, NavItem, NavLink } from 'reactstrap'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nexport { FIRST_NAV_TAB, SECOND_NAV_TAB } from '../../constants/mainForm'\n\nconst FIRST_NAV_TAB = '1' // DO EXPORT\nconst SECOND_NAV_TAB = '2'  // DO EXPORT\n\nclass NavBar extends Component {\n  static propTypes = {\n    toggle: PropTypes.func.isRequired,\n    tabPosition: PropTypes.string.isRequired\n  }\n\n  render() {\n    const { toggle, tabPosition } = this.props\n    return (\n      <Nav tabs>\n        <NavItem>\n          <NavLink\n            className={\n              classnames({\n                active: tabPosition === FIRST_NAV_TAB\n              })\n            }\n            onClick={ () => toggle(FIRST_NAV_TAB) }\n          >\n            Doctor's Appointment\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={\n              classnames({\n                active: tabPosition === SECOND_NAV_TAB\n              })\n            }\n            onClick={ () => toggle(SECOND_NAV_TAB) }\n          >\n            Patient Details\n          </NavLink>\n        </NavItem>\n      </Nav>\n    )\n  }\n}\n\nexport default NavBar","import React, { Component } from 'react'\nimport { TabContent, TabPane, Row, Col } from 'reactstrap'\nimport PatientDetails from '../PatientDetails/PatientDetails'\nimport DoctorsAppointment from '../DoctorsAppointment/DoctorsAppointment'\nimport { FIRST_NAV_TAB  } from '../../constants/mainForm'\nimport NavBar from '../NavBar/NavBar'\nimport PropTypes from 'prop-types'\nimport './MainForm.scss'\n\nclass MainForm extends Component {\n  static propTypes = {\n    addPatien: PropTypes.func.isRequired\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      activeTab: FIRST_NAV_TAB\n    }\n    this.toggle = this.toggle.bind(this)\n  }\n\n  toggle(tab) {\n    if (this.state.activeTab !== tab) {\n      this.setState({\n        activeTab: tab\n      })\n    }\n  }\n\n  render() {\n    const { activeTab } = this.state\n    const { patients } = this.props\n    return (\n      <div className='main-form'>\n        <h2>Medrepot-generator</h2>\n        <NavBar toggle={ this.toggle } tabPosition={ activeTab } />\n        <TabContent activeTab={ activeTab }>\n          <TabPane tabId='1'>\n            <Row>\n              <Col sm='12'>\n                <DoctorsAppointment\n                  patientsList={ patients }\n                  getPatientByName={ this.props.getPatientByName }\n                  setSelectedPatientId={ this.props.setSelectedPatientId }\n                  getPatientIdByValue={ this.props.getPatientIdByValue }\n                  setPatientInfo={ this.props.setPatientInfo }\n                  selectedPatientId={ this.props.selectedPatientId }\n                  setAllData={ this.props.setAllData }\n                  day={ this.props.day }\n                  allServices={ this.props.allServices }\n                  allDiagnoses={ this.props.allDiagnoses }\n                  allDoctors={ this.props.allDoctors }\n                  allDates={ this.props.allDates }\n                  allOffices={ this.props.allOffices }\n                />\n              </Col>\n            </Row>\n          </TabPane>\n          <TabPane tabId='2'>\n            <Row>\n              <Col sm='12'>\n                <PatientDetails addPatien={ this.props.addPatien } />\n              </Col>\n            </Row>\n          </TabPane>\n        </TabContent>\n      </div>\n    )\n  }\n}\n\nexport default MainForm","import React, { Component } from 'react'\nimport './App.scss'\nimport { Container } from 'reactstrap'\nimport { base } from '../../db/base'\nimport MainForm from '../../components/MainForm/MainForm'\nimport { SERVICES_FIELD, TABLE_NAME, MAX_DAY, MIN_DAY } from '../../constants/mainForm'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      patients: {},\n      selectedPatientId: '',\n      allServices: [],\n      allDiagnoses: [],\n      allDoctors: [],\n      allDates: [],\n      allOffices: [],\n      day: 1\n    }\n    this.addPatient = this.addPatient.bind(this)\n    this.setSelectedPatientId = this.setSelectedPatientId.bind(this)\n    this.setPatientInfo = this.setPatientInfo.bind(this)\n    this.getPatientByName = this.getPatientByName.bind(this)\n    this.getPatientIdByValue = this.getPatientIdByValue.bind(this)\n    this.setAllData = this.setAllData.bind(this)\n  }\n\n  addPatient(data) {\n    const patientsList = { ...this.state.patients }\n    const id = Date.now()\n    patientsList[id] = {\n      ...data,\n      diagnoses: [],\n      services: []\n    }\n    this.setState({ patients: patientsList })\n  }\n\n  setPatientInfo(data, field) {\n    const { patients, selectedPatientId } = this.state\n    const patientsList = { ...patients }\n    const selectedPatient = patientsList[selectedPatientId]\n    if (field === SERVICES_FIELD) {\n      selectedPatient.services = data\n    } else {\n      selectedPatient.diagnoses = data\n    }\n    patientsList[selectedPatientId] = selectedPatient\n    this.setState({ patients: patientsList })\n  }\n\n  setSelectedPatientId(id) {\n    this.setState({\n      selectedPatientId: id\n    })\n  }\n\n  setAllData(data) {\n    const {\n      allServices, allDates, allDiagnoses, allDoctors, allOffices, day\n    } = this.state\n    this.setState({\n      allServices: (day !== MAX_DAY) ? [...allServices, data.services] : [],\n      allDates: (day !== MAX_DAY) ? [...allDates, data.date] : [],\n      allDiagnoses: (day !== MAX_DAY) ? [...allDiagnoses, data.diagnoses] : [],\n      allDoctors: (day !== MAX_DAY) ? [...allDoctors, data.doctor] : [],\n      allOffices: (day !== MAX_DAY) ? [...allOffices, data.office] : [],\n      day: (day !== MAX_DAY) ? (day + MIN_DAY) : MIN_DAY\n    })\n  }\n\n  getPatientByName(name) {\n    const { patients } = this.state\n    return Object.values(patients).find(patient => {\n      return patient.patientName === name\n    })\n  }\n\n  getPatientIdByValue(value) {\n    const { patients } = this.state\n    for (let [key, val] of Object.entries(patients)) {\n      if (JSON.stringify(val) === JSON.stringify(value)) {\n        return key\n      }\n    }\n  }\n\n  componentWillMount() {\n    try {\n      this.patientsRef = base.syncState(TABLE_NAME, {\n        context: this,\n        state: TABLE_NAME\n      })\n    }\n    catch (error) {\n      console.log(error)\n      throw error\n    }\n  }\n\n  render() {\n    const { \n      patients,\n      day,\n      selectedPatientId,\n      allServices,\n      allDiagnoses,\n      allDoctors,\n      allDates,\n      allOffices,\n    } = this.state\n\n    return (\n      <Container className='app'>\n        <MainForm\n          addPatien={ this.addPatient }\n          getPatientByName={ this.getPatientByName }\n          setSelectedPatientId={ this.setSelectedPatientId }\n          getPatientIdByValue={ this.getPatientIdByValue }\n          setPatientInfo={ this.setPatientInfo }\n          patients={ patients }\n          selectedPatientId={ selectedPatientId }\n          setAllData={ this.setAllData }\n          day={ day }\n          allServices={ allServices }\n          allDiagnoses={ allDiagnoses }\n          allDoctors={ allDoctors }\n          allDates={ allDates }\n          allOffices={ allOffices }\n        />\n      </Container>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './containers/App/App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()"],"sourceRoot":""}