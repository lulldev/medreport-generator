{"version":3,"sources":["db/base.js","constants/mainForm.js","components/PatientDetails/PatientDetails.js","api/index.js","constants/api.js","components/DoctorsAppointment/DoctorsAppointment.js","components/NavBar/NavBar.js","components/MainForm/MainForm.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["app","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","base","Rebase","createClass","database","FIRST_NAV_TAB","MIN_DAY","INITIAL_STATE_DOCTORS_APPOINTMENT","patientName","officeAddress","doctorName","doctorValue","isPatientSelected","dateReceipt","INITIAL_STATE_PATIENT","ssn","addressPatient","city","state","zip","phoneNumber","dob","accidentDate","gender","insuranceHolder","phoneNumberHolder","zipHolder","cityHolder","stateHolder","addressHolder","isSameHolder","policyNumber","diagnoses","services","relastionship","isEmployment","isAutoAccident","isOtherAccident","insurance","stateAccident","GENDER_LIST","value","label","INSURANCE_LIST","RELATIONSHIP_LIST","COUT_DAYS","USA_STATES","PatientDetails","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSSNChange","bind","assertThisInitialized","onPatientNameChange","onInsuranceHolderChange","onPolicyNumberChange","onDobChange","onSameHolderChange","onAddressPatientChange","onAddressHolderChange","onStateChange","onStateHolderChange","onGenderChange","onZipChange","onZipHolderChange","onCityChange","onCityHolderChange","onPhoneNumberChange","onPhoneNumberHolderChange","checkValidForm","onEmploymentChange","onAutoAccidentChange","onOtherAccidentChange","onStateAccidentChange","onRelastionshipChange","onAccidentDateChange","onInsuranceChange","onSubmit","event","setState","target","moment","format","_this$state","preventDefault","patient","addPatien","NotificationManager","success","error","_this$state2","react_default","a","createElement","Form","Row","className","form","Col","md","FormGroup","Label","Input","placeholder","onChange","required","react_select_browser_esm","options","defaultValue","type","disabled","check","checked","isDisabled","for","CustomInput","id","name","bsSize","Button","color","size","lib","Component","newLineMapping","0","1","2","3","4","5","renderData","content","data","JSZip","doc","docxtemplater","loadZip","setOptions","nullGetter","setData","render","e","message","stack","properties","console","log","JSON","stringify","getZip","generate","generateEmptyLine","countLines","result","countLine","j","push","calculateSum","sum","forEach","element","parseInt","generateFile","countDays","propsData","diagnosesList","diagnosesRemainList","temporaryDate","doctorsList","concat","substr","allDiagnoses","list","indexList","slice","indexElement","length","join","allDoctors","index","_doctorsList$push","defineProperty","npi","signature","allServices","number","replace","undefined","find","elem","url","callback","offices","indexSub","allOffices","search","of_1","of_2","i","servicesMain","filter","insertData","objectSpread","remain","sum_","dv","allDates","servicesRemain","docx","DocxMerger","dateTimeCreate","Date","now","outputName","save","saveAs","JSZipUtils","getBinaryContent","DoctorsAppointment","onDataReceiptbChange","onOfficeAddress","onPatientChange","onDoctorChange","onServicesChange","onDiagnosesChange","checkValid","setPatientInfo","getPatientByName","patientId","getPatientIdByValue","setSelectedPatientId","_this$props","patientsList","selectedPatientId","servicesList","Array","isArray","_this$props2","day","setAllData","date","doctor","office","genData","toConsumableArray","_this2","doctorList","window","officeAddressList","_this$props3","selectPatientList","entries","map","_ref","_ref2","slicedToArray","val","setCountDays","isMulti","classNamePrefix","closeMenuOnSelect","hideSelectedOptions","NavBar","toggle","tabPosition","Nav","tabs","NavItem","NavLink","classnames","active","onClick","MainForm","activeTab","tab","patients","components_NavBar_NavBar","TabContent","TabPane","tabId","sm","components_DoctorsAppointment_DoctorsAppointment","components_PatientDetails_PatientDetails","App","days","currentDay","addPatient","field","selectedPatient","values","_i","_Object$entries","_ref3","key","patientsRef","syncState","context","_this$state3","Container","components_MainForm_MainForm","Boolean","location","hostname","match","ReactDOM","containers_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iUAaMA,SAAMC,EAASC,cAVN,CACbC,OAAQC,0CACRC,WAAYD,gCACZE,YAAaF,uCACbG,UAAWH,gBACXI,cAAeJ,GACfK,kBAAmBL,eACnBM,MAAON,wCAIHO,EAAOC,IAAOC,YAAYb,EAAIc,8GCNvBC,EAAgB,IAMhBC,EAAU,EAIVC,EAAoC,CAC/CC,YAAa,GACbC,cAAe,GACfC,WAAY,GACZC,YAAa,GACbC,mBAAmB,EACnBC,YAAa,MAIFC,EAAwB,CACnCN,YAAa,GACbO,IAAK,GACLC,eAAgB,GAChBC,KAAM,eACNC,MAAO,KACPC,IAAK,GACLC,YAAa,GACbC,IAAK,KACLC,aAAc,KACdC,OAAQ,GACRC,gBAAiB,GACjBC,kBAAmB,GACnBC,UAAW,GACXC,WAAY,eACZC,YAAa,KACbC,cAAe,GACfC,cAAc,EACdC,aAAc,GACdC,UAAW,GACXC,SAAU,GACVC,cAAe,GACfC,cAAc,EACdC,gBAAgB,EAChBC,iBAAiB,EACjBC,UAAW,GACXC,cAAe,MAGJC,EAAc,CACzB,CAAEC,MAAO,OAAQC,MAAO,QACxB,CAAED,MAAO,SAAUC,MAAO,WAGfC,EAAiB,CAC5B,CAAEF,MAAO,YAAaC,MAAO,aAC7B,CAAED,MAAO,QAASC,MAAO,UAGdE,EAAoB,CAC/B,CAAEH,MAAO,YAAQC,MAAO,aACxB,CAAED,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,QAASC,MAAO,SACzB,CAAED,MAAO,QAASC,MAAO,UAGdG,EAAY,CACvB,CAAEJ,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,OAGTI,EAAa,CACxB,CACEL,MAAO,UACPC,MAAO,MAET,CACED,MAAO,SACPC,MAAO,MAET,CACED,MAAO,iBACPC,MAAO,MAET,CACED,MAAO,UACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,aACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,cACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,uBACPC,MAAO,MAET,CACED,MAAO,iCACPC,MAAO,MAET,CACED,MAAO,UACPC,MAAO,MAET,CACED,MAAO,UACPC,MAAO,MAET,CACED,MAAO,OACPC,MAAO,MAET,CACED,MAAO,SACPC,MAAO,MAET,CACED,MAAO,QACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,UACPC,MAAO,MAET,CACED,MAAO,OACPC,MAAO,MAET,CACED,MAAO,SACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,YACPC,MAAO,MAET,CACED,MAAO,QACPC,MAAO,MAET,CACED,MAAO,mBACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,gBACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,YACPC,MAAO,MAET,CACED,MAAO,cACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,UACPC,MAAO,MAET,CACE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","file":"static/js/main.621e1fd0.chunk.js","sourcesContent":["import Rebase from 're-base'\nimport firebase from 'firebase'\n\nconst config = {\n  apiKey: process.env.REACT_APP_FIREBASE_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n}\n\nconst app = firebase.initializeApp(config)\nconst base = Rebase.createClass(app.database())\n\nexport { base }\n","// MAIN FORM\nexport const DATE_FORMAT = 'MMDDYYYY'\nexport const ERROR_LABEL = 'Error message'\nexport const ERROR_MESSAGE = 'Please, fill in all fields!'\nexport const SUCCES_MESSAGE = 'You add new patient'\nexport const SUCCES_LABEL = 'Success'\nexport const SUCCES_GENERATION = 'Generation'\nexport const TIMEOUT_MESSAGE = 3000\nexport const FIRST_NAV_TAB = '1'\nexport const SECOND_NAV_TAB = '2'\nexport const SERVICES_FIELD = 'services'\nexport const DIAGNOSES_FIELD = 'diagnoses'\nexport const TABLE_NAME = 'patients'\nexport const MAX_DAY = 25\nexport const MIN_DAY = 1\n\n//DoctorsAppointment\n\nexport const INITIAL_STATE_DOCTORS_APPOINTMENT = {\n  patientName: '',\n  officeAddress: '',\n  doctorName: '',\n  doctorValue: {},\n  isPatientSelected: true,\n  dateReceipt: null,\n}\n\n// PATIENT DETAILS\nexport const INITIAL_STATE_PATIENT = {\n  patientName: '',\n  ssn: '',\n  addressPatient: '',\n  city: 'Jacksonville',\n  state: 'FL',\n  zip: '',\n  phoneNumber: '',\n  dob: null,\n  accidentDate: null,\n  gender: '',\n  insuranceHolder: '',\n  phoneNumberHolder: '',\n  zipHolder: '',\n  cityHolder: 'Jacksonville',\n  stateHolder: 'FL',\n  addressHolder: '',\n  isSameHolder: true,\n  policyNumber: '',\n  diagnoses: [],\n  services: [],\n  relastionship: '',\n  isEmployment: false,\n  isAutoAccident: true,\n  isOtherAccident: false,\n  insurance: '',\n  stateAccident: 'FL',\n}\n\nexport const GENDER_LIST = [\n  { value: 'Male', label: 'Male' },\n  { value: 'Female', label: 'Female' },\n]\n\nexport const INSURANCE_LIST = [\n  { value: 'STATEFARM', label: 'STATEFARM' },\n  { value: 'GEICO', label: 'GEICO' },\n]\n\nexport const RELATIONSHIP_LIST = [\n  { value: 'Selа', label: 'Selа' },\n  { value: 'Spouse', label: 'Spouse' },\n  { value: 'Child', label: 'Child' },\n  { value: 'Other', label: 'Other' },\n]\n\nexport const COUT_DAYS = [\n  { value: 1, label: '1' },\n  { value: 2, label: '2' },\n  { value: 3, label: '3' },\n  { value: 4, label: '4' },\n  { value: 5, label: '5' },\n  { value: 6, label: '6' },\n  { value: 7, label: '7' },\n  { value: 8, label: '8' },\n  { value: 9, label: '9' },\n  { value: 10, label: '10' },\n  { value: 11, label: '11' },\n  { value: 12, label: '12' },\n  { value: 13, label: '13' },\n  { value: 14, label: '14' },\n  { value: 15, label: '15' },\n  { value: 16, label: '16' },\n  { value: 17, label: '17' },\n  { value: 18, label: '18' },\n  { value: 19, label: '19' },\n  { value: 20, label: '20' },\n  { value: 21, label: '21' },\n  { value: 22, label: '22' },\n  { value: 23, label: '23' },\n  { value: 24, label: '24' },\n  { value: 25, label: '25' },\n]\n\nexport const USA_STATES = [\n  {\n    value: 'Alabama',\n    label: 'AL',\n  },\n  {\n    value: 'Alaska',\n    label: 'AK',\n  },\n  {\n    value: 'American Samoa',\n    label: 'AS',\n  },\n  {\n    value: 'Arizona',\n    label: 'AZ',\n  },\n  {\n    value: 'Arkansas',\n    label: 'AR',\n  },\n  {\n    value: 'California',\n    label: 'CA',\n  },\n  {\n    value: 'Colorado',\n    label: 'CO',\n  },\n  {\n    value: 'Connecticut',\n    label: 'CT',\n  },\n  {\n    value: 'Delaware',\n    label: 'DE',\n  },\n  {\n    value: 'District Of Columbia',\n    label: 'DC',\n  },\n  {\n    value: 'Federated States Of Micronesia',\n    label: 'FM',\n  },\n  {\n    value: 'Florida',\n    label: 'FL',\n  },\n  {\n    value: 'Georgia',\n    label: 'GA',\n  },\n  {\n    value: 'Guam',\n    label: 'GU',\n  },\n  {\n    value: 'Hawaii',\n    label: 'HI',\n  },\n  {\n    value: 'Idaho',\n    label: 'ID',\n  },\n  {\n    value: 'Illinois',\n    label: 'IL',\n  },\n  {\n    value: 'Indiana',\n    label: 'IN',\n  },\n  {\n    value: 'Iowa',\n    label: 'IA',\n  },\n  {\n    value: 'Kansas',\n    label: 'KS',\n  },\n  {\n    value: 'Kentucky',\n    label: 'KY',\n  },\n  {\n    value: 'Louisiana',\n    label: 'LA',\n  },\n  {\n    value: 'Maine',\n    label: 'ME',\n  },\n  {\n    value: 'Marshall Islands',\n    label: 'MH',\n  },\n  {\n    value: 'Maryland',\n    label: 'MD',\n  },\n  {\n    value: 'Massachusetts',\n    label: 'MA',\n  },\n  {\n    value: 'Michigan',\n    label: 'MI',\n  },\n  {\n    value: 'Minnesota',\n    label: 'MN',\n  },\n  {\n    value: 'Mississippi',\n    label: 'MS',\n  },\n  {\n    value: 'Missouri',\n    label: 'MO',\n  },\n  {\n    value: 'Montana',\n    label: 'MT',\n  },\n  {\n    value: 'Nebraska',\n    label: 'NE',\n  },\n  {\n    value: 'Nevada',\n    label: 'NV',\n  },\n  {\n    value: 'New Hampshire',\n    label: 'NH',\n  },\n  {\n    value: 'New Jersey',\n    label: 'NJ',\n  },\n  {\n    value: 'New Mexico',\n    label: 'NM',\n  },\n  {\n    value: 'New York',\n    label: 'NY',\n  },\n  {\n    value: 'North Carolina',\n    label: 'NC',\n  },\n  {\n    value: 'North Dakota',\n    label: 'ND',\n  },\n  {\n    value: 'Northern Mariana Islands',\n    label: 'MP',\n  },\n  {\n    value: 'Ohio',\n    label: 'OH',\n  },\n  {\n    value: 'Oklahoma',\n    label: 'OK',\n  },\n  {\n    value: 'Oregon',\n    label: 'OR',\n  },\n  {\n    value: 'Palau',\n    label: 'PW',\n  },\n  {\n    value: 'Pennsylvania',\n    label: 'PA',\n  },\n  {\n    value: 'Puerto Rico',\n    label: 'PR',\n  },\n  {\n    value: 'Rhode Island',\n    label: 'RI',\n  },\n  {\n    value: 'South Carolina',\n    label: 'SC',\n  },\n  {\n    value: 'South Dakota',\n    label: 'SD',\n  },\n  {\n    value: 'Tennessee',\n    label: 'TN',\n  },\n  {\n    value: 'Texas',\n    label: 'TX',\n  },\n  {\n    value: 'Utah',\n    label: 'UT',\n  },\n  {\n    value: 'Vermont',\n    label: 'VT',\n  },\n  {\n    value: 'Virgin Islands',\n    label: 'VI',\n  },\n  {\n    value: 'Virginia',\n    label: 'VA',\n  },\n  {\n    value: 'Washington',\n    label: 'WA',\n  },\n  {\n    value: 'West Virginia',\n    label: 'WV',\n  },\n  {\n    value: 'Wisconsin',\n    label: 'WI',\n  },\n  {\n    value: 'Wyoming',\n    label: 'WY',\n  },\n]\n","import React, { Component } from 'react'\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Col,\n  Row,\n  CustomInput,\n} from 'reactstrap'\nimport { NotificationContainer, NotificationManager } from 'react-notifications'\nimport {\n  INITIAL_STATE_PATIENT,\n  GENDER_LIST,\n  USA_STATES,\n  DATE_FORMAT,\n  ERROR_LABEL,\n  ERROR_MESSAGE,\n  TIMEOUT_MESSAGE,\n  SUCCES_MESSAGE,\n  SUCCES_LABEL,\n  RELATIONSHIP_LIST,\n  INSURANCE_LIST,\n} from '../../constants/mainForm'\nimport moment from 'moment'\nimport Select from 'react-select'\nimport './PatientDetails.scss'\nimport PropTypes from 'prop-types'\nimport 'react-notifications/lib/notifications.css'\n\nclass PatientDetails extends Component {\n  static propTypes = {\n    addPatien: PropTypes.func.isRequired,\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = INITIAL_STATE_PATIENT\n    this.onSSNChange = this.onSSNChange.bind(this)\n    this.onPatientNameChange = this.onPatientNameChange.bind(this)\n    this.onInsuranceHolderChange = this.onInsuranceHolderChange.bind(this)\n    this.onPolicyNumberChange = this.onPolicyNumberChange.bind(this)\n    this.onDobChange = this.onDobChange.bind(this)\n    this.onSameHolderChange = this.onSameHolderChange.bind(this)\n    this.onAddressPatientChange = this.onAddressPatientChange.bind(this)\n    this.onAddressHolderChange = this.onAddressHolderChange.bind(this)\n    this.onStateChange = this.onStateChange.bind(this)\n    this.onStateHolderChange = this.onStateHolderChange.bind(this)\n    this.onGenderChange = this.onGenderChange.bind(this)\n    this.onZipChange = this.onZipChange.bind(this)\n    this.onZipHolderChange = this.onZipHolderChange.bind(this)\n    this.onCityChange = this.onCityChange.bind(this)\n    this.onCityHolderChange = this.onCityHolderChange.bind(this)\n    this.onPhoneNumberChange = this.onPhoneNumberChange.bind(this)\n    this.onPhoneNumberHolderChange = this.onPhoneNumberHolderChange.bind(this)\n    this.checkValidForm = this.checkValidForm.bind(this)\n    this.onEmploymentChange = this.onEmploymentChange.bind(this)\n    this.onAutoAccidentChange = this.onAutoAccidentChange.bind(this)\n    this.onOtherAccidentChange = this.onOtherAccidentChange.bind(this)\n    this.onStateAccidentChange = this.onStateAccidentChange.bind(this)\n    this.onRelastionshipChange = this.onRelastionshipChange.bind(this)\n    this.onAccidentDateChange = this.onAccidentDateChange.bind(this)\n    this.onInsuranceChange = this.onInsuranceChange.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  onSSNChange(event) {\n    this.setState({ ssn: event.target.value })\n  }\n\n  onRelastionshipChange(event) {\n    this.setState({ relastionship: event.value })\n  }\n\n  onEmploymentChange(event) {\n    const { isEmployment } = this.state\n    this.setState({ isEmployment: !isEmployment })\n  }\n\n  onAutoAccidentChange(event) {\n    const { isAutoAccident } = this.state\n    this.setState({ isAutoAccident: !isAutoAccident })\n  }\n\n  onOtherAccidentChange(event) {\n    const { isOtherAccident } = this.state\n    this.setState({ isOtherAccident: !isOtherAccident })\n  }\n\n  onStateAccidentChange(event) {\n    this.setState({ stateAccident: event.target.value })\n  }\n\n  onPatientNameChange(event) {\n    this.setState({\n      patientName: event.target.value,\n    })\n    if (this.state.isSameHolder) {\n      this.setState({\n        insuranceHolder: event.target.value,\n      })\n    }\n  }\n\n  onInsuranceHolderChange(event) {\n    this.setState({ insuranceHolder: event.target.value })\n  }\n\n  onPolicyNumberChange(event) {\n    this.setState({ policyNumber: event.target.value })\n  }\n\n  onAddressPatientChange(event) {\n    this.setState({ addressPatient: event.target.value })\n    if (this.state.isSameHolder) {\n      this.setState({\n        addressHolder: event.target.value,\n      })\n    }\n  }\n\n  onAddressHolderChange(event) {\n    this.setState({ addressHolder: event.target.value })\n  }\n\n  onDobChange(event) {\n    this.setState({\n      dob: moment(event.target.value).format(DATE_FORMAT),\n    })\n  }\n\n  onAccidentDateChange(event) {\n    this.setState({\n      accidentDate: moment(event.target.value).format(DATE_FORMAT),\n    })\n  }\n\n  onCityChange(event) {\n    this.setState({ city: event.target.value })\n    if (this.state.isSameHolder) {\n      this.setState({\n        cityHolder: event.target.value,\n      })\n    }\n  }\n\n  onCityHolderChange(event) {\n    this.setState({ cityHolder: event.target.value })\n  }\n\n  onStateChange(event) {\n    this.setState({ state: event.label })\n    if (this.state.isSameHolder) {\n      this.setState({\n        stateHolder: event.label,\n      })\n    }\n  }\n\n  onStateHolderChange(event) {\n    this.setState({ stateHolder: event.label })\n  }\n\n  onPhoneNumberChange(event) {\n    this.setState({ phoneNumber: event.target.value })\n    if (this.state.isSameHolder) {\n      this.setState({\n        phoneNumberHolder: event.target.value,\n      })\n    }\n  }\n\n  onPhoneNumberHolderChange(event) {\n    this.setState({ phoneNumberHolder: event.target.value })\n  }\n\n  onGenderChange(event) {\n    this.setState({ gender: event.value })\n  }\n\n  onInsuranceChange(event) {\n    this.setState({ insurance: event.value })\n  }\n\n  onOfficeAddressChange(event) {\n    this.setState({ officeAddress: event.value })\n  }\n\n  onZipChange(event) {\n    this.setState({ zip: event.target.value })\n    if (this.state.isSameHolder) {\n      this.setState({\n        zipHolder: event.target.value,\n      })\n    }\n  }\n\n  onZipHolderChange(event) {\n    this.setState({ zipHolder: event.target.value })\n  }\n\n  onSameHolderChange() {\n    const {\n      isSameHolder,\n      patientName,\n      phoneNumber,\n      zip,\n      city,\n      state,\n      addressPatient,\n    } = this.state\n    !isSameHolder\n      ? this.setState({\n          insuranceHolder: patientName,\n          phoneNumberHolder: phoneNumber,\n          zipHolder: zip,\n          cityHolder: city,\n          stateHolder: state,\n          addressHolder: addressPatient,\n        })\n      : this.setState({\n          insuranceHolder: '',\n          phoneNumberHolder: '',\n          zipHolder: '',\n          cityHolder: '',\n          stateHolder: '',\n          addressHolder: '',\n        })\n    this.setState({\n      isSameHolder: !isSameHolder,\n    })\n  }\n\n  checkValidForm() {\n    return (\n      this.state.gender &&\n      this.state.state &&\n      this.state.insurance &&\n      this.state.relastionship &&\n      this.state.stateHolder\n    )\n  }\n\n  onSubmit(event) {\n    event.preventDefault()\n    if (this.checkValidForm()) {\n      const patient = this.state\n      delete patient.isSameHolder\n      this.props.addPatien(patient)\n      NotificationManager.success(SUCCES_MESSAGE, SUCCES_LABEL, TIMEOUT_MESSAGE)\n    } else {\n      NotificationManager.error(ERROR_LABEL, ERROR_MESSAGE, TIMEOUT_MESSAGE)\n    }\n  }\n\n  render() {\n    const {\n      isEmployment,\n      isAutoAccident,\n      isSameHolder,\n      isOtherAccident,\n      stateAccident,\n    } = this.state\n    return (\n      <Form onSubmit={this.onSubmit}>\n        <Row className=\"input-label\" form>\n          <Col md={6}>\n            <FormGroup>\n              <Label>Full name patient:</Label>\n              <Input\n                placeholder=\"full name patient...\"\n                onChange={this.onPatientNameChange}\n                required\n              />\n            </FormGroup>\n          </Col>\n          <Col md={4}>\n            <FormGroup>\n              <Label>Social Security Number (SSN):</Label>\n              <Input\n                placeholder=\"ssn...\"\n                onChange={this.onSSNChange}\n                required\n              />\n            </FormGroup>\n          </Col>\n          <Col md={2}>\n            <FormGroup>\n              <Label>Insurance name:</Label>\n              <Select\n                placeholder=\"...\"\n                options={INSURANCE_LIST}\n                onChange={this.onInsuranceChange}\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n        <FormGroup>\n          <Label>Address patient:</Label>\n          <Input\n            placeholder=\"address patient...\"\n            onChange={this.onAddressPatientChange}\n            required\n          />\n        </FormGroup>\n        <Row form>\n          <Col md={6}>\n            <FormGroup>\n              <Label>City:</Label>\n              <Input\n                placeholder=\"city patient...\"\n                onChange={this.onCityChange}\n                required\n                defaultValue=\"Jacksonville\"\n              />\n            </FormGroup>\n          </Col>\n          <Col md={4}>\n            <FormGroup>\n              <Label>State:</Label>\n              <Select\n                placeholder=\"state patient...\"\n                options={USA_STATES}\n                onChange={this.onStateChange}\n                defaultValue={{\n                  value: 'Florida',\n                  label: 'FL',\n                }}\n              />\n            </FormGroup>\n          </Col>\n          <Col md={2}>\n            <FormGroup>\n              <Label>Zip:</Label>\n              <Input\n                placeholder=\"zip patient...\"\n                onChange={this.onZipChange}\n                required\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row form>\n          <Col md={6}>\n            <FormGroup>\n              <Label>Phone number:</Label>\n              <Input\n                placeholder=\"phone number...\"\n                onChange={this.onPhoneNumberChange}\n                required\n              />\n            </FormGroup>\n          </Col>\n          <Col md={4}>\n            <FormGroup>\n              <Label>Date of Birth:</Label>\n              <Input\n                type=\"date\"\n                placeholder=\"date of birth...\"\n                onChange={this.onDobChange}\n                required\n              />\n            </FormGroup>\n          </Col>\n          <Col md={2}>\n            <FormGroup>\n              <Label>Gender:</Label>\n              <Select\n                placeholder=\"gender...\"\n                options={GENDER_LIST}\n                onChange={this.onGenderChange}\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row className=\"line\" form>\n          <Col md={6}>\n            <FormGroup>\n              <Label>Full name insurance holder:</Label>\n              <Input\n                placeholder=\"full name insurance holder...\"\n                value={this.state.insuranceHolder}\n                disabled={isSameHolder}\n                onChange={this.onInsuranceHolderChange}\n                required\n              />\n              <Label check className=\"check-box\">\n                <Input\n                  type=\"checkbox\"\n                  checked={isSameHolder}\n                  onChange={this.onSameHolderChange}\n                />{' '}\n                the name of the insurer matches the name of the patient\n              </Label>\n            </FormGroup>\n          </Col>\n          <Col md={6}>\n            <FormGroup>\n              <Label>Palicy Number:</Label>\n              <Input\n                placeholder=\"palicy number...\"\n                onChange={this.onPolicyNumberChange}\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row>\n          <Col md={6}>\n            <FormGroup>\n              <Label>Address:</Label>\n              <Input\n                placeholder=\"address holder...\"\n                onChange={this.onAddressHolderChange}\n                value={this.state.addressHolder}\n                disabled={isSameHolder}\n                required\n              />\n            </FormGroup>\n          </Col>\n          <Col md={6}>\n            <FormGroup>\n              <Label>Phone number:</Label>\n              <Input\n                placeholder=\"phone number...\"\n                onChange={this.onPhoneNumberHolderChange}\n                value={this.state.phoneNumberHolder}\n                disabled={isSameHolder}\n                required\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row form>\n          <Col md={6}>\n            <FormGroup>\n              <Label>City:</Label>\n              <Input\n                placeholder=\"city holder...\"\n                onChange={this.onCityHolderChange}\n                value={this.state.cityHolder}\n                disabled={isSameHolder}\n                defaultValue=\"Jacksonville\"\n                required\n              />\n            </FormGroup>\n          </Col>\n          <Col md={4}>\n            <FormGroup>\n              <Label>State:</Label>\n              <Select\n                placeholder=\"state holder...\"\n                options={USA_STATES}\n                onChange={this.onStateHolderChange}\n                isDisabled={isSameHolder}\n                defaultValue={{\n                  value: 'Florida',\n                  label: 'FL',\n                }}\n              />\n            </FormGroup>\n          </Col>\n          <Col md={2}>\n            <FormGroup>\n              <Label>Zip:</Label>\n              <Input\n                placeholder=\"zip holder...\"\n                onChange={this.onZipHolderChange}\n                value={this.state.zipHolder}\n                disabled={isSameHolder}\n                required\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row className=\"line\" form>\n          <Col md={6}>\n            <FormGroup>\n              <Label>Patient to relationship to insured:</Label>\n              <Select\n                placeholder=\"...\"\n                options={RELATIONSHIP_LIST}\n                onChange={this.onRelastionshipChange}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label>Accident date:</Label>\n              <Input\n                type=\"date\"\n                placeholder=\"accident date...\"\n                onChange={this.onAccidentDateChange}\n                required\n              />\n            </FormGroup>\n          </Col>\n          <Col md={6}>\n            <FormGroup>\n              <Label for=\"exampleCheckbox\">\n                Is patients condition related to:\n              </Label>\n              <div>\n                <CustomInput\n                  type=\"switch\"\n                  id=\"exampleCustomSwitch\"\n                  name=\"customSwitch\"\n                  label=\"EMPLOYMENT? (Courrent or Previous)\"\n                  onChange={this.onEmploymentChange}\n                  checked={isEmployment}\n                />\n                <Row>\n                  <Col md={3}>\n                    <CustomInput\n                      type=\"switch\"\n                      id=\"exampleCustomSwitch2\"\n                      name=\"customSwitch\"\n                      label=\"AUTO ACCIDENT?\"\n                      onChange={this.onAutoAccidentChange}\n                      checked={isAutoAccident}\n                    />\n                  </Col>\n                  <Col className=\"inputState\" md={2}>\n                    State:\n                    <Input\n                      bsSize=\"sm\"\n                      value={stateAccident}\n                      onChange={this.onStateAccidentChange}\n                    />\n                  </Col>\n                </Row>\n                <CustomInput\n                  type=\"switch\"\n                  id=\"exampleCustomSwitch3\"\n                  label=\"OTHER ACCIDENT?\"\n                  onChange={this.onOtherAccidentChange}\n                  checked={isOtherAccident}\n                />\n              </div>\n            </FormGroup>\n          </Col>\n        </Row>\n        <Button color=\"secondary\" size=\"lg\">\n          Add\n        </Button>\n        <NotificationContainer />\n      </Form>\n    )\n  }\n}\n\nexport default PatientDetails\n","import docxtemplater from 'docxtemplater'\nimport JSZipUtils from 'jszip-utils'\nimport { saveAs } from 'file-saver'\nimport JSZip from 'jszip'\nimport DocxMerger from 'docx-merger'\nimport moment from 'moment'\nimport {\n  DATE_FORMAT,\n  CODE_97110,\n  CODE_97530,\n  CODE_97140,\n  CODE_98940,\n  CODE_98941,\n  CODE_98942,\n  CODE_99202,\n  CODE_99203,\n  CODE_99212,\n  CODE_99213,\n} from '../constants/api'\n\nconst newLineMapping = {\n  0: 0,\n  1: 2,\n  2: 4,\n  3: 6,\n  4: 8,\n  5: 10,\n}\n\nconst loadFile = (url, callback) => {\n  JSZipUtils.getBinaryContent(url, callback)\n}\n\nconst renderData = (content, data) => {\n  let zip = new JSZip(content)\n  let doc = new docxtemplater().loadZip(zip)\n\n  doc.setOptions({\n    nullGetter: () => {\n      return ''\n    },\n  })\n\n  doc.setData(data)\n\n  try {\n    doc.render()\n  } catch (error) {\n    const e = {\n      message: error.message,\n      name: error.name,\n      stack: error.stack,\n      properties: error.properties,\n    }\n    console.log(JSON.stringify({ error: e })) // TODO: DELETE\n    throw error\n  }\n\n  return doc.getZip().generate({ type: 'arraybuffer' })\n}\n\nconst generateEmptyLine = countLines => {\n  const result = []\n  let countLine = 6 - countLines\n  for (let j = 0; j < newLineMapping[countLine]; j++) {\n    result.push({})\n  }\n  return result\n}\n\nconst calculateSum = services => {\n  let sum = 0\n  services.forEach(element => {\n    sum += parseInt(element.value)\n  })\n  return sum\n}\n\nexport const generateFile = (data, patient, countDays) => {\n  const propsData = data\n\n  let diagnosesList = []\n  let diagnosesRemainList = []\n  let temporaryDate = null\n  let doctorsList = []\n  // TODO: FIX DATE FORMAT\n  patient.accidentDate = `${patient.accidentDate.substr(\n    0,\n    2\n  )} ${patient.accidentDate.substr(2, 2)} ${patient.accidentDate.substr(4, 4)}`\n\n  propsData.allDiagnoses.forEach((list, indexList) => {\n    temporaryDate = {}\n    list.slice(0, 11).forEach((element, indexElement) => {\n      temporaryDate[`dai_${indexElement}`] = element.value\n    })\n    diagnosesList.push(temporaryDate)\n    diagnosesRemainList.push(list.slice(11, list.length - 1).join())\n  })\n\n  propsData.allDoctors.forEach((element, index) => {\n    doctorsList.push({\n      [`dN_`]: element.name,\n      [`npi_`]: element.npi,\n      [`sig_`]: element.signature,\n    })\n  })\n\n  propsData.allServices.forEach((list, index) => {\n    list.forEach((element, number) => {\n      element.value = element.value.replace(`${element.label}_`, '')\n      if (\n        element.label === CODE_97110 &&\n        list.find(elem => elem.label === CODE_97530) !== undefined\n      ) {\n        propsData.allServices[index][number]['pfx'] = ` 59`\n      } else if (\n        element.label === CODE_97140 &&\n        list.find(\n          elem =>\n            elem.label === CODE_98940 ||\n            elem.label === CODE_98941 ||\n            elem.label === CODE_98942\n        ) !== undefined\n      ) {\n        propsData.allServices[index][number]['pfx'] = ` 59`\n      } else if (\n        (element.label === CODE_99202 ||\n          element.label === CODE_99203 ||\n          element.label === CODE_99212 ||\n          element.label === CODE_99213) &&\n        propsData.allServices[index].length > 1\n      ) {\n        propsData.allServices[index][number]['pfx'] = ` 25`\n      } else {\n        propsData.allServices[index][number]['pfx'] = ''\n      }\n    })\n  })\n\n  const offices = []\n  let indexSub = null\n  data.allOffices.forEach((element, index) => {\n    indexSub = element.search(/JACKSONVILLE/i)\n    offices.push({\n      of_1: element.substr(0, indexSub),\n      of_2: element.substr(indexSub + 1),\n    })\n  })\n\n  loadFile(`${process.env.REACT_APP_URL_DOCX}${1}.docx`, (error, content) => {\n    if (error) {\n      throw error\n    }\n\n    let result = []\n\n    for (let i = 0; i < countDays; i++) {\n      let servicesMain = propsData.allServices[i].filter(\n        (element, index) => index <= 5\n      )\n      let insertData = {\n        ...patient,\n        services: servicesMain,\n        remain: diagnosesRemainList[i],\n        ...diagnosesList[i],\n        ...doctorsList[i],\n        sum_: calculateSum(servicesMain),\n        dv: propsData.allDates[i],\n        ...offices[i],\n      }\n\n      if (propsData.allServices[i].length <= 6) {\n        insertData['nl'] = generateEmptyLine(propsData.allServices[i].length)\n      }\n\n      result.push(renderData(content, insertData))\n\n      if (propsData.allServices[i].length > 6) {\n        const servicesRemain = propsData.allServices[i].filter(\n          (element, index) => index > 5\n        )\n        insertData['nl'] = generateEmptyLine(servicesRemain.length)\n        insertData['services'] = servicesRemain\n        insertData['sum_'] = calculateSum(servicesRemain)\n        result.push(renderData(content, insertData))\n      }\n    }\n\n    var docx = new DocxMerger({}, result)\n    const dateTimeCreate = moment(Date.now()).format(DATE_FORMAT)\n    const outputName = `report_${dateTimeCreate}.docx`\n    docx.save('blob', function(data) {\n      saveAs(data, outputName)\n    })\n  })\n}\n","export const URL_TEMPLATE = '/tag-example.docx'\nexport const MINE_TYPE =\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\nexport const DATE_FORMAT = 'YYYY_MM_DD_HH_mm_ss'\nexport const TYPE_OUTPUT = 'blob'\nexport const CODE_97110 = '97110'\nexport const CODE_97530 = '97530'\nexport const CODE_97140 = '97140'\nexport const CODE_98940 = '98940'\nexport const CODE_98941 = '98941'\nexport const CODE_98942 = '98942'\nexport const CODE_99202 = '99202'\nexport const CODE_99203 = '99203'\nexport const CODE_99212 = '99212'\nexport const CODE_99213 = '99213'\n","import React, { Component } from 'react'\nimport { Button, Form, FormGroup, Label, Input, Col, Row } from 'reactstrap'\nimport { NotificationContainer, NotificationManager } from 'react-notifications'\nimport {\n  INITIAL_STATE_DOCTORS_APPOINTMENT,\n  DATE_FORMAT,\n  ERROR_LABEL,\n  SUCCES_LABEL,\n  ERROR_MESSAGE,\n  TIMEOUT_MESSAGE,\n  SUCCES_GENERATION,\n  SERVICES_FIELD,\n  DIAGNOSES_FIELD,\n  COUT_DAYS,\n  MIN_DAY,\n} from '../../constants/mainForm'\nimport { generateFile } from '../../api/index'\nimport moment from 'moment'\nimport Select from 'react-select'\nimport 'react-notifications/lib/notifications.css'\nimport './DoctorsAppointment.scss'\n\nclass DoctorsAppointment extends Component {\n  constructor(props) {\n    super(props)\n    this.state = INITIAL_STATE_DOCTORS_APPOINTMENT\n    this.onDataReceiptbChange = this.onDataReceiptbChange.bind(this)\n    this.onOfficeAddress = this.onOfficeAddress.bind(this)\n    this.onPatientChange = this.onPatientChange.bind(this)\n    this.onDoctorChange = this.onDoctorChange.bind(this)\n    this.onServicesChange = this.onServicesChange.bind(this)\n    this.onDiagnosesChange = this.onDiagnosesChange.bind(this)\n    this.checkValid = this.checkValid.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  onDataReceiptbChange(event) {\n    this.setState({\n      dateReceipt: moment(event.target.value).format(DATE_FORMAT),\n    })\n  }\n\n  onServicesChange(event) {\n    this.props.setPatientInfo(event, SERVICES_FIELD)\n  }\n\n  onOfficeAddress(event) {\n    this.setState({ officeAddress: event.value })\n  }\n\n  onPatientChange(event) {\n    const patient = this.props.getPatientByName(event.value)\n    const patientId = this.props.getPatientIdByValue(patient)\n    this.props.setSelectedPatientId(patientId)\n    this.setState({\n      patientName: event.value,\n      isPatientSelected: false,\n    })\n  }\n\n  onDoctorChange(event) {\n    this.setState({\n      doctorName: event.label,\n      doctorValue: event.value,\n    })\n  }\n\n  onDiagnosesChange(event) {\n    this.props.setPatientInfo(event, DIAGNOSES_FIELD)\n  }\n\n  checkValid() {\n    const { doctorName, patientName, officeAddress } = this.state\n    const { patientsList, selectedPatientId } = this.props\n    const servicesList = patientsList[selectedPatientId].services\n    const diagnosesList = patientsList[selectedPatientId].diagnoses\n    return (\n      officeAddress &&\n      doctorName &&\n      patientName &&\n      Array.isArray(servicesList) &&\n      servicesList.length &&\n      Array.isArray(diagnosesList) &&\n      diagnosesList.length\n    )\n  }\n\n  onSubmit(event) {\n    event.preventDefault()\n    if (this.checkValid()) {\n      const {\n        patientsList,\n        selectedPatientId,\n        day,\n        allServices,\n        allDiagnoses,\n        allDoctors,\n        allDates,\n        allOffices,\n        countDays,\n      } = this.props\n      const { doctorValue, officeAddress, dateReceipt } = this.state\n\n      this.props.setAllData({\n        services: patientsList[selectedPatientId].services,\n        date: dateReceipt,\n        diagnoses: patientsList[selectedPatientId].diagnoses,\n        doctor: doctorValue,\n        office: officeAddress,\n      })\n      if (day === countDays) {\n        const genData = {\n          allServices: [\n            ...allServices,\n            patientsList[selectedPatientId].services,\n          ],\n          allDiagnoses: [\n            ...allDiagnoses,\n            patientsList[selectedPatientId].diagnoses,\n          ],\n          allDoctors: [...allDoctors, doctorValue],\n          allDates: [...allDates, dateReceipt],\n          allOffices: [...allOffices, officeAddress],\n        }\n        try {\n          generateFile(genData, patientsList[selectedPatientId], countDays)\n          NotificationManager.success(\n            SUCCES_GENERATION,\n            SUCCES_LABEL,\n            TIMEOUT_MESSAGE\n          )\n        } catch (e) {\n          NotificationManager.error(ERROR_LABEL, '', TIMEOUT_MESSAGE)\n        }\n      }\n    } else {\n      NotificationManager.error(ERROR_LABEL, ERROR_MESSAGE, TIMEOUT_MESSAGE)\n    }\n  }\n\n  render() {\n    const doctorList = window.doctorList\n    const servicesList = window.servicesList\n    const officeAddressList = window.officeAddressList\n    const diagnosesList = window.diagnosesList\n    const { patientsList, selectedPatientId, day } = this.props\n    const { isPatientSelected } = this.state\n    const selectPatientList = []\n    Object.entries(patientsList).map(([key, val]) => {\n      return selectPatientList.push({\n        value: val.patientName,\n        label: val.patientName,\n      })\n    })\n\n    return (\n      <Form onSubmit={this.onSubmit}>\n        <Row form className=\"input-label\">\n          <Col>\n            <h4>Input info for {day} day:</h4>\n          </Col>\n          <Col>\n            <Label>Number of pages in report file:</Label>\n            <Select\n              options={COUT_DAYS}\n              onChange={e => this.props.setCountDays(e.value)}\n              placeholder=\"choose count days...\"\n              defaultValue={{\n                value: 1,\n                label: '1',\n              }}\n              isDisabled={day !== MIN_DAY}\n            />\n          </Col>\n        </Row>\n        <Row form>\n          <Col md={6}>\n            <FormGroup>\n              <Label>Patient:</Label>\n              <Select\n                options={selectPatientList}\n                onChange={this.onPatientChange}\n                isDisabled={day !== MIN_DAY}\n              />\n            </FormGroup>\n          </Col>\n          <Col md={6}>\n            <FormGroup>\n              <Label>Date of Receipt:</Label>\n              <Input\n                type=\"date\"\n                placeholder=\"date of receipt...\"\n                onChange={this.onDataReceiptbChange}\n                required\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row form>\n          <Col md={6}>\n            <FormGroup>\n              <Label>Office address:</Label>\n              <Select\n                options={officeAddressList}\n                onChange={this.onOfficeAddress}\n              />\n            </FormGroup>\n          </Col>\n          <Col md={6}>\n            <FormGroup>\n              <Label>Doctor:</Label>\n              <Select options={doctorList} onChange={this.onDoctorChange} />\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row form>\n          <Col md={6}>\n            <FormGroup>\n              <Label>Diagnoses:</Label>\n              <Select\n                isMulti\n                name=\"colors\"\n                options={diagnosesList}\n                className=\"basic-multi-select\"\n                classNamePrefix=\"select\"\n                closeMenuOnSelect={false}\n                hideSelectedOptions={true}\n                onChange={this.onDiagnosesChange}\n                isDisabled={isPatientSelected}\n                value={\n                  selectedPatientId && patientsList[selectedPatientId].diagnoses\n                }\n              />\n            </FormGroup>\n          </Col>\n          <Col md={6}>\n            <FormGroup>\n              <Label>Selection of services rendered:</Label>\n              <Select\n                isMulti\n                name=\"colors\"\n                options={servicesList}\n                className=\"basic-multi-select\"\n                classNamePrefix=\"select\"\n                closeMenuOnSelect={false}\n                hideSelectedOptions={true}\n                onChange={this.onServicesChange}\n                isDisabled={isPatientSelected}\n                value={\n                  selectedPatientId && patientsList[selectedPatientId].services\n                }\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n        <Button color=\"secondary\" size=\"lg\">\n          Submit\n        </Button>\n        <NotificationContainer />\n      </Form>\n    )\n  }\n}\n\nexport default DoctorsAppointment\n","import React, { Component } from 'react'\nimport { Nav, NavItem, NavLink } from 'reactstrap'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nexport { FIRST_NAV_TAB, SECOND_NAV_TAB } from '../../constants/mainForm'\n\nconst FIRST_NAV_TAB = '1' // DO EXPORT\nconst SECOND_NAV_TAB = '2' // DO EXPORT\n\nclass NavBar extends Component {\n  static propTypes = {\n    toggle: PropTypes.func.isRequired,\n    tabPosition: PropTypes.string.isRequired,\n  }\n\n  render() {\n    const { toggle, tabPosition } = this.props\n    return (\n      <Nav tabs>\n        <NavItem>\n          <NavLink\n            className={classnames({\n              active: tabPosition === FIRST_NAV_TAB,\n            })}\n            onClick={() => toggle(FIRST_NAV_TAB)}\n          >\n            Doctor's Appointment\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({\n              active: tabPosition === SECOND_NAV_TAB,\n            })}\n            onClick={() => toggle(SECOND_NAV_TAB)}\n          >\n            Patient Details\n          </NavLink>\n        </NavItem>\n      </Nav>\n    )\n  }\n}\n\nexport default NavBar\n","import React, { Component } from 'react'\nimport { TabContent, TabPane, Row, Col } from 'reactstrap'\nimport PatientDetails from '../PatientDetails/PatientDetails'\nimport DoctorsAppointment from '../DoctorsAppointment/DoctorsAppointment'\nimport { FIRST_NAV_TAB } from '../../constants/mainForm'\nimport NavBar from '../NavBar/NavBar'\nimport PropTypes from 'prop-types'\nimport './MainForm.scss'\n\nclass MainForm extends Component {\n  static propTypes = {\n    addPatien: PropTypes.func.isRequired,\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      activeTab: FIRST_NAV_TAB,\n    }\n    this.toggle = this.toggle.bind(this)\n  }\n\n  toggle(tab) {\n    if (this.state.activeTab !== tab) {\n      this.setState({\n        activeTab: tab,\n      })\n    }\n  }\n\n  render() {\n    const { activeTab } = this.state\n    const { patients } = this.props\n    return (\n      <div className=\"main-form\">\n        <h2>Medrepot-generator</h2>\n        <NavBar toggle={this.toggle} tabPosition={activeTab} />\n        <TabContent activeTab={activeTab}>\n          <TabPane tabId=\"1\">\n            <Row>\n              <Col sm=\"12\">\n                <DoctorsAppointment\n                  patientsList={patients}\n                  getPatientByName={this.props.getPatientByName}\n                  setSelectedPatientId={this.props.setSelectedPatientId}\n                  getPatientIdByValue={this.props.getPatientIdByValue}\n                  setPatientInfo={this.props.setPatientInfo}\n                  selectedPatientId={this.props.selectedPatientId}\n                  setAllData={this.props.setAllData}\n                  day={this.props.day}\n                  allServices={this.props.allServices}\n                  allDiagnoses={this.props.allDiagnoses}\n                  allDoctors={this.props.allDoctors}\n                  allDates={this.props.allDates}\n                  allOffices={this.props.allOffices}\n                  setCountDays={this.props.setCountDays}\n                  countDays={this.props.countDays}\n                />\n              </Col>\n            </Row>\n          </TabPane>\n          <TabPane tabId=\"2\">\n            <Row>\n              <Col sm=\"12\">\n                <PatientDetails addPatien={this.props.addPatien} />\n              </Col>\n            </Row>\n          </TabPane>\n        </TabContent>\n      </div>\n    )\n  }\n}\n\nexport default MainForm\n","import React, { Component } from 'react'\nimport './App.scss'\nimport { Container } from 'reactstrap'\nimport { base } from '../../db/base'\nimport MainForm from '../../components/MainForm/MainForm'\nimport { SERVICES_FIELD, TABLE_NAME, MIN_DAY } from '../../constants/mainForm'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      patients: {},\n      selectedPatientId: '',\n      allServices: [],\n      allDiagnoses: [],\n      allDoctors: [],\n      allDates: [],\n      allOffices: [],\n      currentDay: MIN_DAY,\n      countDays: MIN_DAY,\n    }\n    this.addPatient = this.addPatient.bind(this)\n    this.setSelectedPatientId = this.setSelectedPatientId.bind(this)\n    this.setPatientInfo = this.setPatientInfo.bind(this)\n    this.getPatientByName = this.getPatientByName.bind(this)\n    this.getPatientIdByValue = this.getPatientIdByValue.bind(this)\n    this.setAllData = this.setAllData.bind(this)\n  }\n\n  setCountDays = days => {\n    this.setState({ countDays: days })\n  }\n\n  addPatient(data) {\n    const patientsList = { ...this.state.patients }\n    const id = Date.now()\n    patientsList[id] = {\n      ...data,\n      diagnoses: [],\n      services: [],\n    }\n    this.setState({ patients: patientsList })\n  }\n\n  setPatientInfo(data, field) {\n    const { patients, selectedPatientId } = this.state\n    const patientsList = { ...patients }\n    const selectedPatient = patientsList[selectedPatientId]\n    if (field === SERVICES_FIELD) {\n      selectedPatient.services = data\n    } else {\n      selectedPatient.diagnoses = data\n    }\n    patientsList[selectedPatientId] = selectedPatient\n    this.setState({ patients: patientsList })\n  }\n\n  setSelectedPatientId(id) {\n    this.setState({\n      selectedPatientId: id,\n    })\n  }\n\n  setAllData(data) {\n    const {\n      allServices,\n      allDates,\n      allDiagnoses,\n      allDoctors,\n      allOffices,\n      currentDay,\n      countDays,\n    } = this.state\n    this.setState({\n      allServices:\n        currentDay !== countDays ? [...allServices, data.services] : [],\n      allDates: currentDay !== countDays ? [...allDates, data.date] : [],\n      allDiagnoses:\n        currentDay !== countDays ? [...allDiagnoses, data.diagnoses] : [],\n      allDoctors: currentDay !== countDays ? [...allDoctors, data.doctor] : [],\n      allOffices: currentDay !== countDays ? [...allOffices, data.office] : [],\n      currentDay: currentDay !== countDays ? currentDay + MIN_DAY : MIN_DAY,\n    })\n  }\n\n  getPatientByName(name) {\n    const { patients } = this.state\n    return Object.values(patients).find(patient => {\n      return patient.patientName === name\n    })\n  }\n\n  getPatientIdByValue(value) {\n    const { patients } = this.state\n    for (let [key, val] of Object.entries(patients)) {\n      if (JSON.stringify(val) === JSON.stringify(value)) {\n        return key\n      }\n    }\n  }\n\n  componentWillMount() {\n    try {\n      this.patientsRef = base.syncState(TABLE_NAME, {\n        context: this,\n        state: TABLE_NAME,\n      })\n    } catch (error) {\n      console.log(error)\n      throw error\n    }\n  }\n\n  render() {\n    const {\n      patients,\n      currentDay,\n      selectedPatientId,\n      allServices,\n      allDiagnoses,\n      allDoctors,\n      allDates,\n      allOffices,\n      countDays,\n    } = this.state\n\n    return (\n      <Container className=\"app\">\n        <MainForm\n          addPatien={this.addPatient}\n          getPatientByName={this.getPatientByName}\n          setSelectedPatientId={this.setSelectedPatientId}\n          getPatientIdByValue={this.getPatientIdByValue}\n          setPatientInfo={this.setPatientInfo}\n          patients={patients}\n          selectedPatientId={selectedPatientId}\n          setAllData={this.setAllData}\n          day={currentDay}\n          countDays={countDays}\n          allServices={allServices}\n          allDiagnoses={allDiagnoses}\n          allDoctors={allDoctors}\n          allDates={allDates}\n          allOffices={allOffices}\n          setCountDays={this.setCountDays}\n        />\n      </Container>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './containers/App/App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}