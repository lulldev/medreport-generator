{"version":3,"sources":["api/index.js","constants/Api.js","components/InputForm/InputForm.js","constants/InputForm.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["generateFile","data","url","callback","error","content","zip","PizZip","doc","docxtemplater","loadZip","setData","Object","objectSpread","render","e","message","name","stack","properties","console","log","JSON","stringify","output","getZip","generate","type","mimeType","dateTimeCreate","moment","Date","now","format","outputName","concat","saveAs","JSZipUtils","getBinaryContent","InputForm","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","insuranceName","insuranceNumber","patientName","insuranceHolder","policyNumber","addressPatient","city","gender","phoneNumber","doctor","officeAddress","dob","services","isSameHolder","onInsuranceNameChange","bind","assertThisInitialized","onInsuranceNumberChange","onPatientNameChange","onInsuranceHolderChange","onPolicyNumberChange","onDobChange","onSameHolderChange","onAddressPatientChange","onOfficeAddressChange","onDoctorChange","onStateChange","onGenderChange","onZipChange","onCityChange","onPhoneNumberChange","onServicesChange","onSubmit","event","setState","value","target","servicesArray","forEach","element","push","preventDefault","_this$state","Array","isArray","length","NotificationManager","insuranceList","window","doctorList","servicesList","officeAddressList","react_default","a","createElement","Form","className","Breadcrumb","BreadcrumbItem","active","Row","form","Col","md","FormGroup","Label","react_select_browser_esm","options","onChange","isMulti","classNamePrefix","Input","placeholder","required","for","id","disabled","check","Button","color","size","react_notifications_lib","Component","App","Container","components_InputForm_InputForm","Boolean","location","hostname","match","ReactDOM","containers_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uYAgBaA,EAAe,SAAAC,GAJX,IAACC,EAAIC,EAAJD,ECZU,oBDYNC,EAKG,SAACC,EAAMC,GAC5B,GAAID,EACF,MAAMA,EAGR,IAAME,EAAM,IAAIC,IAAOF,GACjBG,GAAM,IAAIC,KAAgBC,QAAQJ,GAExCE,EAAIG,QAAJC,OAAAC,EAAA,EAAAD,CAAA,GACKX,IAGL,IACEO,EAAIM,SAEN,MAAOV,GACL,IAAMW,EAAI,CACRC,QAASZ,EAAMY,QACfC,KAAMb,EAAMa,KACZC,MAAOd,EAAMc,MACbC,WAAYf,EAAMe,YAGpB,MADAC,QAAQC,IAAIC,KAAKC,UAAU,CAACnB,MAAOW,KAC7BX,EAGR,IAAMoB,EAAShB,EAAIiB,SAASC,SAAS,CACnCC,KCzCqB,OD0CrBC,SC5CmB,4ED8CfC,EAAiBC,IAAOC,KAAKC,OAAOC,OC7CnB,uBD8CjBC,EAAU,UAAAC,OAAaN,EAAb,SAChBO,iBAAOZ,EAAQU,IApCjBG,IAAWC,iBAAiBpC,EAAIC,sCEoVnBoC,cA7Ub,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAA7B,OAAA8B,EAAA,EAAA9B,CAAA+B,KAAAJ,IACjBE,EAAA7B,OAAAgC,EAAA,EAAAhC,CAAA+B,KAAA/B,OAAAiC,EAAA,EAAAjC,CAAA2B,GAAAO,KAAAH,KAAMH,KACDO,MAAQ,CACXC,cAAe,GACfC,gBAAiB,GACjBC,YAAa,GACbC,gBAAiB,GACjBC,aAAc,GACdC,eAAgB,GAChBC,KAAM,GACNP,MAAO,GACPzC,IAAK,GACLiD,OAAQ,GACRC,YAAa,GACbC,OAAQ,GACRC,cAAe,GACfC,IAAK,KACLC,SAAU,GACVC,cAAc,GAEhBpB,EAAKqB,sBAAwBrB,EAAKqB,sBAAsBC,KAA3BnD,OAAAoD,EAAA,EAAApD,CAAA6B,IAC7BA,EAAKwB,wBAA0BxB,EAAKwB,wBAAwBF,KAA7BnD,OAAAoD,EAAA,EAAApD,CAAA6B,IAC/BA,EAAKyB,oBAAsBzB,EAAKyB,oBAAoBH,KAAzBnD,OAAAoD,EAAA,EAAApD,CAAA6B,IAC3BA,EAAK0B,wBAA0B1B,EAAK0B,wBAAwBJ,KAA7BnD,OAAAoD,EAAA,EAAApD,CAAA6B,IAC/BA,EAAK2B,qBAAuB3B,EAAK2B,qBAAqBL,KAA1BnD,OAAAoD,EAAA,EAAApD,CAAA6B,IAC5BA,EAAK4B,YAAc5B,EAAK4B,YAAYN,KAAjBnD,OAAAoD,EAAA,EAAApD,CAAA6B,IACnBA,EAAK6B,mBAAqB7B,EAAK6B,mBAAmBP,KAAxBnD,OAAAoD,EAAA,EAAApD,CAAA6B,IAC1BA,EAAK8B,uBAAyB9B,EAAK8B,uBAAuBR,KAA5BnD,OAAAoD,EAAA,EAAApD,CAAA6B,IAC9BA,EAAK+B,sBAAwB/B,EAAK+B,sBAAsBT,KAA3BnD,OAAAoD,EAAA,EAAApD,CAAA6B,IAC7BA,EAAKgC,eAAiBhC,EAAKgC,eAAeV,KAApBnD,OAAAoD,EAAA,EAAApD,CAAA6B,IACtBA,EAAKiC,cAAgBjC,EAAKiC,cAAcX,KAAnBnD,OAAAoD,EAAA,EAAApD,CAAA6B,IACrBA,EAAKkC,eAAiBlC,EAAKkC,eAAeZ,KAApBnD,OAAAoD,EAAA,EAAApD,CAAA6B,IACtBA,EAAKmC,YAAcnC,EAAKmC,YAAYb,KAAjBnD,OAAAoD,EAAA,EAAApD,CAAA6B,IACnBA,EAAKoC,aAAepC,EAAKoC,aAAad,KAAlBnD,OAAAoD,EAAA,EAAApD,CAAA6B,IACpBA,EAAKqC,oBAAsBrC,EAAKqC,oBAAoBf,KAAzBnD,OAAAoD,EAAA,EAAApD,CAAA6B,IAC3BA,EAAKsC,iBAAmBtC,EAAKsC,iBAAiBhB,KAAtBnD,OAAAoD,EAAA,EAAApD,CAAA6B,IACxBA,EAAKuC,SAAWvC,EAAKuC,SAASjB,KAAdnD,OAAAoD,EAAA,EAAApD,CAAA6B,IApCCA,qFAuCGwC,GACpBtC,KAAKuC,SAAS,CAAElC,cAAeiC,EAAME,wDAGfF,GACtBtC,KAAKuC,SAAS,CAAEjC,gBAAiBgC,EAAMG,OAAOD,oDAG5BF,GAClBtC,KAAKuC,SAAS,CAAEhC,YAAa+B,EAAMG,OAAOD,wDAGpBF,GACtBtC,KAAKuC,SAAS,CAAE/B,gBAAiB8B,EAAMG,OAAOD,qDAG3BF,GACnBtC,KAAKuC,SAAS,CAAE9B,aAAc6B,EAAMG,OAAOD,uDAGtBF,GACrBtC,KAAKuC,SAAS,CAAE7B,eAAgB4B,EAAMG,OAAOD,4CAGnCF,GACVtC,KAAKuC,SAAS,CACZvB,IAAK7B,IAAOmD,EAAMG,OAAOD,OAAOlD,OCrFX,oDDyFXgD,GACZtC,KAAKuC,SAAS,CAAExB,cAAeuB,EAAMG,OAAOD,6CAGjCF,GACXtC,KAAKuC,SAAS,CAAE5B,KAAM2B,EAAMG,OAAOD,8CAGvBF,GACZtC,KAAKuC,SAAS,CAAEnC,MAAOkC,EAAMG,OAAOD,oDAGlBF,GAClBtC,KAAKuC,SAAS,CAAE1B,YAAayB,EAAMG,OAAOD,+CAG7BF,GACbtC,KAAKuC,SAAS,CAAE3B,OAAQ0B,EAAMG,OAAOD,+CAGxBF,GACbtC,KAAKuC,SAAS,CAAEzB,OAAQwB,EAAME,sDAGVF,GACpBtC,KAAKuC,SAAS,CAAExB,cAAeuB,EAAME,4CAG3BF,GACVtC,KAAKuC,SAAS,CAAE5E,IAAK2E,EAAMG,OAAOD,iDAGnBF,GACf,IAAII,EAAgB,GACN,OAAVJ,GACFA,EAAMK,QAAQ,SAACC,GACbF,EAAcG,KAAKD,EAAQJ,SAE7BxC,KAAKuC,SAAS,CAAEtB,SAAUyB,KAE1B1C,KAAKuC,SAAS,CAAEtB,SAAU,kDAKT,IACXC,EAAiBlB,KAAKI,MAAtBc,aACNA,EAEGlB,KAAKuC,SAAS,CACjB/B,gBAAiB,KAHDR,KAAKuC,SAAS,CAC9B/B,gBAAiBR,KAAKI,MAAMG,cAI9BP,KAAKuC,SAAS,CACZrB,cAAeA,qCAIVoB,GACPA,EAAMQ,iBADQ,IAAAC,EAKV/C,KAAKI,MAFPU,EAHYiC,EAGZjC,OAAQT,EAHI0C,EAGJ1C,cACRU,EAJYgC,EAIZhC,cAAeE,EAJH8B,EAIG9B,SAEbH,GAAUT,GAAiBU,GAC3BiC,MAAMC,QAAQhC,IAAaA,EAASiC,OACtC7F,EAAa2C,KAAKI,OAEpB+C,sBAAoB1F,MC3JG,gBACE,8BACE,sCDiK3B,IAAM2F,EAAgBC,OAAOD,cACvBE,EAAaD,OAAOC,WACpBC,EAAeF,OAAOE,aACtBC,EAAoBH,OAAOG,kBACjC,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAU,OAAOxB,SAAWrC,KAAKqC,UACrCoB,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAgBC,QAAM,GAAtB,iCAEFP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKC,MAAI,GACPT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAKC,GAAI,GACPX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,gBACAb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACEC,QAAUlB,EACVmB,SAAWzE,KAAK8B,mBAItB2B,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAKC,GAAI,GACPX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACAZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,wBACAb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACEC,QAAUpB,EACVqB,SAAWzE,KAAKmB,2BAKtBsC,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKC,MAAI,GACPT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAKC,GAAI,GACPX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,wBACAb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACEC,QAAUhB,EACViB,SAAWzE,KAAK6B,0BAItB4B,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAKC,GAAI,GACPX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACAZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,wCACAb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACEG,SAAO,EAACpG,KAAK,SAASkG,QAAUjB,EAChCM,UAAU,qBACVc,gBAAgB,SAChBF,SAAWzE,KAAKoC,sBAKtBqB,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAgBC,QAAM,GAAtB,oBAEFP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKC,MAAI,GACPT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAKC,GAAI,GACPX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,2BACAb,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEC,YAAY,uBACZJ,SAAWzE,KAAKuB,oBAChBuD,UAAQ,MAIdrB,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAKC,GAAI,GACPX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,sCACAb,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEC,YAAY,SACZJ,SAAWzE,KAAKsB,wBAChBwD,UAAQ,OAKhBrB,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOS,IAAI,kBAAX,oBACAtB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEC,YAAY,qBACZJ,SAAWzE,KAAK4B,uBAChBkD,UAAQ,KAGZrB,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKC,MAAI,GACPT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAKC,GAAI,GACPX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,cACAb,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEC,YAAY,kBACZJ,SAAWzE,KAAKkC,aAChB4C,UAAQ,MAIdrB,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAKC,GAAI,GACPX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOS,IAAI,gBAAX,UACAtB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEC,YAAY,mBACZJ,SAAWzE,KAAK+B,cAChB+C,UAAQ,MAIdrB,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAKC,GAAI,GACPX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOS,IAAI,cAAX,QACAtB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEC,YAAY,iBACZJ,SAAWzE,KAAKiC,YAChB6C,UAAQ,OAKhBrB,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKC,MAAI,GACPT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAKC,GAAI,GACPX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,sBACAb,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEC,YAAY,kBACZJ,SAAWzE,KAAKmC,oBAChB2C,UAAQ,MAIdrB,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAKC,GAAI,GACPX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOS,IAAI,gBAAX,kBACAtB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACE5F,KAAK,OACLgG,GAAG,cACHH,YAAY,mBACZJ,SAAWzE,KAAK0B,YAChBoD,UAAQ,MAIdrB,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAKC,GAAI,GACPX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOS,IAAI,cAAX,WACAtB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAO5F,KAAK,SAAS8F,UAAQ,GAC3BrB,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,4BAKRF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKC,MAAI,GACPT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAKC,GAAI,GACPX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,oCACAb,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEC,YAAY,gCACZrC,MAAQxC,KAAKI,MAAMI,gBACnByE,SAAWjF,KAAKI,MAAMc,aACtBuD,SAAWzE,KAAKwB,wBAChBsD,UAAQ,IAEVrB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOY,OAAK,EAACrB,UAAU,aACrBJ,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACE5F,KAAK,WACLyF,SAAWzE,KAAK2B,qBACf,IAJL,6DASJ8B,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAKC,GAAI,GACPX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,uBACAb,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEC,YAAY,mBACZJ,SAAWzE,KAAKyB,0BAKxBgC,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAQC,MAAM,YAAYC,KAAK,MAA/B,WAEF5B,EAAAC,EAAAC,cAAC2B,EAAA,sBAAD,cAxUgBC,aENTC,MARf,WACE,OACE/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAW5B,UAAU,OACnBJ,EAAAC,EAAAC,cAAC+B,EAAD,QCIcC,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,kECXNC,IAAS5H,OAAOsF,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.419ea097.chunk.js","sourcesContent":["import docxtemplater  from 'docxtemplater'\nimport JSZipUtils from 'jszip-utils'\nimport { saveAs } from 'file-saver'\nimport PizZip from 'pizzip'\nimport moment from 'moment'\nimport { \n  URL_TEMPLATE,\n  MINE_TYPE,\n  TYPE_OUTPUT,\n  DATE_FORMAT\n} from '../constants/Api'\n\nconst loadFile = (url,callback) => {\n  JSZipUtils.getBinaryContent(url,callback)\n}\n\nexport const generateFile = data => {\n  loadFile(URL_TEMPLATE, (error,content) => {\n    if (error) {\n      throw error\n    }\n\n    const zip = new PizZip(content)\n    const doc = new docxtemplater().loadZip(zip)\n\n    doc.setData({\n      ...data\n    })\n\n    try {\n      doc.render()\n    }\n    catch (error) {\n      const e = {\n        message: error.message,\n        name: error.name,\n        stack: error.stack,\n        properties: error.properties,\n      }\n      console.log(JSON.stringify({error: e}))\n      throw error\n    }\n\n    const output = doc.getZip().generate({\n      type: TYPE_OUTPUT,\n      mimeType: MINE_TYPE,\n    })\n    const dateTimeCreate = moment(Date.now()).format(DATE_FORMAT)\n    const outputName = `report_${dateTimeCreate}.docx`\n    saveAs(output, outputName)\n  })\n}","export const URL_TEMPLATE = '/tag-example.docx'\nexport const MINE_TYPE = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\nexport const DATE_FORMAT = 'YYYY_MM_DD_HH_mm_ss'\nexport const TYPE_OUTPUT = 'blob'","import React, { Component } from 'react'\nimport { \n  Button, Form, FormGroup, Label, Input,\n  Col, Row, Breadcrumb, BreadcrumbItem\n} from 'reactstrap'\nimport { generateFile } from '../../api/index'\nimport moment from 'moment'\nimport './InputForm.scss'\nimport Select from 'react-select'\nimport 'react-notifications/lib/notifications.css'\nimport {\n  NotificationContainer,\n  NotificationManager\n} from 'react-notifications'\nimport { \n  DATE_FORMAT, ERROR_LABEL, \n  ERROR_MESSAGE, TIMEOUT_MESSAGE\n} from '../../constants/InputForm'\n\nclass InputForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      insuranceName: '',\n      insuranceNumber: '',\n      patientName: '',\n      insuranceHolder: '',\n      policyNumber: '',\n      addressPatient: '',\n      city: '',\n      state: '',\n      zip: '',\n      gender: '',\n      phoneNumber: '',\n      doctor: '',\n      officeAddress: '',\n      dob: null,\n      services: [],\n      isSameHolder: false\n    }\n    this.onInsuranceNameChange = this.onInsuranceNameChange.bind(this)\n    this.onInsuranceNumberChange = this.onInsuranceNumberChange.bind(this)\n    this.onPatientNameChange = this.onPatientNameChange.bind(this)\n    this.onInsuranceHolderChange = this.onInsuranceHolderChange.bind(this)\n    this.onPolicyNumberChange = this.onPolicyNumberChange.bind(this)\n    this.onDobChange = this.onDobChange.bind(this)\n    this.onSameHolderChange = this.onSameHolderChange.bind(this)\n    this.onAddressPatientChange = this.onAddressPatientChange.bind(this)\n    this.onOfficeAddressChange = this.onOfficeAddressChange.bind(this)\n    this.onDoctorChange = this.onDoctorChange.bind(this)\n    this.onStateChange = this.onStateChange.bind(this)\n    this.onGenderChange = this.onGenderChange.bind(this)\n    this.onZipChange = this.onZipChange.bind(this)\n    this.onCityChange = this.onCityChange.bind(this)\n    this.onPhoneNumberChange = this.onPhoneNumberChange.bind(this)\n    this.onServicesChange = this.onServicesChange.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n  \n  onInsuranceNameChange(event) {\n    this.setState({ insuranceName: event.value })\n  }\n  \n  onInsuranceNumberChange(event) {\n    this.setState({ insuranceNumber: event.target.value })\n  }\n\n  onPatientNameChange(event) {\n    this.setState({ patientName: event.target.value })\n  }\n\n  onInsuranceHolderChange(event) {\n    this.setState({ insuranceHolder: event.target.value })\n  }\n\n  onPolicyNumberChange(event) {\n    this.setState({ policyNumber: event.target.value })\n  }\n\n  onAddressPatientChange(event) {\n    this.setState({ addressPatient: event.target.value })\n  }\n\n  onDobChange(event) {\n    this.setState({\n      dob: moment(event.target.value).format(DATE_FORMAT)\n    })\n  }\n\n  officeAddress(event) {\n    this.setState({ officeAddress: event.target.value })\n  }\n\n  onCityChange(event) {\n    this.setState({ city: event.target.value })\n  }\n\n  onStateChange(event) {\n    this.setState({ state: event.target.value })\n  }\n\n  onPhoneNumberChange(event) {\n    this.setState({ phoneNumber: event.target.value })\n  }\n\n  onGenderChange(event) {\n    this.setState({ gender: event.target.value })\n  }\n\n  onDoctorChange(event) {\n    this.setState({ doctor: event.value })\n  }\n\n  onOfficeAddressChange(event) {\n    this.setState({ officeAddress: event.value })\n  }\n\n  onZipChange(event) {\n    this.setState({ zip: event.target.value })\n  }\n\n  onServicesChange(event) {\n    let servicesArray = []\n    if (event !== null){\n      event.forEach((element) => {\n        servicesArray.push(element.value)\n      })\n      this.setState({ services: servicesArray })\n    } else {\n      this.setState({ services: [] })\n    }\n  }\n\n\n  onSameHolderChange() {\n    const { isSameHolder } = this.state\n    !(isSameHolder) ? this.setState({\n      insuranceHolder: this.state.patientName,\n    }) : this.setState({\n      insuranceHolder: ''\n    })\n    this.setState({\n      isSameHolder: !isSameHolder\n    })\n  }\n\n  onSubmit(event) {\n    event.preventDefault()\n    const { \n      doctor, insuranceName,\n      officeAddress, services\n    } = this.state\n    if (doctor && insuranceName && officeAddress && \n        Array.isArray(services) && services.length)\n      generateFile(this.state)\n    else \n    NotificationManager.error(\n      ERROR_LABEL,\n      ERROR_MESSAGE,\n      TIMEOUT_MESSAGE\n    )\n  }\n\n  render() {\n    const insuranceList = window.insuranceList\n    const doctorList = window.doctorList\n    const servicesList = window.servicesList\n    const officeAddressList = window.officeAddressList\n    return (\n      <div>\n        <h2>Medrepot-generator</h2>\n        <Form className='form' onSubmit={ this.onSubmit }>\n          <Breadcrumb>\n            <BreadcrumbItem active>Pre-Registration Information</BreadcrumbItem>\n          </Breadcrumb>\n          <Row form>\n            <Col md={6}>\n              <FormGroup>\n                <Label>Doctor:</Label>\n                <Select \n                  options={ doctorList }\n                  onChange={ this.onDoctorChange }\n                />\n              </FormGroup>\n            </Col>\n            <Col md={6}>\n              <FormGroup>\n              <Label>Insurance name:</Label>\n              <Select\n                options={ insuranceList }\n                onChange={ this.onInsuranceNameChange }\n              />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row form>\n            <Col md={6}>\n              <FormGroup>\n                <Label>Office address:</Label>\n                <Select\n                  options={ officeAddressList }\n                  onChange={ this.onOfficeAddressChange }\n                />\n              </FormGroup>\n            </Col>\n            <Col md={6}>\n              <FormGroup>\n              <Label>Selection of services rendered:</Label>\n              <Select\n                isMulti name='colors' options={ servicesList }\n                className='basic-multi-select'\n                classNamePrefix='select'\n                onChange={ this.onServicesChange }\n              />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Breadcrumb>\n            <BreadcrumbItem active>Patient Details</BreadcrumbItem>\n          </Breadcrumb>\n          <Row form>\n            <Col md={6}>\n              <FormGroup>\n                <Label>Full name patient:</Label>\n                <Input\n                  placeholder='full name patient...'\n                  onChange={ this.onPatientNameChange }\n                  required\n                />\n              </FormGroup>\n            </Col>\n            <Col md={6}>\n              <FormGroup>\n                <Label>Social Security Number (SSN):</Label>\n                <Input\n                  placeholder='ssn...'\n                  onChange={ this.onInsuranceNumberChange }\n                  required\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <FormGroup>\n            <Label for='exampleAddress'>Address patient:</Label>\n            <Input\n              placeholder='address patient...'\n              onChange={ this.onAddressPatientChange }\n              required\n            />\n          </FormGroup>\n          <Row form>\n            <Col md={6}>\n              <FormGroup>\n                <Label>City:</Label>\n                <Input\n                  placeholder='city patient...'\n                  onChange={ this.onCityChange }\n                  required\n                />\n              </FormGroup>\n            </Col>\n            <Col md={4}>\n              <FormGroup>\n                <Label for='exampleState'>State:</Label>\n                <Input\n                  placeholder='state patient...'\n                  onChange={ this.onStateChange }\n                  required\n                />\n              </FormGroup>\n            </Col>\n            <Col md={2}>\n              <FormGroup>\n                <Label for='exampleZip'>Zip:</Label>\n                <Input\n                  placeholder='zip patient...'\n                  onChange={ this.onZipChange }\n                  required\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row form>\n            <Col md={6}>\n              <FormGroup>\n                <Label>Phone number:</Label>\n                <Input\n                  placeholder='phone number...'\n                  onChange={ this.onPhoneNumberChange }\n                  required\n                />\n              </FormGroup>\n            </Col>\n            <Col md={4}>\n              <FormGroup>\n                <Label for='exampleState'>Date of Birth:</Label>\n                <Input\n                  type='date'\n                  id='exampleDate'\n                  placeholder='date of birth...'\n                  onChange={ this.onDobChange }\n                  required\n                />\n              </FormGroup>\n            </Col>\n            <Col md={2}>\n              <FormGroup>\n                <Label for='exampleZip'>Gender:</Label>\n                <Input type='select' required>\n                  <option>Male</option>\n                  <option>Female</option>\n                </Input>\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row form>\n            <Col md={6}>\n              <FormGroup>\n                <Label>Full name insurance holder:</Label>\n                <Input\n                  placeholder='full name insurance holder...'\n                  value={ this.state.insuranceHolder }\n                  disabled={ this.state.isSameHolder }\n                  onChange={ this.onInsuranceHolderChange }\n                  required\n                />\n                <Label check className='form-item'>\n                  <Input\n                    type='checkbox'\n                    onChange={ this.onSameHolderChange }\n                  />{' '}\n                  the name of the insurer matches the name of the patient\n                </Label>\n              </FormGroup>\n            </Col>\n            <Col md={6}>\n              <FormGroup>\n                <Label>Palicy Number:</Label>\n                <Input\n                  placeholder='palicy number...'\n                  onChange={ this.onPolicyNumberChange }\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Button color='secondary' size='lg'>Submit</Button>\n        </Form>\n        <NotificationContainer/>\n      </div>\n    )\n  }\n}\n\nexport default InputForm","export const DATE_FORMAT = 'MMDDYYYY'\nexport const ERROR_LABEL = 'Error message'\nexport const ERROR_MESSAGE = 'Please, fill in all fields!'\nexport const TIMEOUT_MESSAGE = 3000","import React from 'react'\nimport './App.scss'\nimport { Container } from 'reactstrap'\nimport InputForm from '../../components/InputForm/InputForm'\n\nfunction App() {\n  return (\n    <Container className=\"App\">\n      <InputForm />\n    </Container>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './containers/App/App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}