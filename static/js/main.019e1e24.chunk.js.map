{"version":3,"sources":["db/base.js","constants/mainForm.js","components/PatientDetails/PatientDetails.js","api/index.js","constants/api.js","components/DoctorsAppointment/DoctorsAppointment.js","components/NavBar/NavBar.js","components/MainForm/MainForm.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["app","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","base","Rebase","createClass","database","FIRST_NAV_TAB","INITIAL_STATE_DOCTORS_APPOINTMENT","patientName","services","officeAddress","diagnoses","doctor","dateReceipt","INITIAL_STATE_PATIENT","ssn","addressPatient","city","state","zip","phoneNumber","dob","gender","insuranceHolder","isSameHolder","policyNumber","GENDER_LIST","value","label","USA_STATES","PatientDetails","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSSNChange","bind","assertThisInitialized","onPatientNameChange","onInsuranceHolderChange","onPolicyNumberChange","onDobChange","onSameHolderChange","onAddressPatientChange","onStateChange","onGenderChange","onZipChange","onCityChange","onPhoneNumberChange","checkValidForm","onSubmit","event","setState","target","moment","format","_this$state","preventDefault","patient","addPatien","NotificationManager","success","error","react_default","a","createElement","Form","Row","form","Col","md","FormGroup","Label","Input","placeholder","onChange","required","react_select_browser_esm","options","type","disabled","check","className","Button","color","size","lib","Component","generateFile","data","url","callback","content","PizZip","doc","docxtemplater","loadZip","setData","objectSpread","render","e","message","name","stack","properties","console","log","JSON","stringify","output","getZip","generate","mimeType","dateTimeCreate","Date","now","outputName","concat","saveAs","JSZipUtils","getBinaryContent","DoctorsAppointment","onDataReceiptbChange","onOfficeAddress","onPatientChange","onDoctorChange","onServicesChange","onDiagnosesChange","checkValid","addMulti","servicesArray","forEach","element","push","diagnosesArray","prop","tempArray","Array","isArray","length","doctorList","window","servicesList","officeAddressList","diagnosesList","patientsList","selectPatientList","entries","map","_ref","_ref2","slicedToArray","val","for","id","isMulti","classNamePrefix","NavBar","_this$props","toggle","tabPosition","Nav","tabs","NavItem","NavLink","classnames","active","onClick","MainForm","activeTab","tab","patients","components_NavBar_NavBar","TabContent","TabPane","tabId","sm","components_DoctorsAppointment_DoctorsAppointment","components_PatientDetails_PatientDetails","App","addPatient","patientsRef","syncState","context","Container","components_MainForm_MainForm","Boolean","location","hostname","match","require","config","ReactDOM","containers_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.019e1e24.chunk.js","sourcesContent":["import Rebase from 're-base'\nimport firebase from 'firebase'\n\n/*\nCONFIG\n\n*/\n\nconst config = {\n  apiKey: 'AIzaSyAiC4RtmDL172Pb0qv6kzRFB233d6w1A3I',\n  authDomain: 'medreport-gen.firebaseapp.com',\n  databaseURL: 'https://medreport-gen.firebaseio.com',\n  projectId: 'medreport-gen',\n  storageBucket: '',\n  messagingSenderId: '971351385810',\n  appId: '1:971351385810:web:91740bf0323dde5e'\n}\n\nconst app = firebase.initializeApp(config)\nconst base = Rebase.createClass(app.database())\nexport { base }","// MAIN FORM\nexport const DATE_FORMAT = 'MMDDYYYY'\nexport const ERROR_LABEL = 'Error message'\nexport const ERROR_MESSAGE = 'Please, fill in all fields!'\nexport const TIMEOUT_MESSAGE = 3000\nexport const FIRST_NAV_TAB = '1'\nexport const SECOND_NAV_TAB = '2'\n\n//DoctorsAppointment\n\nexport const INITIAL_STATE_DOCTORS_APPOINTMENT = {\n  patientName: '',\n  services: [],\n  officeAddress: '',\n  diagnoses: [],\n  doctor: '',\n  dateReceipt: null\n}\n\n// PATIENT DETAILS\nexport const INITIAL_STATE_PATIENT = {\n  patientName: '',\n  ssn: '',\n  addressPatient: '',\n  city: '',\n  state: '',\n  zip: '',\n  phoneNumber: '',\n  dob: null,\n  gender: '',\n  insuranceHolder: '',\n  isSameHolder: false,\n  policyNumber: ''\n}\n\nexport const GENDER_LIST = [\n  { value: 'Male', label: 'Male' },\n  { value: 'Female', label: 'Female' }\n]\n\nexport const USA_STATES = [\n  { value: 'ALABAMA', label: 'ALABAMA'},\n  { value: 'ALASKA', label: 'ALASKA'},\n  { value: 'AMERICAN SAMOA', label: 'AMERICAN SAMOA'},\n  { value: 'ARIZONA', label: 'ARIZONA'},\n  { value: 'ARKANSAS', label: 'ARKANSAS'},\n  { value: 'CALIFORNIA', label: 'CALIFORNIA'},\n  { value: 'COLORADO', label: 'COLORADO'},\n  { value: 'CONNECTICUT', label: 'CONNECTICUT'},\n  { value: 'DELAWARE', label: 'DELAWARE'},\n  { value: 'DISTRICT OF COLUMBIA', label: 'DISTRICT OF COLUMBIA'},\n  { value: 'FEDERATED STATES OF MICRONESIA', label: 'FEDERATED STATES OF MICRONESIA'},\n  { value: 'FLORIDA', label: 'FLORIDA'},\n  { value: 'GEORGIA', label: 'GEORGIA'},\n  { value: 'GUAM', label: 'GUAM'},\n  { value: 'HAWAII', label: 'HAWAII'},\n  { value: 'IDAHO', label: 'IDAHO'},\n  { value: 'ILLINOIS', label: 'ILLINOIS'},\n  { value: 'INDIANA', label: 'INDIANA'},\n  { value: 'IOWA', label: 'IOWA'},\n  { value: 'KANSAS', label: 'KANSAS'},\n  { value: 'KENTUCKY', label: 'KENTUCKY'},\n  { value: 'LOUISIANA', label: 'LOUISIANA'},\n  { value: 'MAINE', label: 'MAINE'},\n  { value: 'MARSHALL ISLANDS', label: 'MARSHALL ISLANDS'},\n  { value: 'MARYLAND', label: 'MARYLAND'},\n  { value: 'MASSACHUSETTS', label: 'MASSACHUSETTS'},\n  { value: 'MICHIGAN', label: 'MICHIGAN'},\n  { value: 'MINNESOTA', label: 'MINNESOTA'},\n  { value: 'MISSISSIPPI', label: 'MISSISSIPPI'},\n  { value: 'MISSOURI', label: 'MISSOURI'},\n  { value: 'MONTANA', label: 'MONTANA'},\n  { value: 'NEBRASKA', label: 'NEBRASKA'},\n  { value: 'NEVADA', label: 'NEVADA'},\n  { value: 'NEW HAMPSHIRE', label: 'NEW HAMPSHIRE'},\n  { value: 'NEW JERSEY', label: 'NEW JERSEY'},\n  { value: 'NEW MEXICO', label: 'NEW MEXICO'},\n  { value: 'NEW YORK', label: 'NEW YORK'},\n  { value: 'NORTH CAROLINA', label: 'NORTH CAROLINA'},\n  { value: 'NORTH DAKOTA', label: 'NORTH DAKOTA'},\n  { value: 'NORTHERN MARIANA ISLANDS', label: 'NORTHERN MARIANA ISLANDS'},\n  { value: 'OHIO', label: 'OHIO'},\n  { value: 'OKLAHOMA', label: 'OKLAHOMA'},\n  { value: 'OREGON', label: 'OREGON'},\n  { value: 'PALAU', label: 'PALAU'},\n  { value: 'PENNSYLVANIA', label: 'PENNSYLVANIA'},\n  { value: 'PUERTO RICO', label: 'PUERTO RICO'},\n  { value: 'RHODE ISLAND', label: 'RHODE ISLAND'},\n  { value: 'SOUTH CAROLINA', label: 'SOUTH CAROLINA'},\n  { value: 'SOUTH DAKOTA', label: 'SOUTH DAKOTA'},\n  { value: 'TENNESSEE', label: 'TENNESSEE'},\n  { value: 'TEXAS', label: 'TEXAS'},\n  { value: 'UTAH', label: 'UTAH'},\n  { value: 'VERMONT', label: 'VERMONT'},\n  { value: 'VIRGIN ISLANDS', label: 'VI'},\n  { value: 'VIRGINIA', label: 'VIRGINIA'},\n  { value: 'WASHINGTON', label: 'WASHINGTON'},\n  { value: 'WEST VIRGINIA', label: 'WEST VIRGINIA'},\n  { value: 'WISCONSIN', label: 'WISCONSIN'},\n  { value: 'WYOMING', label: 'WYOMING' }\n]","import React, { Component } from 'react'\nimport { Button, Form, FormGroup, Label, Input, Col, Row } from 'reactstrap'\nimport { NotificationContainer, NotificationManager } from 'react-notifications'\nimport {\n  INITIAL_STATE_PATIENT, GENDER_LIST, \n  USA_STATES, DATE_FORMAT, ERROR_LABEL, \n  ERROR_MESSAGE, TIMEOUT_MESSAGE\n} from '../../constants/mainForm'\nimport moment from 'moment'\nimport Select from 'react-select'\nimport './PatientDetails.scss'\nimport PropTypes from 'prop-types'\nimport 'react-notifications/lib/notifications.css'\n\nclass PatientDetails extends Component {\n  static propTypes = {\n    addPatien: PropTypes.func.isRequired\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = INITIAL_STATE_PATIENT\n    this.onSSNChange = this.onSSNChange.bind(this)\n    this.onPatientNameChange = this.onPatientNameChange.bind(this)\n    this.onInsuranceHolderChange = this.onInsuranceHolderChange.bind(this)\n    this.onPolicyNumberChange = this.onPolicyNumberChange.bind(this)\n    this.onDobChange = this.onDobChange.bind(this)\n    this.onSameHolderChange = this.onSameHolderChange.bind(this)\n    this.onAddressPatientChange = this.onAddressPatientChange.bind(this)\n    this.onStateChange = this.onStateChange.bind(this)\n    this.onGenderChange = this.onGenderChange.bind(this)\n    this.onZipChange = this.onZipChange.bind(this)\n    this.onCityChange = this.onCityChange.bind(this)\n    this.onPhoneNumberChange = this.onPhoneNumberChange.bind(this)\n    this.checkValidForm = this.checkValidForm.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  onSSNChange(event) {\n    this.setState({ ssn: event.target.value })\n  }\n\n  onPatientNameChange(event) {\n    this.setState({\n      patientName: event.target.value\n    })\n    if (this.state.isSameHolder) {\n      this.setState({\n        insuranceHolder: event.target.value\n      })\n    }\n  }\n\n  onInsuranceHolderChange(event) {\n    this.setState({ insuranceHolder: event.target.value })\n  }\n\n  onPolicyNumberChange(event) {\n    this.setState({ policyNumber: event.target.value })\n  }\n\n  onAddressPatientChange(event) {\n    this.setState({ addressPatient: event.target.value })\n  }\n\n  onDobChange(event) {\n    this.setState({\n      dob: moment(event.target.value).format(DATE_FORMAT)\n    })\n  }\n\n  onCityChange(event) {\n    this.setState({ city: event.target.value })\n  }\n\n  onStateChange(event) {\n    this.setState({ state: event.value })\n  }\n\n  onPhoneNumberChange(event) {\n    this.setState({ phoneNumber: event.target.value })\n  }\n\n  onGenderChange(event) {\n    this.setState({ gender: event.value })\n  }\n\n  onOfficeAddressChange(event) {\n    this.setState({ officeAddress: event.value })\n  }\n\n  onZipChange(event) {\n    this.setState({ zip: event.target.value })\n  }\n\n  onSameHolderChange() {\n    const { isSameHolder, patientName } = this.state\n    !(isSameHolder) ? this.setState({\n      insuranceHolder: patientName,\n    }) : this.setState({\n      insuranceHolder: ''\n    })\n    this.setState({\n      isSameHolder: !isSameHolder\n    })\n  }\n\n  checkValidForm() {\n    return this.state.gender && this.state.state\n  }\n\n  onSubmit(event) {\n    event.preventDefault()\n    if (this.checkValidForm()) {\n      const patient = this.state\n      delete patient.isSameHolder\n      this.props.addPatien(patient)\n      NotificationManager.success(\n        'You add new patient',\n        'Success',\n        TIMEOUT_MESSAGE\n      )\n    } else {\n      NotificationManager.error(\n        ERROR_LABEL,\n        ERROR_MESSAGE,\n        TIMEOUT_MESSAGE\n      )\n    }\n  }\n\n\n  render() {\n    return (\n      <Form onSubmit={ this.onSubmit }>\n        <Row form>\n          <Col md={7}>\n          <FormGroup>\n            <Label>Full name patient:</Label>\n              <Input\n                placeholder='full name patient...'\n                onChange={ this.onPatientNameChange }\n                required\n              />\n              </FormGroup>\n            </Col>\n            <Col md={5}>\n              <FormGroup>\n                <Label>Social Security Number (SSN):</Label>\n                <Input\n                  placeholder='ssn...'\n                  onChange={ this.onSSNChange }\n                  required\n                />\n            </FormGroup>\n          </Col>\n        </Row>\n        <FormGroup>\n          <Label>Address patient:</Label>\n          <Input\n            placeholder='address patient...'\n            onChange={ this.onAddressPatientChange }\n            required\n          />\n        </FormGroup>\n        <Row form>\n          <Col md={6}>\n            <FormGroup>\n              <Label>City:</Label>\n              <Input\n                placeholder='city patient...'\n                onChange={ this.onCityChange }\n                required\n              />\n            </FormGroup>\n          </Col>\n          <Col md={4}>\n            <FormGroup>\n              <Label>State:</Label>\n              <Select\n                placeholder='state patient...'\n                options={ USA_STATES }\n                onChange={ this.onStateChange }\n              />\n            </FormGroup>\n          </Col>\n          <Col md={2}>\n            <FormGroup>\n              <Label>Zip:</Label>\n              <Input\n                placeholder='zip patient...'\n                onChange={ this.onZipChange }\n                required\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row form>\n          <Col md={6}>\n            <FormGroup>\n              <Label>Phone number:</Label>\n              <Input\n                placeholder='phone number...'\n                onChange={ this.onPhoneNumberChange }\n                required\n              />\n            </FormGroup>\n          </Col>\n          <Col md={4}>\n            <FormGroup>\n              <Label>Date of Birth:</Label>\n              <Input\n                type='date'\n                placeholder='date of birth...'\n                onChange={ this.onDobChange }\n                required\n              />\n            </FormGroup>\n          </Col>\n          <Col md={2}>\n            <FormGroup>\n              <Label>Gender:</Label>\n                <Select\n                  placeholder='gender...'\n                  options={ GENDER_LIST }\n                  onChange={ this.onGenderChange }\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row form>\n            <Col md={6}>\n              <FormGroup>\n                <Label>Full name insurance holder:</Label>\n                <Input\n                  placeholder='full name insurance holder...'\n                  value={ this.state.insuranceHolder }\n                  disabled={ this.state.isSameHolder }\n                  onChange={ this.onInsuranceHolderChange }\n                  required\n                />\n                <Label check className='check-box'>\n                  <Input\n                    type='checkbox'\n                    onChange={ this.onSameHolderChange }\n                  />{' '}\n                    the name of the insurer matches the name of the patient\n                </Label>\n              </FormGroup>\n            </Col>\n            <Col md={6}>\n              <FormGroup>\n              <Label>Palicy Number:</Label>\n              <Input\n                placeholder='palicy number...'\n                onChange={ this.onPolicyNumberChange }\n              />\n            </FormGroup>\n          </Col>\n          </Row>\n        <Button color='secondary' size='lg'>Add</Button>\n        <NotificationContainer />\n      </Form>\n    )\n  }\n}\n\nexport default PatientDetails","import docxtemplater  from 'docxtemplater'\nimport JSZipUtils from 'jszip-utils'\nimport { saveAs } from 'file-saver'\nimport PizZip from 'pizzip'\nimport moment from 'moment'\nimport { \n  URL_TEMPLATE,\n  MINE_TYPE,\n  TYPE_OUTPUT,\n  DATE_FORMAT\n} from '../constants/api'\n\nconst loadFile = (url,callback) => {\n  JSZipUtils.getBinaryContent(url,callback)\n}\n\nexport const generateFile = data => {\n  loadFile(URL_TEMPLATE, (error, content) => {\n    if (error) {\n      throw error\n    }\n\n    const zip = new PizZip(content)\n    const doc = new docxtemplater().loadZip(zip)\n\n    doc.setData({\n      ...data\n    })\n\n    try {\n      doc.render()\n    }\n    catch (error) {\n      const e = {\n        message: error.message,\n        name: error.name,\n        stack: error.stack,\n        properties: error.properties,\n      }\n      console.log(JSON.stringify({ error: e }))\n      throw error\n    }\n\n    const output = doc.getZip().generate({\n      type: TYPE_OUTPUT,\n      mimeType: MINE_TYPE,\n    })\n    const dateTimeCreate = moment(Date.now()).format(DATE_FORMAT)\n    const outputName = `report_${ dateTimeCreate }.docx`\n    saveAs(output, outputName)\n  })\n}","export const URL_TEMPLATE = '/tag-example.docx'\nexport const MINE_TYPE = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\nexport const DATE_FORMAT = 'YYYY_MM_DD_HH_mm_ss'\nexport const TYPE_OUTPUT = 'blob'","import React, { Component } from 'react'\nimport { Button, Form, FormGroup, Label, Input, Col, Row } from 'reactstrap'\nimport { NotificationContainer, NotificationManager } from 'react-notifications'\nimport {\n  INITIAL_STATE_DOCTORS_APPOINTMENT,\n  DATE_FORMAT, ERROR_LABEL, \n  ERROR_MESSAGE, TIMEOUT_MESSAGE\n} from '../../constants/mainForm'\nimport { generateFile } from '../../api/index'\nimport moment from 'moment'\nimport Select from 'react-select'\n//import PropTypes from 'prop-types'\nimport 'react-notifications/lib/notifications.css'\n\nclass DoctorsAppointment extends Component {\n  static propTypes = {\n    //patientsList: PropTypes.object.isRequired\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = INITIAL_STATE_DOCTORS_APPOINTMENT\n    this.onDataReceiptbChange = this.onDataReceiptbChange.bind(this)\n    this.onOfficeAddress = this.onOfficeAddress.bind(this)\n    this.onPatientChange = this.onPatientChange.bind(this)\n    this.onDoctorChange = this.onDoctorChange.bind(this)\n    this.onServicesChange = this.onServicesChange.bind(this)\n    this.onDiagnosesChange = this.onDiagnosesChange.bind(this)\n    this.checkValid = this.checkValid.bind(this)\n    this.addMulti = this.addMulti.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  onDataReceiptbChange(event) {\n    this.setState({\n      dateReceipt: moment(event.target.value).format(DATE_FORMAT)\n    })\n  }\n\n  onServicesChange(event) {\n    let servicesArray = []\n    if (event !== null){\n      event.forEach((element) => {\n        servicesArray.push(element.value)\n      })\n      this.setState({ services: servicesArray })\n    } else {\n      this.setState({ services: [] })\n    }\n  }\n  \n  onOfficeAddress(event) {\n    this.setState({ officeAddress: event.value })\n  }\n\n  onPatientChange(event) {\n    this.setState({ patientName: event.value })\n  }\n\n  onDoctorChange(event) {\n    this.setState({ doctor: event.label })\n  }\n\n  onDiagnosesChange(event) {\n    let diagnosesArray = []\n    if (event !== null){\n      event.forEach((element) => {\n        diagnosesArray.push(element.value)\n      })\n      this.setState({ diagnoses: diagnosesArray })\n    } else {\n      this.setState({ diagnoses: [] })\n    }\n  }\n\n  addMulti(prop, value) {\n    let tempArray = []\n    if (value !== null) {\n      value.forEach((element) => {\n        tempArray.push(element.value)\n      })\n      this.setState({ prop: tempArray })\n    } else {\n      this.setState({ prop: [] })\n    }\n  }\n\n  checkValid() {\n    const { \n      doctor, patientName, diagnoses,\n      officeAddress, services\n    } = this.state\n    return officeAddress && doctor && patientName && \n           Array.isArray(services) && services.length && \n           Array.isArray(diagnoses) && diagnoses.length\n  }\n\n  onSubmit(event) {\n    event.preventDefault()\n    if (this.checkValid()) {\n      generateFile(this.state)\n      NotificationManager.success(\n        'Generation',\n        'Success',\n        TIMEOUT_MESSAGE\n      )\n    } else {\n      NotificationManager.error(\n        ERROR_LABEL,\n        ERROR_MESSAGE,\n        TIMEOUT_MESSAGE\n      )\n    }\n  }\n\n  render() {\n    const doctorList = window.doctorList\n    const servicesList = window.servicesList\n    const officeAddressList = window.officeAddressList\n    const diagnosesList = window.diagnosesList\n    const { patientsList } = this.props\n    const selectPatientList = []\n    Object.entries(patientsList).map(([key, val]) => {\n      return (\n        selectPatientList.push({\n          value: val.patientName,\n          label: val.patientName\n        })\n      )\n    })\n\n    return (\n      <Form onSubmit={ this.onSubmit }>\n        <Row form>\n            <Col md={6}>\n              <FormGroup>\n                <Label>Patient:</Label>\n                <Select \n                  options={ selectPatientList }\n                  onChange={ this.onPatientChange }\n                />\n              </FormGroup>\n            </Col>\n            <Col md={6}>\n              <FormGroup>\n                <Label for='exampleState'>Date of Receipt:</Label>\n                <Input\n                  type='date'\n                  id='exampleDate'\n                  placeholder='date of receipt...'\n                  onChange={ this.onDataReceiptbChange }\n                  required\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row form>\n            <Col md={6}>\n              <FormGroup>\n                <Label>Office address:</Label>\n                <Select\n                  options={ officeAddressList }\n                  onChange={ this.onOfficeAddress }\n                />\n              </FormGroup>\n            </Col>\n            <Col md={6}>\n              <FormGroup>\n                <Label>Doctor:</Label>\n                <Select \n                  options={ doctorList }\n                  onChange={ this.onDoctorChange }\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row form>\n            <Col md={6}>\n              <FormGroup>\n              <Label>Diagnoses:</Label>\n              <Select\n                isMulti name='colors' options={ diagnosesList }\n                className='basic-multi-select'\n                classNamePrefix='select'\n                onChange={ this.onDiagnosesChange }\n              />\n              </FormGroup>\n            </Col>\n            <Col md={6}>\n              <FormGroup>\n              <Label>Selection of services rendered:</Label>\n              <Select\n                isMulti name='colors' options={ servicesList }\n                className='basic-multi-select'\n                classNamePrefix='select'\n                onChange={ this.onServicesChange }\n              />\n              </FormGroup>\n            </Col>\n          </Row>\n        <Button color='secondary' size='lg'>Submit</Button>\n        <NotificationContainer />\n      </Form>\n    )\n  }\n}\n\nexport default DoctorsAppointment","import React, { Component } from 'react'\nimport { Nav, NavItem, NavLink } from 'reactstrap'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nexport { FIRST_NAV_TAB, SECOND_NAV_TAB } from '../../constants/mainForm'\n\nconst FIRST_NAV_TAB = '1' // DO EXPORT\nconst SECOND_NAV_TAB = '2'  // DO EXPORT\n\nclass NavBar extends Component {\n  static propTypes = {\n    toggle: PropTypes.func.isRequired,\n    tabPosition: PropTypes.string.isRequired\n  }\n\n  render() {\n    const { toggle, tabPosition } = this.props\n    return (\n      <Nav tabs>\n        <NavItem>\n          <NavLink\n            className={\n              classnames({\n                active: tabPosition === FIRST_NAV_TAB\n              })\n            }\n            onClick={ () => toggle(FIRST_NAV_TAB) }\n          >\n            Doctor's Appointment\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={\n              classnames({\n                active: tabPosition === SECOND_NAV_TAB\n              })\n            }\n            onClick={ () => toggle(SECOND_NAV_TAB) }\n          >\n            Patient Details\n          </NavLink>\n        </NavItem>\n      </Nav>\n    )\n  }\n}\n\nexport default NavBar","import React, { Component } from 'react'\nimport { Form, TabContent, TabPane, Row, Col } from 'reactstrap'\nimport PatientDetails from '../PatientDetails/PatientDetails'\nimport DoctorsAppointment from '../DoctorsAppointment/DoctorsAppointment'\nimport { FIRST_NAV_TAB  } from '../../constants/mainForm'\nimport NavBar from '../NavBar/NavBar'\nimport PropTypes from 'prop-types'\nimport './MainForm.scss'\n\nclass MainForm extends Component {\n  static propTypes = {\n    addPatien: PropTypes.func.isRequired,\n    //patients: PropTypes.object.isRequired\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      activeTab: FIRST_NAV_TAB\n    }\n    this.toggle = this.toggle.bind(this)\n  }\n\n  toggle(tab) {\n    if (this.state.activeTab !== tab) {\n      this.setState({\n        activeTab: tab\n      })\n    }\n  }\n\n  render() {\n    const { activeTab } = this.state\n    const { patients } = this.props\n    return (\n      <Form>\n        <h2>Medrepot-generator</h2>\n        <NavBar toggle={ this.toggle } tabPosition={ activeTab } />\n        <TabContent activeTab={ activeTab }>\n          <TabPane tabId='1'>\n            <Row>\n              <Col sm='12'>\n                <DoctorsAppointment patientsList={ patients } />\n              </Col>\n            </Row>\n          </TabPane>\n          <TabPane tabId='2'>\n            <Row>\n              <Col sm='12'>\n                <PatientDetails addPatien={ this.props.addPatien } />\n              </Col>\n            </Row>\n          </TabPane>\n        </TabContent>\n      </Form>\n    )\n  }\n}\n\nexport default MainForm","import React, { Component } from 'react'\nimport './App.scss'\nimport { Container } from 'reactstrap'\nimport { base } from '../../db/base'\nimport MainForm from '../../components/MainForm/MainForm'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      patients: []\n    }\n    this.addPatient = this.addPatient.bind(this)\n  }\n\n  addPatient(data) {\n    const patients = { ...this.state.patients }\n    const id = Date.now()\n    patients[id] = {\n      ...data\n    }\n    this.setState({ patients })\n  }\n\n  componentWillMount() {\n    this.patientsRef = base.syncState('patients', {\n      context: this,\n      state: 'patients'\n    })\n  }\n\n  render() {\n    return (\n      <Container className='app'>\n        <MainForm addPatien={ this.addPatient } patients={ this.state.patients } />\n      </Container>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './containers/App/App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nrequire('dotenv').config()\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()"],"sourceRoot":""}