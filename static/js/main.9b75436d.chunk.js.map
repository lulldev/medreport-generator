{"version":3,"sources":["constants/mainForm.js","components/NavBar/NavBar.js","constants/app.js","components/PatientDetails/PatientDetails.js","api/index.js","constants/api.js","components/DoctorsAppointment/DoctorsAppointment.js","components/MainForm/MainForm.js","db/base.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["SERVICES_FIELD","REPEAT_TEXT_INPUTS","GENDER_LIST","value","label","INSURANCE_LIST","RELATIONSHIP_LIST","COUT_DAYS","USA_STATES","NavBar","_this$props","this","props","toggle","tabPosition","react_default","a","createElement","Nav","tabs","NavItem","NavLink","className","classnames","active","onClick","Component","INITIAL_STATE","patients","ERROR_LABEL","SUCCES_LABEL","TIMEOUT_MESSAGE","PatientDetails","_useState","useState","patientName","ssn","patientAddress","patientCity","patientZip","patientPhone","dobPatient","accidentDate","stateAccident","holderName","policyNumber","holderAddress","holderCity","holderZip","holderPhone","_useState2","Object","slicedToArray","textInputs","setTextInputs","_useState3","_useState4","patientState","setPatientState","_useState5","_useState6","holderState","setHolderState","_useState7","_useState8","insuranceName","setInsuranceName","_useState9","_useState10","gender","setGender","_useState11","_useState12","relastionship","setRelastionship","_useState13","_useState14","isSameHolder","setSameHolder","_useState15","_useState16","isEmployment","setEmployment","_useState17","_useState18","isAutoAccident","setAutoAccident","_useState19","_useState20","isOtherAccident","setOtherAccident","addPatient","showMesseageSuccess","showMesseageFill","checkPatientName","handleTextInputChange","event","persist","objectSpread","defineProperty","target","name","includes","Form","onSubmit","preventDefault","newPatient","Row","form","Col","md","FormGroup","Label","Input","placeholder","onChange","required","react_select_browser_esm","options","e","defaultValue","type","disabled","check","checked","isDisabled","for","CustomInput","id","bsSize","Button","color","size","T","PropTypes","func","isRequired","newLineMapping","0","1","2","3","4","5","renderData","content","data","zip","JSZip","doc","docxtemplater","loadZip","setOptions","nullGetter","setData","render","error","message","stack","properties","console","log","JSON","stringify","getZip","generate","generateEmptyLine","countLines","result","countLine","j","push","calculateSum","services","sum","forEach","element","price","getRemainDiagnoses","diagnoses","remain","slice","length","join","getServicesTemplate","toConsumableArray","number","undefined","find","elem","pfx","generateFile","pages","patient","url","callback","listPages","process","page","servicesMain","filter","index","insertData","moment","format","dateReceipt","indexElement","concat","getDiagnosesList","doctor","_ref","npi","signature","getDoctorFormat","sum_","dv","office","indexSub","search","of_1","substr","of_2","getOfficeFormat","officeAddress","servicesRemain","docx","DocxMerger","dateTimeCreate","Date","now","outputName","save","saveAs","JSZipUtils","getBinaryContent","DoctorsAppointment","idPatient","setIdPatient","maxDay","setMaxDay","currentDay","setCurrentDay","setPages","setDoctor","setOfficeAddress","setDateReceipt","doctorList","window","servicesList","officeAddressList","diagnosesList","updatePatient","selectPatientList","patientsList","entries","map","_ref4","_ref5","val","getSelectedPatients","newPage","list","values","patientId","_i","_Object$entries","_ref3","_ref2","key","getPatientIdByValue","isMulti","classNamePrefix","closeMenuOnSelect","hideSelectedOptions","backspaceRemovesValue","MainForm","activeTab","handleToggle","NavBar_NavBar","TabContent","TabPane","tabId","sm","DoctorsAppointment_DoctorsAppointment_DoctorsAppointment","PatientDetails_PatientDetails_PatientDetails","app","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","base","Rebase","createClass","database","App","state","patientData","_this","setState","prevState","_objectSpread2","NotificationManager","success","field","selectedPatient","patientsRef","syncState","context","Container","MainForm_MainForm_MainForm","lib","Boolean","location","hostname","match","ReactDOM","App_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oZAUaA,EAAiB,WAwEjBC,EAAqB,CAChC,cACA,iBACA,cACA,aACA,gBAGWC,EAAc,CACzB,CAAEC,MAAO,OAAQC,MAAO,QACxB,CAAED,MAAO,SAAUC,MAAO,WAGfC,EAAiB,CAC5B,CAAEF,MAAO,YAAaC,MAAO,aAC7B,CAAED,MAAO,QAASC,MAAO,UAGdE,EAAoB,CAC/B,CAAEH,MAAO,YAAQC,MAAO,aACxB,CAAED,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,QAASC,MAAO,SACzB,CAAED,MAAO,QAASC,MAAO,UAGdG,EAAY,CACvB,CAAEJ,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,OAGTI,EAAa,CACxB,CACEL,MAAO,UACPC,MAAO,MAET,CACED,MAAO,SACPC,MAAO,MAET,CACED,MAAO,iBACPC,MAAO,MAET,CACED,MAAO,UACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,aACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,cACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,uBACPC,MAAO,MAET,CACED,MAAO,iCACPC,MAAO,MAET,CACED,MAAO,UACPC,MAAO,MAET,CACED,MAAO,UACPC,MAAO,MAET,CACED,MAAO,OACPC,MAAO,MAET,CACED,MAAO,SACPC,MAAO,MAET,CACED,MAAO,QACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,UACPC,MAAO,MAET,CACED,MAAO,OACPC,MAAO,MAET,CACED,MAAO,SACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,YACPC,MAAO,MAET,CACED,MAAO,QACPC,MAAO,MAET,CACED,MAAO,mBACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,gBACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,YACPC,MAAO,MAET,CACED,MAAO,cACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,UACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,SACPC,MAAO,MAET,CACED,MAAO,gBACPC,MAAO,MAET,CACED,MAAO,aACPC,MAAO,MAET,CACED,MAAO,aACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,iBACPC,MAAO,MAET,CACED,MAAO,eACPC,MAAO,MAET,CACED,MAAO,2BACPC,MAAO,MAET,CACED,MAAO,OACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,SACPC,MAAO,MAET,CACED,MAAO,QACPC,MAAO,MAET,CACED,MAAO,eACPC,MAAO,MAET,CACED,MAAO,cACPC,MAAO,MAET,CACED,MAAO,eACPC,MAAO,MAET,CACED,MAAO,iBACPC,MAAO,MAET,CACED,MAAO,eACPC,MAAO,MAET,CACED,MAAO,YACPC,MAAO,MAET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","file":"static/js/main.9b75436d.chunk.js","sourcesContent":["// MAIN FORM\nexport const DATE_FORMAT = 'MMDDYYYY'\nexport const ERROR_LABEL = 'Error message'\nexport const ERROR_MESSAGE = 'Please, fill in all fields!'\nexport const SUCCES_MESSAGE = 'Done'\nexport const SUCCES_LABEL = 'Success'\nexport const SUCCES_GENERATION = 'Generation'\nexport const TIMEOUT_MESSAGE = 3000\nexport const FIRST_NAV_TAB = '1'\nexport const SECOND_NAV_TAB = '2'\nexport const SERVICES_FIELD = 'services'\nexport const DIAGNOSES_FIELD = 'diagnoses'\nexport const TABLE_NAME = 'patients'\nexport const MAX_DAY = 25\nexport const MIN_DAY = 1\n\n//DoctorsAppointment\n\nexport const INITIAL_STATE_DOCTORS_APPOINTMENT = {\n  patientName: '',\n  officeAddress: '',\n  doctorName: '',\n  doctorValue: {},\n  isPatientSelected: true,\n  dateReceipt: null,\n}\n\nexport const getPatientByName = (list, name) => {\n  return Object.values(list).find(patient => {\n    return patient.patientName === name\n  })\n}\n\nexport const getPatientIdByValue = (list, value) => {\n  for (let [key, val] of Object.entries(list)) {\n    if (JSON.stringify(val) === JSON.stringify(value)) {\n      return key\n    }\n  }\n}\n\nexport const getSelectedPatients = patientsList => {\n  const selectPatientList = []\n  Object.entries(patientsList).map(([key, val]) => {\n    return selectPatientList.push({\n      value: val.patientName,\n      label: val.patientName,\n    })\n  })\n  return selectPatientList\n}\n\n// PATIENT DETAILS\nexport const INITIAL_STATE_PATIENT = {\n  patientName: '',\n  ssn: '',\n  addressPatient: '',\n  city: 'Jacksonville',\n  state: 'FL',\n  zip: '',\n  phoneNumber: '',\n  dob: null,\n  accidentDate: null,\n  gender: '',\n  insuranceHolder: '',\n  phoneNumberHolder: '',\n  zipHolder: '',\n  cityHolder: 'Jacksonville',\n  stateHolder: 'FL',\n  addressHolder: '',\n  isSameHolder: true,\n  policyNumber: '',\n  diagnoses: [],\n  services: [],\n  relastionship: '',\n  isEmployment: false,\n  isAutoAccident: true,\n  isOtherAccident: false,\n  insurance: '',\n  stateAccident: 'FL',\n}\n\nexport const REPEAT_TEXT_INPUTS = [\n  'patientName',\n  'patientAddress',\n  'patientCity',\n  'patientZip',\n  'patientPhone',\n]\n\nexport const GENDER_LIST = [\n  { value: 'Male', label: 'Male' },\n  { value: 'Female', label: 'Female' },\n]\n\nexport const INSURANCE_LIST = [\n  { value: 'STATEFARM', label: 'STATEFARM' },\n  { value: 'GEICO', label: 'GEICO' },\n]\n\nexport const RELATIONSHIP_LIST = [\n  { value: 'Selа', label: 'Selа' },\n  { value: 'Spouse', label: 'Spouse' },\n  { value: 'Child', label: 'Child' },\n  { value: 'Other', label: 'Other' },\n]\n\nexport const COUT_DAYS = [\n  { value: 1, label: '1' },\n  { value: 2, label: '2' },\n  { value: 3, label: '3' },\n  { value: 4, label: '4' },\n  { value: 5, label: '5' },\n  { value: 6, label: '6' },\n  { value: 7, label: '7' },\n  { value: 8, label: '8' },\n  { value: 9, label: '9' },\n  { value: 10, label: '10' },\n  { value: 11, label: '11' },\n  { value: 12, label: '12' },\n  { value: 13, label: '13' },\n  { value: 14, label: '14' },\n  { value: 15, label: '15' },\n  { value: 16, label: '16' },\n  { value: 17, label: '17' },\n  { value: 18, label: '18' },\n  { value: 19, label: '19' },\n  { value: 20, label: '20' },\n  { value: 21, label: '21' },\n  { value: 22, label: '22' },\n  { value: 23, label: '23' },\n  { value: 24, label: '24' },\n  { value: 25, label: '25' },\n]\n\nexport const USA_STATES = [\n  {\n    value: 'Alabama',\n    label: 'AL',\n  },\n  {\n    value: 'Alaska',\n    label: 'AK',\n  },\n  {\n    value: 'American Samoa',\n    label: 'AS',\n  },\n  {\n    value: 'Arizona',\n    label: 'AZ',\n  },\n  {\n    value: 'Arkansas',\n    label: 'AR',\n  },\n  {\n    value: 'California',\n    label: 'CA',\n  },\n  {\n    value: 'Colorado',\n    label: 'CO',\n  },\n  {\n    value: 'Connecticut',\n    label: 'CT',\n  },\n  {\n    value: 'Delaware',\n    label: 'DE',\n  },\n  {\n    value: 'District Of Columbia',\n    label: 'DC',\n  },\n  {\n    value: 'Federated States Of Micronesia',\n    label: 'FM',\n  },\n  {\n    value: 'Florida',\n    label: 'FL',\n  },\n  {\n    value: 'Georgia',\n    label: 'GA',\n  },\n  {\n    value: 'Guam',\n    label: 'GU',\n  },\n  {\n    value: 'Hawaii',\n    label: 'HI',\n  },\n  {\n    value: 'Idaho',\n    label: 'ID',\n  },\n  {\n    value: 'Illinois',\n    label: 'IL',\n  },\n  {\n    value: 'Indiana',\n    label: 'IN',\n  },\n  {\n    value: 'Iowa',\n    label: 'IA',\n  },\n  {\n    value: 'Kansas',\n    label: 'KS',\n  },\n  {\n    value: 'Kentucky',\n    label: 'KY',\n  },\n  {\n    value: 'Louisiana',\n    label: 'LA',\n  },\n  {\n    value: 'Maine',\n    label: 'ME',\n  },\n  {\n    value: 'Marshall Islands',\n    label: 'MH',\n  },\n  {\n    value: 'Maryland',\n    label: 'MD',\n  },\n  {\n    value: 'Massachusetts',\n    label: 'MA',\n  },\n  {\n    value: 'Michigan',\n    label: 'MI',\n  },\n  {\n    value: 'Minnesota',\n    label: 'MN',\n  },\n  {\n    value: 'Mississippi',\n    label: 'MS',\n  },\n  {\n    value: 'Missouri',\n    label: 'MO',\n  },\n  {\n    value: 'Montana',\n    label: 'MT',\n  },\n  {\n    value: 'Nebraska',\n    label: 'NE',\n  },\n  {\n    value: 'Nevada',\n    label: 'NV',\n  },\n  {\n    value: 'New Hampshire',\n    label: 'NH',\n  },\n  {\n    value: 'New Jersey',\n    label: 'NJ',\n  },\n  {\n    value: 'New Mexico',\n    label: 'NM',\n  },\n  {\n    value: 'New York',\n    label: 'NY',\n  },\n  {\n    value: 'North Carolina',\n    label: 'NC',\n  },\n  {\n    value: 'North Dakota',\n    label: 'ND',\n  },\n  {\n    value: 'Northern Mariana Islands',\n    label: 'MP',\n  },\n  {\n    value: 'Ohio',\n    label: 'OH',\n  },\n  {\n    value: 'Oklahoma',\n    label: 'OK',\n  },\n  {\n    value: 'Oregon',\n    label: 'OR',\n  },\n  {\n    value: 'Palau',\n    label: 'PW',\n  },\n  {\n    value: 'Pennsylvania',\n    label: 'PA',\n  },\n  {\n    value: 'Puerto Rico',\n    label: 'PR',\n  },\n  {\n    value: 'Rhode Island',\n    label: 'RI',\n  },\n  {\n    value: 'South Carolina',\n    label: 'SC',\n  },\n  {\n    value: 'South Dakota',\n    label: 'SD',\n  },\n  {\n    value: 'Tennessee',\n    label: 'TN',\n  },\n  {\n    value: 'Texas',\n    label: 'TX',\n  },\n  {\n    value: 'Utah',\n    label: 'UT',\n  },\n  {\n    value: 'Vermont',\n    label: 'VT',\n  },\n  {\n    value: 'Virgin Islands',\n    label: 'VI',\n  },\n  {\n    value: 'Virginia',\n    label: 'VA',\n  },\n  {\n    value: 'Washington',\n    label: 'WA',\n  },\n  {\n    value: 'West Virginia',\n    label: 'WV',\n  },\n  {\n    value: 'Wisconsin',\n    label: 'WI',\n  },\n  {\n    value: 'Wyoming',\n    label: 'WY',\n  },\n]\n","import React, { Component } from 'react'\nimport { Nav, NavItem, NavLink } from 'reactstrap'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nexport { FIRST_NAV_TAB, SECOND_NAV_TAB } from '../../constants/mainForm'\n\nconst FIRST_NAV_TAB = '1' // DO EXPORT\nconst SECOND_NAV_TAB = '2' // DO EXPORT\n\nclass NavBar extends Component {\n  static propTypes = {\n    toggle: PropTypes.func.isRequired,\n    tabPosition: PropTypes.string.isRequired,\n  }\n\n  render() {\n    const { toggle, tabPosition } = this.props\n    return (\n      <Nav tabs>\n        <NavItem>\n          <NavLink\n            className={classnames({\n              active: tabPosition === FIRST_NAV_TAB,\n            })}\n            onClick={() => toggle(FIRST_NAV_TAB)}\n          >\n            Doctor's Appointment\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({\n              active: tabPosition === SECOND_NAV_TAB,\n            })}\n            onClick={() => toggle(SECOND_NAV_TAB)}\n          >\n            Patient Details\n          </NavLink>\n        </NavItem>\n      </Nav>\n    )\n  }\n}\n\nexport { NavBar }\n","export const INITIAL_STATE = {\n  patients: {},\n}\nexport const PATIENTS_TABLE = 'patients'\nexport const ERROR_LABEL = 'Error message'\nexport const ERROR_FILL = 'Please, fill in all fields!'\nexport const SUCCES_ADD_PATIENT = 'You add new patient'\nexport const ERROR_EXIST = 'A patient with that name exists'\nexport const SUCCES_LABEL = 'Success'\nexport const SUCCES_GENERATION = 'Generation'\nexport const TIMEOUT_MESSAGE = 3000\n","import React, { useState } from 'react'\nimport T from 'prop-types'\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Col,\n  Row,\n  CustomInput,\n} from 'reactstrap'\nimport Select from 'react-select'\n\nimport {\n  GENDER_LIST,\n  USA_STATES,\n  RELATIONSHIP_LIST,\n  INSURANCE_LIST,\n  REPEAT_TEXT_INPUTS,\n} from '@/constants/mainForm'\nimport { ERROR_FILL, SUCCES_ADD_PATIENT, ERROR_EXIST } from '@/constants/app'\n\nimport './PatientDetails.scss'\n\nconst PatientDetails = props => {\n  const [textInputs, setTextInputs] = useState({\n    patientName: '',\n    ssn: '',\n    patientAddress: '',\n    patientCity: 'Jacksonville',\n    patientZip: '',\n    patientPhone: '',\n    dobPatient: null,\n    accidentDate: null,\n    stateAccident: 'FL',\n    holderName: '',\n    policyNumber: '',\n    holderAddress: '',\n    holderCity: 'Jacksonville',\n    holderZip: '',\n    holderPhone: '',\n  })\n  const [patientState, setPatientState] = useState('FL')\n  const [holderState, setHolderState] = useState('FL')\n  const [insuranceName, setInsuranceName] = useState('')\n  const [gender, setGender] = useState('')\n  const [relastionship, setRelastionship] = useState('')\n  const [isSameHolder, setSameHolder] = useState(true)\n  const [isEmployment, setEmployment] = useState(false)\n  const [isAutoAccident, setAutoAccident] = useState(true)\n  const [isOtherAccident, setOtherAccident] = useState(false)\n\n  const {\n    addPatient,\n    showMesseageSuccess,\n    showMesseageFill,\n    checkPatientName,\n  } = props\n\n  const handleTextInputChange = event => {\n    event.persist()\n    setTextInputs(textInputs => ({\n      ...textInputs,\n      [event.target.name]: event.target.value,\n    }))\n\n    if (isSameHolder && REPEAT_TEXT_INPUTS.includes(event.target.name)) {\n      switch (event.target.name) {\n        case 'patientName':\n          setTextInputs(textInputs => ({\n            ...textInputs,\n            holderName: event.target.value,\n          }))\n          break\n\n        case 'patientAddress':\n          setTextInputs(textInputs => ({\n            ...textInputs,\n            holderAddress: event.target.value,\n          }))\n          break\n\n        case 'patientCity':\n          setTextInputs(textInputs => ({\n            ...textInputs,\n            holderCity: event.target.value,\n          }))\n          break\n\n        case 'patientZip':\n          setTextInputs(textInputs => ({\n            ...textInputs,\n            holderZip: event.target.value,\n          }))\n          break\n\n        case 'patientPhone':\n          setTextInputs(textInputs => ({\n            ...textInputs,\n            holderPhone: event.target.value,\n          }))\n          break\n\n        default:\n          break\n      }\n    }\n  }\n\n  const checkValid = () => {\n    return (\n      patientState && holderState && insuranceName && gender && relastionship\n    )\n  }\n\n  const onSubmitForm = event => {\n    event.preventDefault()\n    if (checkValid()) {\n      if (!checkPatientName(textInputs.patientName)) {\n        const newPatient = {\n          ...textInputs,\n          patientState: patientState,\n          holderState: holderState,\n          insuranceName: insuranceName,\n          gender: gender,\n          relastionship: relastionship,\n          isSameHolder: isSameHolder,\n          isEmployment: isEmployment,\n          isAutoAccident: isAutoAccident,\n          isOtherAccident: isOtherAccident,\n        }\n        addPatient(newPatient)\n        showMesseageSuccess(SUCCES_ADD_PATIENT)\n      } else {\n        showMesseageFill(ERROR_EXIST)\n      }\n    } else {\n      showMesseageFill(ERROR_FILL)\n    }\n  }\n\n  return (\n    <Form onSubmit={onSubmitForm}>\n      <Row className=\"input-label\" form>\n        <Col md={6}>\n          <FormGroup>\n            <Label>Full name patient:</Label>\n            <Input\n              name=\"patientName\"\n              placeholder=\"full name patient...\"\n              onChange={handleTextInputChange}\n              required\n            />\n          </FormGroup>\n        </Col>\n        <Col md={4}>\n          <FormGroup>\n            <Label>Social Security Number (SSN):</Label>\n            <Input\n              name=\"ssn\"\n              placeholder=\"ssn...\"\n              onChange={handleTextInputChange}\n              required\n            />\n          </FormGroup>\n        </Col>\n        <Col md={2}>\n          <FormGroup>\n            <Label>Insurance name:</Label>\n            <Select\n              name=\"insuranceName\"\n              placeholder=\"...\"\n              options={INSURANCE_LIST}\n              onChange={e => setInsuranceName(e.value)}\n            />\n          </FormGroup>\n        </Col>\n      </Row>\n      <FormGroup>\n        <Label>Address patient:</Label>\n        <Input\n          name=\"patientAddress\"\n          placeholder=\"address patient...\"\n          onChange={handleTextInputChange}\n          required\n        />\n      </FormGroup>\n      <Row form>\n        <Col md={6}>\n          <FormGroup>\n            <Label>City:</Label>\n            <Input\n              name=\"patientCity\"\n              placeholder=\"city patient...\"\n              onChange={handleTextInputChange}\n              defaultValue=\"Jacksonville\"\n              required\n            />\n          </FormGroup>\n        </Col>\n        <Col md={4}>\n          <FormGroup>\n            <Label>State:</Label>\n            <Select\n              placeholder=\"state patient...\"\n              options={USA_STATES}\n              onChange={e => setPatientState(e.label)}\n              defaultValue={{\n                value: 'Florida',\n                label: 'FL',\n              }}\n            />\n          </FormGroup>\n        </Col>\n        <Col md={2}>\n          <FormGroup>\n            <Label>Zip:</Label>\n            <Input\n              name=\"patientZip\"\n              placeholder=\"zip patient...\"\n              onChange={handleTextInputChange}\n              required\n            />\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row form>\n        <Col md={6}>\n          <FormGroup>\n            <Label>Phone number:</Label>\n            <Input\n              name=\"patientPhone\"\n              placeholder=\"phone number...\"\n              onChange={handleTextInputChange}\n              required\n            />\n          </FormGroup>\n        </Col>\n        <Col md={4}>\n          <FormGroup>\n            <Label>Date of Birth:</Label>\n            <Input\n              name=\"dobPatient\"\n              type=\"date\"\n              placeholder=\"date of birth...\"\n              onChange={handleTextInputChange}\n              required\n            />\n          </FormGroup>\n        </Col>\n        <Col md={2}>\n          <FormGroup>\n            <Label>Gender:</Label>\n            <Select\n              placeholder=\"gender...\"\n              options={GENDER_LIST}\n              onChange={e => setGender(e.label)}\n            />\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row className=\"line\" form>\n        <Col md={6}>\n          <FormGroup>\n            <Label>Full name insurance holder:</Label>\n            <Input\n              name=\"holderName\"\n              placeholder=\"full name insurance holder...\"\n              value={textInputs.holderName}\n              disabled={isSameHolder}\n              onChange={handleTextInputChange}\n              required\n            />\n            <Label check className=\"check-box\">\n              <Input\n                type=\"checkbox\"\n                checked={isSameHolder}\n                onChange={() => setSameHolder(!isSameHolder)}\n              />{' '}\n              the name of the insurer matches the name of the patient\n            </Label>\n          </FormGroup>\n        </Col>\n        <Col md={6}>\n          <FormGroup>\n            <Label>Palicy Number:</Label>\n            <Input\n              name=\"policyNumber\"\n              placeholder=\"palicy number...\"\n              onChange={handleTextInputChange}\n            />\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col md={6}>\n          <FormGroup>\n            <Label>Address:</Label>\n            <Input\n              name=\"holderAddress\"\n              placeholder=\"address holder...\"\n              value={textInputs.holderAddress}\n              disabled={isSameHolder}\n              onChange={handleTextInputChange}\n              required\n            />\n          </FormGroup>\n        </Col>\n        <Col md={6}>\n          <FormGroup>\n            <Label>Phone number:</Label>\n            <Input\n              name=\"holderPhone\"\n              placeholder=\"phone number...\"\n              value={textInputs.holderPhone}\n              disabled={isSameHolder}\n              onChange={handleTextInputChange}\n              required\n            />\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row form>\n        <Col md={6}>\n          <FormGroup>\n            <Label>City:</Label>\n            <Input\n              name=\"holderCity\"\n              placeholder=\"city holder...\"\n              value={textInputs.holderCity}\n              disabled={isSameHolder}\n              onChange={handleTextInputChange}\n              required\n            />\n          </FormGroup>\n        </Col>\n        <Col md={4}>\n          <FormGroup>\n            <Label>State:</Label>\n            <Select\n              placeholder=\"state holder...\"\n              options={USA_STATES}\n              onChange={e => setHolderState(e.label)}\n              isDisabled={isSameHolder}\n              defaultValue={{\n                value: 'Florida',\n                label: 'FL',\n              }}\n            />\n          </FormGroup>\n        </Col>\n        <Col md={2}>\n          <FormGroup>\n            <Label>Zip:</Label>\n            <Input\n              name=\"holderZip\"\n              placeholder=\"zip holder...\"\n              value={textInputs.holderZip}\n              disabled={isSameHolder}\n              onChange={handleTextInputChange}\n              required\n            />\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row className=\"line\" form>\n        <Col md={6}>\n          <FormGroup>\n            <Label>Patient to relationship to insured:</Label>\n            <Select\n              placeholder=\"...\"\n              options={RELATIONSHIP_LIST}\n              onChange={e => setRelastionship(e.value)}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label>Accident date:</Label>\n            <Input\n              name=\"accidentDate\"\n              type=\"date\"\n              placeholder=\"accident date...\"\n              onChange={handleTextInputChange}\n              required\n            />\n          </FormGroup>\n        </Col>\n        <Col md={6}>\n          <FormGroup>\n            <Label for=\"exampleCheckbox\">\n              Is patients condition related to:\n            </Label>\n            <div>\n              <CustomInput\n                type=\"switch\"\n                id=\"employment\"\n                label=\"EMPLOYMENT? (Courrent or Previous)\"\n                onChange={() => setEmployment(!isEmployment)}\n                checked={isEmployment}\n              />\n              <Row>\n                <Col md={3}>\n                  <CustomInput\n                    type=\"switch\"\n                    id=\"auto\"\n                    label=\"AUTO ACCIDENT?\"\n                    onChange={() => setAutoAccident(!isAutoAccident)}\n                    checked={isAutoAccident}\n                  />\n                </Col>\n                <Col className=\"inputState\" md={2}>\n                  State:\n                  <Input\n                    name=\"stateAccident\"\n                    bsSize=\"sm\"\n                    defaultValue=\"FL\"\n                    required\n                    onChange={handleTextInputChange}\n                  />\n                </Col>\n              </Row>\n              <CustomInput\n                type=\"switch\"\n                id=\"other\"\n                label=\"OTHER ACCIDENT?\"\n                checked={isOtherAccident}\n                onChange={() => setOtherAccident(!isOtherAccident)}\n              />\n            </div>\n          </FormGroup>\n        </Col>\n      </Row>\n      <Button color=\"secondary\" size=\"lg\">\n        Add\n      </Button>\n    </Form>\n  )\n}\n\nT.PropTypes = {\n  addPatient: T.func.isRequired,\n  showMesseageSuccess: T.func.isRequired,\n  showMesseageFill: T.func.isRequired,\n  checkPatientName: T.func.isRequired,\n}\n\nexport { PatientDetails }\n","import docxtemplater from 'docxtemplater'\nimport JSZipUtils from 'jszip-utils'\nimport { saveAs } from 'file-saver'\nimport JSZip from 'jszip'\nimport DocxMerger from 'docx-merger'\nimport moment from 'moment'\nimport {\n  DATE_FORMAT,\n  CODE_97110,\n  CODE_97530,\n  CODE_97140,\n  CODE_98940,\n  CODE_98941,\n  CODE_98942,\n  CODE_99202,\n  CODE_99203,\n  CODE_99212,\n  CODE_99213,\n} from '../constants/api'\n\nconst newLineMapping = {\n  0: 0,\n  1: 2,\n  2: 4,\n  3: 6,\n  4: 8,\n  5: 10,\n}\n\nconst loadFile = (url, callback) => {\n  JSZipUtils.getBinaryContent(url, callback)\n}\n\nconst renderData = (content, data) => {\n  let zip = new JSZip(content)\n  let doc = new docxtemplater().loadZip(zip)\n\n  doc.setOptions({\n    nullGetter: () => {\n      return ''\n    },\n  })\n\n  doc.setData(data)\n\n  try {\n    doc.render()\n  } catch (error) {\n    const e = {\n      message: error.message,\n      name: error.name,\n      stack: error.stack,\n      properties: error.properties,\n    }\n    console.log(JSON.stringify({ error: e })) // TODO: DELETE\n    throw error\n  }\n\n  return doc.getZip().generate({ type: 'arraybuffer' })\n}\n\nconst generateEmptyLine = countLines => {\n  const result = []\n  let countLine = 6 - countLines\n  for (let j = 0; j < newLineMapping[countLine]; j++) {\n    result.push({})\n  }\n  return result\n}\n\nconst calculateSum = services => {\n  let sum = 0\n  services.forEach(element => {\n    sum += element.price\n  })\n  return sum\n}\n\nconst getRemainDiagnoses = diagnoses => {\n  const remain = diagnoses.slice(12, diagnoses.length)\n  const result = []\n  remain.forEach(element => {\n    result.push(element.label)\n  })\n  return result.join()\n}\n\nconst getDiagnosesList = diagnoses => {\n  const result = {}\n  diagnoses.slice(0, 12).forEach((element, indexElement) => {\n    result[`dai_${indexElement}`] = element.value\n  })\n  return result\n}\n\nconst getDoctorFormat = doctor => {\n  return {\n    [`dN_`]: doctor.name,\n    [`npi_`]: doctor.npi,\n    [`sig_`]: doctor.signature,\n  }\n}\n\nconst getServicesTemplate = services => {\n  const result = [...services]\n  result.forEach((element, number) => {\n    if (\n      element.label === CODE_97110 &&\n      result.find(elem => elem.label === CODE_97530) !== undefined\n    ) {\n      element.pfx = '59'\n    } else if (\n      element.label === CODE_97140 &&\n      result.find(\n        elem =>\n          elem.label === CODE_98940 ||\n          elem.label === CODE_98941 ||\n          elem.label === CODE_98942\n      ) !== undefined\n    ) {\n      element.pfx = '59'\n    } else if (\n      (element.label === CODE_99202 ||\n        element.label === CODE_99203 ||\n        element.label === CODE_99212 ||\n        element.label === CODE_99213) &&\n      result.length > 1\n    ) {\n      element.pfx = '25'\n    }\n  })\n\n  return result\n}\n\nconst getOfficeFormat = office => {\n  const indexSub = office.search(/JACKSONVILLE/i)\n  return {\n    of_1: office.substr(0, indexSub),\n    of_2: office.substr(indexSub + 1),\n  }\n}\n\nexport const generateFile = (pages, patient) => {\n  const listPages = pages\n  const result = []\n\n  loadFile(process.env.REACT_APP_URL_DOCX, (error, content) => {\n    if (error) {\n      throw error\n    }\n\n    listPages.forEach(page => {\n      let servicesMain = page.services.filter((element, index) => index <= 5)\n      let insertData = {\n        ...patient,\n        dobPatient: moment(patient.dobPatient).format('MMDDYYYY'),\n        accidentDate: moment(patient.dateReceipt).format('MM DD YYYY'),\n        services: getServicesTemplate(servicesMain),\n        remain: getRemainDiagnoses(page.diagnoses),\n        ...getDiagnosesList(page.diagnoses),\n        ...getDoctorFormat(page.doctor),\n        sum_: calculateSum(servicesMain),\n        dv: moment(page.dateReceipt).format('MMDDYYYY'),\n        ...getOfficeFormat(page.officeAddress),\n      }\n\n      if (page.services.length <= 6) {\n        insertData['nl'] = generateEmptyLine(page.services.length)\n      }\n\n      result.push(renderData(content, insertData))\n\n      if (page.services.length > 6) {\n        const servicesRemain = page.services.filter(\n          (element, index) => index > 5\n        )\n        insertData['nl'] = generateEmptyLine(servicesRemain.length)\n        insertData['services'] = servicesRemain\n        insertData['sum_'] = calculateSum(servicesRemain)\n        result.push(renderData(content, insertData))\n      }\n    })\n\n    var docx = new DocxMerger({}, result)\n    const dateTimeCreate = moment(Date.now()).format(DATE_FORMAT)\n    const outputName = `report_${dateTimeCreate}.docx`\n    docx.save('blob', function(data) {\n      saveAs(data, outputName)\n    })\n  })\n}\n","export const URL_TEMPLATE = '/tag-example.docx'\nexport const MINE_TYPE =\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\nexport const DATE_FORMAT = 'YYYY_MM_DD_HH_mm_ss'\nexport const TYPE_OUTPUT = 'blob'\nexport const CODE_97110 = '97110'\nexport const CODE_97530 = '97530'\nexport const CODE_97140 = '97140'\nexport const CODE_98940 = '98940'\nexport const CODE_98941 = '98941'\nexport const CODE_98942 = '98942'\nexport const CODE_99202 = '99202'\nexport const CODE_99203 = '99203'\nexport const CODE_99212 = '99212'\nexport const CODE_99213 = '99213'\n","import React, { useState } from 'react'\nimport { Button, Form, FormGroup, Label, Input, Col, Row } from 'reactstrap'\nimport T from 'prop-types'\nimport Select from 'react-select'\n//import { MultiValueLabel } from '@/components/MultiValueLabel'\n\nimport {\n  COUT_DAYS,\n  MIN_DAY,\n  getPatientByName,\n  getPatientIdByValue,\n  getSelectedPatients,\n  SERVICES_FIELD,\n  DIAGNOSES_FIELD,\n} from '@/constants/mainForm'\nimport { SUCCES_GENERATION } from '@/constants/app'\nimport { generateFile } from '@/api'\n\nimport './DoctorsAppointment.scss'\n\nconst DoctorsAppointment = props => {\n  const [idPatient, setIdPatient] = useState('')\n  const [maxDay, setMaxDay] = useState(MIN_DAY)\n  const [currentDay, setCurrentDay] = useState(MIN_DAY)\n  const [pages, setPages] = useState([])\n  const [doctor, setDoctor] = useState('')\n  const [officeAddress, setOfficeAddress] = useState('')\n  const [dateReceipt, setDateReceipt] = useState(null)\n\n  const doctorList = window.doctorList\n  const servicesList = window.servicesList\n  const officeAddressList = window.officeAddressList\n  const diagnosesList = window.diagnosesList\n  const { patients, updatePatient, showMesseageSuccess } = props\n\n  const selectPatientList = getSelectedPatients(patients)\n\n  const handleChangePatient = e => {\n    const patient = getPatientByName(patients, e.value)\n    const patientId = getPatientIdByValue(patients, patient)\n    setIdPatient(patientId)\n  }\n\n  const handleServicesChange = e => {\n    updatePatient(idPatient, e, SERVICES_FIELD)\n  }\n\n  const handleDiagnosesChange = e => {\n    updatePatient(idPatient, e, DIAGNOSES_FIELD)\n  }\n\n  const onSubmitForm = e => {\n    e.preventDefault()\n    const newPage = {\n      services: patients[idPatient].services,\n      diagnoses: patients[idPatient].diagnoses,\n      doctor: doctor,\n      officeAddress: officeAddress,\n      dateReceipt: dateReceipt,\n    }\n\n    pages.push(newPage)\n    setCurrentDay(currentDay + 1)\n\n    if (currentDay === maxDay) {\n      generateFile(pages, patients[idPatient])\n      setCurrentDay(MIN_DAY)\n      setPages([])\n      showMesseageSuccess(SUCCES_GENERATION)\n    }\n  }\n\n  return (\n    <Form onSubmit={onSubmitForm}>\n      <Row form className=\"input-label\">\n        <Col>\n          <h4>Input info for {currentDay} day:</h4>\n        </Col>\n        <Col>\n          <Label>Number of pages in report file:</Label>\n          <Select\n            options={COUT_DAYS}\n            onChange={e => setMaxDay(e.value)}\n            placeholder=\"choose count days...\"\n            defaultValue={{\n              value: 1,\n              label: '1',\n            }}\n            isDisabled={currentDay !== MIN_DAY}\n          />\n        </Col>\n      </Row>\n      <Row form>\n        <Col md={6}>\n          <FormGroup>\n            <Label>Patient:</Label>\n            <Select\n              options={selectPatientList}\n              onChange={handleChangePatient}\n              isDisabled={currentDay !== MIN_DAY}\n            />\n          </FormGroup>\n        </Col>\n        <Col md={6}>\n          <FormGroup>\n            <Label>Date of Receipt:</Label>\n            <Input\n              type=\"date\"\n              placeholder=\"date of receipt...\"\n              onChange={e => setDateReceipt(e.target.value)}\n              required\n            />\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row form>\n        <Col md={6}>\n          <FormGroup>\n            <Label>Office address:</Label>\n            <Select\n              options={officeAddressList}\n              onChange={e => setOfficeAddress(e.value)}\n            />\n          </FormGroup>\n        </Col>\n        <Col md={6}>\n          <FormGroup>\n            <Label>Doctor:</Label>\n            <Select options={doctorList} onChange={e => setDoctor(e.value)} />\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row form>\n        <Col md={6}>\n          <FormGroup>\n            <Label>Diagnoses:</Label>\n            <Select\n              isMulti\n              options={diagnosesList}\n              className=\"basic-multi-select\"\n              classNamePrefix=\"select\"\n              closeMenuOnSelect={false}\n              hideSelectedOptions={true}\n              onChange={handleDiagnosesChange}\n              isDisabled={!idPatient}\n              value={idPatient && patients[idPatient].diagnoses}\n            />\n          </FormGroup>\n        </Col>\n        <Col md={6}>\n          <FormGroup>\n            <Label>Selection of services rendered:</Label>\n            <Select\n              isMulti\n              options={servicesList}\n              className=\"basic-multi-select\"\n              classNamePrefix=\"select\"\n              closeMenuOnSelect={false}\n              hideSelectedOptions={true}\n              onChange={handleServicesChange}\n              isDisabled={!idPatient}\n              value={idPatient && patients[idPatient].services}\n              //components={{ MultiValueLabel }}\n              backspaceRemovesValue={false}\n            />\n          </FormGroup>\n        </Col>\n      </Row>\n      <Button color=\"secondary\" size=\"lg\">\n        Submit\n      </Button>\n    </Form>\n  )\n}\n\nT.PropTypes = {\n  showMesseageSuccess: T.func.isRequired,\n  updatePatient: T.func.isRequired,\n  patients: T.Object,\n}\n\nexport { DoctorsAppointment }\n","import React, { useState } from 'react'\nimport { TabContent, TabPane, Row, Col } from 'reactstrap'\nimport T from 'prop-types'\n\nimport { NavBar } from '../NavBar'\nimport { PatientDetails } from '../PatientDetails'\nimport { DoctorsAppointment } from '../DoctorsAppointment'\n\nimport { FIRST_NAV_TAB } from '@/constants/mainForm'\n\nimport './MainForm.scss'\n\nconst MainForm = props => {\n  const [activeTab, handleToggle] = useState(FIRST_NAV_TAB)\n\n  const {\n    addPatient,\n    showMesseageSuccess,\n    showMesseageFill,\n    checkPatientName,\n    updatePatient,\n    patients,\n  } = props\n\n  return (\n    <div className=\"main-form\">\n      <h2>Medrepot-generator</h2>\n      <NavBar toggle={handleToggle} tabPosition={activeTab} />\n      <TabContent activeTab={activeTab}>\n        <TabPane tabId=\"1\">\n          <Row>\n            <Col sm=\"12\">\n              <DoctorsAppointment\n                patients={patients}\n                updatePatient={updatePatient}\n                showMesseageSuccess={showMesseageSuccess}\n              />\n            </Col>\n          </Row>\n        </TabPane>\n        <TabPane tabId=\"2\">\n          <Row>\n            <Col sm=\"12\">\n              <PatientDetails\n                addPatient={addPatient}\n                showMesseageSuccess={showMesseageSuccess}\n                showMesseageFill={showMesseageFill}\n                checkPatientName={checkPatientName}\n              />\n            </Col>\n          </Row>\n        </TabPane>\n      </TabContent>\n    </div>\n  )\n}\n\nT.PropTypes = {\n  addPatient: T.func.isRequired,\n  showMesseageSuccess: T.func.isRequired,\n  showMesseageFill: T.func.isRequired,\n  updatePatient: T.func.isRequired,\n  checkPatientName: T.func.isRequired,\n  patients: T.Object,\n}\n\nexport { MainForm }\n","import Rebase from 're-base'\nimport firebase from 'firebase'\n\nconst config = {\n  apiKey: process.env.REACT_APP_FIREBASE_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n}\n\nconst app = firebase.initializeApp(config)\nconst base = Rebase.createClass(app.database())\n\nexport { base }\n","import React, { Component } from 'react'\nimport { Container } from 'reactstrap'\nimport { NotificationContainer, NotificationManager } from 'react-notifications'\n\nimport { MainForm } from '@/components/MainForm'\n\nimport { base } from '@/db/base'\nimport {\n  INITIAL_STATE,\n  PATIENTS_TABLE,\n  ERROR_LABEL,\n  SUCCES_LABEL,\n  TIMEOUT_MESSAGE,\n} from '@/constants/app'\nimport { SERVICES_FIELD } from '../../constants/mainForm'\n\nimport './App.scss'\nimport 'react-notifications/lib/notifications.css'\n\nclass App extends Component {\n  state = INITIAL_STATE\n\n  componentDidMount() {\n    try {\n      this.patientsRef = base.syncState(PATIENTS_TABLE, {\n        context: this,\n        state: PATIENTS_TABLE,\n      })\n    } catch (error) {\n      throw error\n    }\n  }\n\n  addPatient = patientData => {\n    const id = Date.now()\n    this.setState(prevState => ({\n      patients: {\n        ...prevState.patients,\n        [id]: patientData,\n        diagnoses: [],\n        services: [],\n      },\n    }))\n  }\n\n  showMesseageSuccess = message => {\n    NotificationManager.success(message, SUCCES_LABEL, TIMEOUT_MESSAGE)\n  }\n\n  showMesseageFill = message => {\n    NotificationManager.error(message, ERROR_LABEL, TIMEOUT_MESSAGE)\n  }\n\n  updatePatient = (id, data, field) => {\n    const { patients } = this.state\n    const patientsList = { ...patients }\n    const selectedPatient = patientsList[id]\n    if (field === SERVICES_FIELD) {\n      selectedPatient.services = data\n    } else {\n      selectedPatient.diagnoses = data\n    }\n    patientsList[id] = selectedPatient\n    this.setState({ patients: patientsList })\n  }\n\n  checkPatientName = name => {\n    const list = Object.values(this.state.patients)\n    return list.find(patient => patient.patientName === name)\n  }\n\n  render() {\n    const { patients } = this.state\n    return (\n      <Container className=\"app\">\n        <MainForm\n          addPatient={this.addPatient}\n          showMesseageSuccess={this.showMesseageSuccess}\n          showMesseageFill={this.showMesseageFill}\n          patients={patients}\n          updatePatient={this.updatePatient}\n          checkPatientName={this.checkPatientName}\n        />\n        <NotificationContainer />\n      </Container>\n    )\n  }\n}\n\nexport { App }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport { App } from './containers/App/App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}