{"version":3,"sources":["db/base.js","constants/mainForm.js","components/PatientDetails/PatientDetails.js","api/index.js","constants/api.js","components/DoctorsAppointment/DoctorsAppointment.js","components/NavBar/NavBar.js","components/MainForm/MainForm.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["app","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","base","Rebase","createClass","database","FIRST_NAV_TAB","INITIAL_STATE_DOCTORS_APPOINTMENT","patientName","officeAddress","doctorName","doctorValue","isPatientSelected","dateReceipt","INITIAL_STATE_PATIENT","ssn","addressPatient","city","state","zip","phoneNumber","dob","accidentDate","gender","insuranceHolder","isSameHolder","policyNumber","diagnoses","services","relastionship","isEmployment","isAutoAccident","isOtherAccident","stateAccident","GENDER_LIST","value","label","RELATIONSHIP_LIST","USA_STATES","PatientDetails","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSSNChange","bind","assertThisInitialized","onPatientNameChange","onInsuranceHolderChange","onPolicyNumberChange","onDobChange","onSameHolderChange","onAddressPatientChange","onStateChange","onGenderChange","onZipChange","onCityChange","onPhoneNumberChange","checkValidForm","onEmploymentChange","onAutoAccidentChange","onOtherAccidentChange","onStateAccidentChange","onRelastionshipChange","onAccidentDateChange","onSubmit","event","setState","target","moment","format","_this$state","preventDefault","patient","addPatien","NotificationManager","success","error","_this$state2","react_default","a","createElement","Form","Row","form","Col","md","FormGroup","Label","Input","placeholder","onChange","required","react_select_browser_esm","options","type","disabled","check","className","for","CustomInput","id","name","checked","bsSize","Button","color","size","lib","Component","generateFile","data","url","callback","REACT_APP_URL_DOCX","content","propsData","diagnosesList","diagnosesRemainList","temporaryDate","doctorsList","paySum","temporarySum","allDiagnoses","forEach","list","indexList","slice","element","indexElement","concat","push","length","join","allDoctors","index","_doctorsList$push","defineProperty","npi","signature","allServices","number","replace","parseInt","undefined","find","elem","PizZip","doc","docxtemplater","loadZip","setOptions","nullGetter","setData","objectSpread","allDates","firstServices","secondServices","thirdServices","fourthServices","fifthServices","sixthServices","seventhServices","firstRemain","secondRemain","thirdRemain","fourthRemain","fifthRemain","sixthRemains","seventhRemain","render","e","message","stack","properties","console","log","JSON","stringify","output","getZip","generate","mimeType","dateTimeCreate","Date","now","outputName","saveAs","JSZipUtils","getBinaryContent","DoctorsAppointment","onDataReceiptbChange","onOfficeAddress","onPatientChange","onDoctorChange","onServicesChange","onDiagnosesChange","checkValid","setPatientInfo","getPatientByName","patientId","getPatientIdByValue","setSelectedPatientId","_this$props","patientsList","selectedPatientId","servicesList","Array","isArray","_this$props2","day","allOffices","setAllData","date","doctor","office","genData","toConsumableArray","doctorList","window","officeAddressList","_this$props3","selectPatientList","entries","map","_ref","_ref2","slicedToArray","val","isDisabled","isMulti","classNamePrefix","closeMenuOnSelect","hideSelectedOptions","NavBar","toggle","tabPosition","Nav","tabs","NavItem","NavLink","classnames","active","onClick","MainForm","activeTab","tab","patients","components_NavBar_NavBar","TabContent","TabPane","tabId","sm","components_DoctorsAppointment_DoctorsAppointment","components_PatientDetails_PatientDetails","App","addPatient","field","selectedPatient","values","_i","_Object$entries","_ref3","key","patientsRef","syncState","context","_this$state3","Container","components_MainForm_MainForm","Boolean","location","hostname","match","ReactDOM","containers_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gUAaMA,SAAMC,EAASC,cAVN,CACbC,OAAQC,0CACRC,WAAYD,gCACZE,YAAaF,uCACbG,UAAWH,gBACXI,cAAeJ,GACfK,kBAAmBL,eACnBM,MAAON,wCAIHO,EAAOC,IAAOC,YAAYb,EAAIc,8GCNvBC,EAAgB,IAUhBC,EAAoC,CAC/CC,YAAa,GACbC,cAAe,GACfC,WAAY,GACZC,YAAa,GACbC,mBAAmB,EACnBC,YAAa,MAIFC,EAAwB,CACnCN,YAAa,GACbO,IAAK,GACLC,eAAgB,GAChBC,KAAM,GACNC,MAAO,GACPC,IAAK,GACLC,YAAa,GACbC,IAAK,KACLC,aAAc,KACdC,OAAQ,GACRC,gBAAiB,GACjBC,cAAc,EACdC,aAAc,GACdC,UAAW,GACXC,SAAU,GACVC,cAAe,GACfC,cAAc,EACdC,gBAAgB,EAChBC,iBAAiB,EACjBC,cAAe,MAGJC,EAAc,CACzB,CAAEC,MAAO,OAAQC,MAAO,QACxB,CAAED,MAAO,SAAUC,MAAO,WAGfC,EAAoB,CAC/B,CAAEF,MAAO,YAAQC,MAAO,aACxB,CAAED,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,QAASC,MAAO,SACzB,CAAED,MAAO,QAASC,MAAO,UAGdE,EAAa,CACxB,CACIH,MAAO,UACPC,MAAO,MAEX,CACID,MAAO,SACPC,MAAO,MAEX,CACID,MAAO,iBACPC,MAAO,MAEX,CACID,MAAO,UACPC,MAAO,MAEX,CACID,MAAO,WACPC,MAAO,MAEX,CACID,MAAO,aACPC,MAAO,MAEX,CACID,MAAO,WACPC,MAAO,MAEX,CACID,MAAO,cACPC,MAAO,MAEX,CACID,MAAO,WACPC,MAAO,MAEX,CACID,MAAO,uBACPC,MAAO,MAEX,CACID,MAAO,iCACPC,MAAO,MAEX,CACID,MAAO,UACPC,MAAO,MAEX,CACID,MAAO,UACPC,MAAO,MAEX,CACID,MAAO,OACPC,MAAO,MAEX,CACID,MAAO,SACPC,MAAO,MAEX,CACID,MAAO,QACPC,MAAO,MAEX,CACID,MAAO,WACPC,MAAO,MAEX,CACID,MAAO,UACPC,MAAO,MAEX,CACID,MAAO,OACPC,MAAO,MAEX,CACID,MAAO,SACPC,MAAO,MAEX,CACID,MAAO,WACPC,MAAO,MAEX,CACID,MAAO,YACPC,MAAO,MAEX,CACID,MAAO,QACPC,MAAO,MAEX,CACID,MAAO,mBACPC,MAAO,MAEX,CACID,MAAO,WACPC,MAAO,MAEX,CACID,MAAO,gBACPC,MAAO,MAEX,CACID,MAAO,WACPC,MAAO,MAEX,CACID,MAAO,YACPC,MAAO,MAEX,CACID,MAAO,cACPC,MAAO,MAEX,CACID,MAAO,WACPC,MAAO,MAEX,CACID,MAAO,UACPC,MAAO,MAEX,CACID,MAAO,WACPC,MAAO,MAEX,CACID,MAAO,SACPC,MAAO,MAEX,CACID,MAAO,gBACPC,MAAO,MAEX,CACID,MAAO,aACPC,MAAO,MAEX,CACID,MAAO,aACPC,MAAO,MAEX,CACID,MAAO,WACPC,MAAO,MAEX,CACID,MAAO,iBACPC,MAAO,MAEX,CACID,MAAO,eACPC,MAAO,MAEX,CACID,MAAO,2BACPC,MAAO,MAEX,CACID,MAAO,OACPC,MAAO,MAEX,CACID,MAAO,WACPC,MAAO,MAEX,CACID,MAAO,SACPC,MAAO,MAEX,CACID,MAAO,QACPC,MAAO,MAEX,CACID,MAAO,eACPC,MAAO,MAEX,CACID,MAAO,cACPC,MAAO,MAEX,CACID,MAAO,eACPC,MAAO,MAEX,CACID,MAAO,iBACPC,MAAO,MAEX,CACID,MAAO,eACPC,MAAO,MAEX,CACID,MAAO,YACPC,MAAO,MAEX,CACID,MAAO,QACPC,MAAO,MAEX,CACID,MAAO,OACPC,MAAO,MAEX,CACID,MAAO,UACPC,MAAO,MAEX,CACID,MAAO,iBACPC,MAAO,MAEX,CACID,MAAO,WACPC,MAAO,MAEX,CACID,MAAO,aACPC,MAAO,MAEX,CACID,MAAO,gBACPC,MAAO,MAEX,CACID,MAAO,YACPC,MAAO,MAEX,CACID,MAAO,UACPC,MAAO,gCCuEEG,4BA5Vb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDtB,MAAQJ,EACb2B,EAAKO,YAAcP,EAAKO,YAAYC,KAAjBP,OAAAQ,EAAA,EAAAR,CAAAD,IACnBA,EAAKU,oBAAsBV,EAAKU,oBAAoBF,KAAzBP,OAAAQ,EAAA,EAAAR,CAAAD,IAC3BA,EAAKW,wBAA0BX,EAAKW,wBAAwBH,KAA7BP,OAAAQ,EAAA,EAAAR,CAAAD,IAC/BA,EAAKY,qBAAuBZ,EAAKY,qBAAqBJ,KAA1BP,OAAAQ,EAAA,EAAAR,CAAAD,IAC5BA,EAAKa,YAAcb,EAAKa,YAAYL,KAAjBP,OAAAQ,EAAA,EAAAR,CAAAD,IACnBA,EAAKc,mBAAqBd,EAAKc,mBAAmBN,KAAxBP,OAAAQ,EAAA,EAAAR,CAAAD,IAC1BA,EAAKe,uBAAyBf,EAAKe,uBAAuBP,KAA5BP,OAAAQ,EAAA,EAAAR,CAAAD,IAC9BA,EAAKgB,cAAgBhB,EAAKgB,cAAcR,KAAnBP,OAAAQ,EAAA,EAAAR,CAAAD,IACrBA,EAAKiB,eAAiBjB,EAAKiB,eAAeT,KAApBP,OAAAQ,EAAA,EAAAR,CAAAD,IACtBA,EAAKkB,YAAclB,EAAKkB,YAAYV,KAAjBP,OAAAQ,EAAA,EAAAR,CAAAD,IACnBA,EAAKmB,aAAenB,EAAKmB,aAAaX,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IACpBA,EAAKoB,oBAAsBpB,EAAKoB,oBAAoBZ,KAAzBP,OAAAQ,EAAA,EAAAR,CAAAD,IAC3BA,EAAKqB,eAAiBrB,EAAKqB,eAAeb,KAApBP,OAAAQ,EAAA,EAAAR,CAAAD,IACtBA,EAAKsB,mBAAqBtB,EAAKsB,mBAAmBd,KAAxBP,OAAAQ,EAAA,EAAAR,CAAAD,IAC1BA,EAAKuB,qBAAuBvB,EAAKuB,qBAAqBf,KAA1BP,OAAAQ,EAAA,EAAAR,CAAAD,IAC5BA,EAAKwB,sBAAwBxB,EAAKwB,sBAAsBhB,KAA3BP,OAAAQ,EAAA,EAAAR,CAAAD,IAC7BA,EAAKyB,sBAAwBzB,EAAKyB,sBAAsBjB,KAA3BP,OAAAQ,EAAA,EAAAR,CAAAD,IAC7BA,EAAK0B,sBAAwB1B,EAAK0B,sBAAsBlB,KAA3BP,OAAAQ,EAAA,EAAAR,CAAAD,IAC7BA,EAAK2B,qBAAuB3B,EAAK2B,qBAAqBnB,KAA1BP,OAAAQ,EAAA,EAAAR,CAAAD,IAC5BA,EAAK4B,SAAW5B,EAAK4B,SAASpB,KAAdP,OAAAQ,EAAA,EAAAR,CAAAD,IAtBCA,2EAyBP6B,GACV1B,KAAK2B,SAAS,CAAExD,IAAKuD,EAAME,OAAOrC,sDAGdmC,GACpB1B,KAAK2B,SAAS,CAAE1C,cAAeyC,EAAMnC,mDAGpBmC,GAAO,IAChBxC,EAAiBc,KAAK1B,MAAtBY,aACRc,KAAK2B,SAAS,CAAEzC,cAAeA,iDAGZwC,GAAO,IAClBvC,EAAmBa,KAAK1B,MAAxBa,eACRa,KAAK2B,SAAS,CAAExC,gBAAiBA,kDAGbuC,GAAO,IACnBtC,EAAoBY,KAAK1B,MAAzBc,gBACRY,KAAK2B,SAAS,CAAEvC,iBAAkBA,kDAGdsC,GACpB1B,KAAK2B,SAAS,CAAEtC,cAAeqC,EAAME,OAAOrC,oDAG1BmC,GAClB1B,KAAK2B,SAAS,CACZ/D,YAAa8D,EAAME,OAAOrC,QAExBS,KAAK1B,MAAMO,cACbmB,KAAK2B,SAAS,CACZ/C,gBAAiB8C,EAAME,OAAOrC,wDAKZmC,GACtB1B,KAAK2B,SAAS,CAAE/C,gBAAiB8C,EAAME,OAAOrC,qDAG3BmC,GACnB1B,KAAK2B,SAAS,CAAE7C,aAAc4C,EAAME,OAAOrC,uDAGtBmC,GACrB1B,KAAK2B,SAAS,CAAEvD,eAAgBsD,EAAME,OAAOrC,4CAGnCmC,GACV1B,KAAK2B,SAAS,CACZlD,IAAKoD,IAAOH,EAAME,OAAOrC,OAAOuC,ODjGX,2DCqGJJ,GACnB1B,KAAK2B,SAAS,CACZjD,aAAcmD,IAAOH,EAAME,OAAOrC,OAAOuC,ODvGpB,mDC2GZJ,GACX1B,KAAK2B,SAAS,CAAEtD,KAAMqD,EAAME,OAAOrC,8CAGvBmC,GACZ1B,KAAK2B,SAAS,CAAErD,MAAOoD,EAAMlC,oDAGXkC,GAClB1B,KAAK2B,SAAS,CAAEnD,YAAakD,EAAME,OAAOrC,+CAG7BmC,GACb1B,KAAK2B,SAAS,CAAEhD,OAAQ+C,EAAMnC,sDAGVmC,GACpB1B,KAAK2B,SAAS,CAAE9D,cAAe6D,EAAMnC,4CAG3BmC,GACV1B,KAAK2B,SAAS,CAAEpD,IAAKmD,EAAME,OAAOrC,qDAGf,IAAAwC,EACmB/B,KAAK1B,MAAnCO,EADWkD,EACXlD,aAAcjB,EADHmE,EACGnE,YACpBiB,EAEGmB,KAAK2B,SAAS,CACjB/C,gBAAiB,KAHDoB,KAAK2B,SAAS,CAC9B/C,gBAAiBhB,IAInBoC,KAAK2B,SAAS,CACZ9C,cAAeA,6CAKjB,OAAOmB,KAAK1B,MAAMK,QAAUqB,KAAK1B,MAAMA,OAChC0B,KAAK1B,MAAMW,+CAGXyC,GAEP,GADAA,EAAMM,iBACFhC,KAAKkB,iBAAkB,CACzB,IAAMe,EAAUjC,KAAK1B,aACd2D,EAAQpD,aACfmB,KAAKJ,MAAMsC,UAAUD,GACrBE,sBAAoBC,QDvJI,sBACF,UAEG,UC0JzBD,sBAAoBE,MD/JC,gBACE,8BAIE,sCCmKpB,IAAAC,EACkEtC,KAAK1B,MAAtEY,EADDoD,EACCpD,aAAcC,EADfmD,EACenD,eAAgBC,EAD/BkD,EAC+BlD,gBAAiBC,EADhDiD,EACgDjD,cACvD,OACEkD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMjB,SAAWzB,KAAKyB,UACpBc,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,MAAI,GACPL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GACTP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,2BACET,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEC,YAAY,uBACZC,SAAWnD,KAAKO,oBAChB6C,UAAQ,MAIZb,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GACPP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,sCACAT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEC,YAAY,SACZC,SAAWnD,KAAKI,YAChBgD,UAAQ,OAKlBb,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,yBACAT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEC,YAAY,qBACZC,SAAWnD,KAAKY,uBAChBwC,UAAQ,KAGZb,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,MAAI,GACPL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GACPP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,cACAT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEC,YAAY,kBACZC,SAAWnD,KAAKgB,aAChBoC,UAAQ,MAIdb,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GACPP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,eACAT,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACEH,YAAY,mBACZI,QAAU5D,EACVyD,SAAWnD,KAAKa,kBAItB0B,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GACPP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,aACAT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEC,YAAY,iBACZC,SAAWnD,KAAKe,YAChBqC,UAAQ,OAKhBb,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,MAAI,GACPL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GACPP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,sBACAT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEC,YAAY,kBACZC,SAAWnD,KAAKiB,oBAChBmC,UAAQ,MAIdb,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GACPP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,uBACAT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEM,KAAK,OACLL,YAAY,mBACZC,SAAWnD,KAAKU,YAChB0C,UAAQ,MAIdb,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GACPP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,gBACET,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACEH,YAAY,YACZI,QAAUhE,EACV6D,SAAWnD,KAAKc,oBAKxByB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,MAAI,GACPL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GACPP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,oCACAT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEC,YAAY,gCACZ3D,MAAQS,KAAK1B,MAAMM,gBACnB4E,SAAWxD,KAAK1B,MAAMO,aACtBsE,SAAWnD,KAAKQ,wBAChB4C,UAAQ,IAEVb,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOS,OAAK,EAACC,UAAU,aACrBnB,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEM,KAAK,WACLJ,SAAWnD,KAAKW,qBACf,IAJL,6DASJ4B,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GACPP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACAR,EAAAC,EAAAC,cAACO,EAAA,EAAD,uBACAT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEC,YAAY,mBACZC,SAAWnD,KAAKS,0BAKtB8B,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKe,UAAU,QACbnB,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GACPP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,4CACET,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACEH,YAAY,MACZI,QAAU7D,EACV0D,SAAWnD,KAAKuB,yBAGtBgB,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,uBACAT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEM,KAAK,OACLL,YAAY,mBACZC,SAAWnD,KAAKwB,qBAChB4B,UAAQ,MAIdb,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GACPP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOW,IAAI,mBAAX,qCACApB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CACEL,KAAK,SACLM,GAAG,sBACHC,KAAK,eACLtE,MAAM,qCACN2D,SAAWnD,KAAKmB,mBAChB4C,QAAU7E,IAEZqD,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GACPP,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CACEL,KAAK,SACLM,GAAG,uBACHC,KAAK,eACLtE,MAAM,iBACN2D,SAAWnD,KAAKoB,qBAChB2C,QAAU5E,KAGdoD,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKa,UAAU,aAAaZ,GAAI,GAAhC,SAEEP,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEe,OAAO,KACPzE,MAAQF,EACR8D,SAAWnD,KAAKsB,0BAItBiB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CACEL,KAAK,SACLM,GAAG,uBACHrE,MAAM,kBACN2D,SAAWnD,KAAKqB,sBAChB0C,QAAU3E,QAMtBmD,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAQC,MAAM,YAAYC,KAAK,MAA/B,OACA5B,EAAAC,EAAAC,cAAC2B,EAAA,sBAAD,cA3VqBC,iFCUhBC,EAAe,SAACC,EAAMtC,GAJlB,IAACuC,EAAKC,EAALD,EAKPzH,+bAAY2H,mBALAD,EAKoB,SAACpC,EAAOsC,GAC/C,GAAItC,EACF,MAAMA,EAGR,IAAIuC,EAAYL,EAEZM,EAAgB,GAChBC,EAAsB,GACtBC,EAAgB,KAChBC,EAAc,GACdC,EAAS,GACTC,EAAe,EAGnBN,EAAUO,aAAaC,QAAQ,SAACC,EAAMC,GACpCP,EAAgB,GAChBM,EAAKE,MAAM,EAAG,IAAIH,QAAQ,SAACI,EAASC,GAClCV,EAAa,OAAAW,OAAQJ,EAAR,KAAAI,OAAqBD,IAAkBD,EAAQjG,QAE9DsF,EAAcc,KAAKZ,GACnBD,EAAoBa,KAClBN,EAAKE,MAAM,GAAIF,EAAKO,OAAS,GAAGC,UAIpCjB,EAAUkB,WAAWV,QAAQ,SAACI,EAASO,GAAU,IAAAC,EAC/ChB,EAAYW,MAAZK,EAAA,GAAAlG,OAAAmG,EAAA,EAAAnG,CAAAkG,EAAA,MAAAN,OACSK,GAAUP,EAAQ1B,MAD3BhE,OAAAmG,EAAA,EAAAnG,CAAAkG,EAAA,OAAAN,OAEUK,GAAUP,EAAQU,KAF5BpG,OAAAmG,EAAA,EAAAnG,CAAAkG,EAAA,OAAAN,OAGUK,GAAUP,EAAQW,WAH5BH,MAOFpB,EAAUwB,YAAYhB,QAAQ,SAACC,EAAMU,GACnCb,EAAe,EACfG,EAAKD,QAAQ,SAACI,EAASa,GACrBb,EAAQjG,MAAQiG,EAAQjG,MAAM+G,QAAd,GAAAZ,OAAyBF,EAAQhG,MAAjC,KAA2C,IAC3D0F,GAAgBqB,SAASf,EAAQjG,OC7Df,UD8DbiG,EAAQhG,YACyCgH,IAAjDnB,EAAKoB,KAAK,SAAAC,GAAI,MC9DD,UD8DKA,EAAKlH,QAC1BoF,EAAUwB,YAAYL,GAAOM,GAAQ7G,MAArC,GAAAkG,OChEgB,QDgEhB,OC9DgB,UD+DNF,EAAQhG,YAG0BgH,IAFlCnB,EAAKoB,KAAK,SAAAC,GAAI,MC/DR,UD+DcA,EAAKlH,OC9DnB,UD+DNkH,EAAKlH,OC9DC,UD+DNkH,EAAKlH,QACfoF,EAAUwB,YAAYL,GAAOM,GAAQ7G,MAArC,GAAAkG,OCnEgB,QDmEhB,QC/DgB,UDgELF,EAAQhG,OC/DH,UD+D6BgG,EAAQhG,OC9DrC,UD+DNgG,EAAQhG,OC9DF,UD8D4BgG,EAAQhG,QAC3CoF,EAAUwB,YAAYL,GAAOH,OAAS,IAC/ChB,EAAUwB,YAAYL,GAAOM,GAAQ7G,MAArC,GAAAkG,OAAgDF,EAAQhG,MAAxD,UAGJyF,EAAOU,KAAP7F,OAAAmG,EAAA,EAAAnG,CAAA,UAAA4F,OACUK,GAAUb,MAItB,IAAM3G,EAAM,IAAIoI,IAAOhC,GACjBiC,GAAM,IAAIC,KAAgBC,QAAQvI,GACxCqI,EAAIG,WAAW,CAAEC,WAAY,WAC3B,MAAO,MAETJ,EAAIK,QAAJnH,OAAAoH,EAAA,EAAApH,CAAA,GACKmC,EACA2C,EAAUuC,SAFf,CAIEC,cAAexC,EAAUwB,YAAY,GACrCiB,eAAgBzC,EAAUwB,YAAY,GACtCkB,cAAe1C,EAAUwB,YAAY,GACrCmB,eAAgB3C,EAAUwB,YAAY,GACtCoB,cAAe5C,EAAUwB,YAAY,GACrCqB,cAAe7C,EAAUwB,YAAY,GACrCsB,gBAAiB9C,EAAUwB,YAAY,GAEvCuB,YAAa7C,EAAoB,GACjC8C,aAAc9C,EAAoB,GAClC+C,YAAa/C,EAAoB,GACjCgD,aAAchD,EAAoB,GAClCiD,YAAajD,EAAoB,GACjCkD,aAAclD,EAAoB,GAClCmD,cAAenD,EAAoB,IAEhCD,EAAc,GACdA,EAAc,GACdA,EAAc,GACdA,EAAc,GACdA,EAAc,GACdA,EAAc,GACdA,EAAc,GAEdG,EAAY,GACZA,EAAY,GACZA,EAAY,GACZA,EAAY,GACZA,EAAY,GACZA,EAAY,GACZA,EAAY,GAEZC,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,GACPA,EAAO,KAGZ,IACE2B,EAAIsB,SAEN,MAAO7F,GACL,IAAM8F,EAAI,CACRC,QAAS/F,EAAM+F,QACftE,KAAMzB,EAAMyB,KACZuE,MAAOhG,EAAMgG,MACbC,WAAYjG,EAAMiG,YAGpB,MADAC,QAAQC,IAAIC,KAAKC,UAAU,CAAErG,MAAO8F,KAC9B9F,EAGR,IAAMsG,EAAS/B,EAAIgC,SAASC,SAAS,CACnCtF,KCnJqB,ODoJrBuF,SCtJmB,4EDwJfC,EAAiBlH,IAAOmH,KAAKC,OAAOnH,OCvJnB,uBDwJjBoH,EAAU,UAAAxD,OAAcqD,EAAd,SAChBI,iBAAOR,EAAQO,IApIjBE,IAAWC,iBAAiB7E,EAAKC,IEgNpB6E,sBAtNb,SAAAA,EAAY1J,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsJ,IACjBzJ,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwJ,GAAAnJ,KAAAH,KAAMJ,KACDtB,MAAQX,EACbkC,EAAK0J,qBAAuB1J,EAAK0J,qBAAqBlJ,KAA1BP,OAAAQ,EAAA,EAAAR,CAAAD,IAC5BA,EAAK2J,gBAAkB3J,EAAK2J,gBAAgBnJ,KAArBP,OAAAQ,EAAA,EAAAR,CAAAD,IACvBA,EAAK4J,gBAAkB5J,EAAK4J,gBAAgBpJ,KAArBP,OAAAQ,EAAA,EAAAR,CAAAD,IACvBA,EAAK6J,eAAiB7J,EAAK6J,eAAerJ,KAApBP,OAAAQ,EAAA,EAAAR,CAAAD,IACtBA,EAAK8J,iBAAmB9J,EAAK8J,iBAAiBtJ,KAAtBP,OAAAQ,EAAA,EAAAR,CAAAD,IACxBA,EAAK+J,kBAAoB/J,EAAK+J,kBAAkBvJ,KAAvBP,OAAAQ,EAAA,EAAAR,CAAAD,IACzBA,EAAKgK,WAAahK,EAAKgK,WAAWxJ,KAAhBP,OAAAQ,EAAA,EAAAR,CAAAD,IAClBA,EAAK4B,SAAW5B,EAAK4B,SAASpB,KAAdP,OAAAQ,EAAA,EAAAR,CAAAD,IAVCA,oFAaE6B,GACnB1B,KAAK2B,SAAS,CACZ1D,YAAa4D,IAAOH,EAAME,OAAOrC,OAAOuC,OJ/BnB,uDImCRJ,GACf1B,KAAKJ,MAAMkK,eAAepI,EJ3BA,oDI8BZA,GACd1B,KAAK2B,SAAS,CAAE9D,cAAe6D,EAAMnC,gDAGvBmC,GACd,IAAMO,EAAUjC,KAAKJ,MAAMmK,iBAAiBrI,EAAMnC,OAC5CyK,EAAYhK,KAAKJ,MAAMqK,oBAAoBhI,GACjDjC,KAAKJ,MAAMsK,qBAAqBF,GAChChK,KAAK2B,SAAS,CACZ/D,YAAa8D,EAAMnC,MACnBvB,mBAAmB,2CAIR0D,GACb1B,KAAK2B,SAAS,CACZ7D,WAAY4D,EAAMlC,MAClBzB,YAAa2D,EAAMnC,kDAILmC,GAChB1B,KAAKJ,MAAMkK,eAAepI,EJnDC,kDIsDhB,IAAAK,EACwC/B,KAAK1B,MAAhDR,EADGiE,EACHjE,WAAYF,EADTmE,EACSnE,YAAaC,EADtBkE,EACsBlE,cADtBsM,EAEiCnK,KAAKJ,MAAzCwK,EAFGD,EAEHC,aAAcC,EAFXF,EAEWE,kBAChBC,EAAeF,EAAaC,GAAmBrL,SAC/C6F,EAAgBuF,EAAaC,GAAmBtL,UACtD,OAAOlB,GAAiBC,GAAcF,GAC/B2M,MAAMC,QAAQF,IAAiBA,EAAa1E,QAC5C2E,MAAMC,QAAQ3F,IAAkBA,EAAce,wCAG9ClE,GAEP,GADAA,EAAMM,iBACFhC,KAAK6J,aAAc,KAAAY,EAUjBzK,KAAKJ,MARPwK,EAFmBK,EAEnBL,aACAC,EAHmBI,EAGnBJ,kBACAK,EAJmBD,EAInBC,IACAtE,EALmBqE,EAKnBrE,YACAjB,EANmBsF,EAMnBtF,aACAW,EAPmB2E,EAOnB3E,WACAqB,EARmBsD,EAQnBtD,SACAwD,EATmBF,EASnBE,WATmBrI,EAW+BtC,KAAK1B,MAAjDP,EAXauE,EAWbvE,YAAaF,EAXAyE,EAWAzE,cAAeI,EAXfqE,EAWerE,YASpC,GAPA+B,KAAKJ,MAAMgL,WAAW,CACpB5L,SAAUoL,EAAaC,GAAmBrL,SAC1C6L,KAAM5M,EACNc,UAAWqL,EAAaC,GAAmBtL,UAC3C+L,OAAQ/M,EACRgN,OAAQlN,IJlFO,IIoFb6M,EAAiB,CACnB,IAAMM,EAAU,CACd5E,YAAW,GAAAV,OAAA5F,OAAAmL,EAAA,EAAAnL,CAAMsG,GAAN,CAAmBgE,EAAaC,GAAmBrL,WAC9DmG,aAAY,GAAAO,OAAA5F,OAAAmL,EAAA,EAAAnL,CAAMqF,GAAN,CAAoBiF,EAAaC,GAAmBtL,YAChE+G,WAAU,GAAAJ,OAAA5F,OAAAmL,EAAA,EAAAnL,CAAMgG,GAAN,CAAkB/H,IAC5BoJ,SAAQ,GAAAzB,OAAA5F,OAAAmL,EAAA,EAAAnL,CAAMqH,GAAN,CAAgBlJ,IACxB0M,WAAU,GAAAjF,OAAA5F,OAAAmL,EAAA,EAAAnL,CAAM6K,GAAN,CAAkB9M,KAE9B,IACEyG,EAAa0G,EAASZ,EAAaC,IACnClI,sBAAoBC,QJrGG,aADL,UAEG,KIyGrB,MAAO+F,GACPhG,sBAAoBE,MJ/GH,gBIiHf,GJ5GmB,YIkHzBF,sBAAoBE,MJvHC,gBACE,8BAIE,sCI2H3B,IAAM6I,EAAaC,OAAOD,WACpBZ,EAAea,OAAOb,aACtBc,EAAoBD,OAAOC,kBAC3BvG,EAAgBsG,OAAOtG,cAJtBwG,EAK0CrL,KAAKJ,MAA9CwK,EALDiB,EAKCjB,aAAcC,EALfgB,EAKehB,kBAAmBK,EALlCW,EAKkCX,IACjC1M,EAAsBgC,KAAK1B,MAA3BN,kBACFsN,EAAoB,GAU1B,OATAxL,OAAOyL,QAAQnB,GAAcoB,IAAI,SAAAC,GAAgB,IAAAC,EAAA5L,OAAA6L,EAAA,EAAA7L,CAAA2L,EAAA,GAATG,GAASF,EAAA,GAAAA,EAAA,IAC/C,OACEJ,EAAkB3F,KAAK,CACrBpG,MAAOqM,EAAIhO,YACX4B,MAAOoM,EAAIhO,gBAMf2E,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMjB,SAAWzB,KAAKyB,UACpBc,EAAAC,EAAAC,cAAA,MAAIiB,UAAU,eAAd,kBAA6CgH,EAA7C,SACAnI,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,MAAI,GACLL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GACPP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,iBACAT,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACEC,QAAUgI,EACVnI,SAAWnD,KAAKyJ,gBAChBoC,WJ9IK,II8IQnB,MAInBnI,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GACPP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,yBACAT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEM,KAAK,OACLL,YAAY,qBACZC,SAAWnD,KAAKuJ,qBAChBnG,UAAQ,OAKhBb,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,MAAI,GACPL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GACPP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,wBACAT,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACEC,QAAU8H,EACVjI,SAAWnD,KAAKwJ,oBAItBjH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GACPP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,gBACAT,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACEC,QAAU4H,EACV/H,SAAWnD,KAAK0J,oBAKxBnH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,MAAI,GACPL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GACPP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACAR,EAAAC,EAAAC,cAACO,EAAA,EAAD,mBACAT,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACEyI,SAAO,EAAChI,KAAK,SAASR,QAAUuB,EAChCnB,UAAU,qBACVqI,gBAAgB,SAChBC,mBAAoB,EACpBC,qBAAsB,EACtB9I,SAAWnD,KAAK4J,kBAChBiC,WAAa7N,EACbuB,MAAQ8K,GAAqBD,EAAaC,GAAmBtL,cAIjEwD,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GACPP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACAR,EAAAC,EAAAC,cAACO,EAAA,EAAD,wCACAT,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACEyI,SAAO,EAAChI,KAAK,SAASR,QAAUgH,EAChC5G,UAAU,qBACVqI,gBAAgB,SAChBC,mBAAoB,EACpBC,qBAAsB,EACtB9I,SAAWnD,KAAK2J,iBAChBkC,WAAa7N,EACbuB,MAAQ8K,GAAqBD,EAAaC,GAAmBrL,cAKrEuD,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAQC,MAAM,YAAYC,KAAK,MAA/B,UACA5B,EAAAC,EAAAC,cAAC2B,EAAA,sBAAD,cAjNyBC,8DCgClB6H,oLAjCJ,IAAA/B,EACyBnK,KAAKJ,MAA7BuM,EADDhC,EACCgC,OAAQC,EADTjC,EACSiC,YAChB,OACE7J,EAAAC,EAAAC,cAAC4J,EAAA,EAAD,CAAKC,MAAI,GACP/J,EAAAC,EAAAC,cAAC8J,GAAA,EAAD,KACEhK,EAAAC,EAAAC,cAAC+J,GAAA,EAAD,CACE9I,UACE+I,KAAW,CACTC,OAjBM,MAiBEN,IAGZO,QAAU,kBAAMR,EApBN,OAcZ,yBAWF5J,EAAAC,EAAAC,cAAC8J,GAAA,EAAD,KACEhK,EAAAC,EAAAC,cAAC+J,GAAA,EAAD,CACE9I,UACE+I,KAAW,CACTC,OA5BO,MA4BCN,IAGZO,QAAU,kBAAMR,EA/BL,OAyBb,4BAvBW9H,aC+DNuI,uBA1Db,SAAAA,EAAYhN,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4M,IACjB/M,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8M,GAAAzM,KAAAH,KAAMJ,KACDtB,MAAQ,CACXuO,UAAWnP,GAEbmC,EAAKsM,OAAStM,EAAKsM,OAAO9L,KAAZP,OAAAQ,EAAA,EAAAR,CAAAD,IALGA,sEAQZiN,GACD9M,KAAK1B,MAAMuO,YAAcC,GAC3B9M,KAAK2B,SAAS,CACZkL,UAAWC,qCAKR,IACCD,EAAc7M,KAAK1B,MAAnBuO,UACAE,EAAa/M,KAAKJ,MAAlBmN,SACR,OACExK,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,aACbnB,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAACuK,GAAD,CAAQb,OAASnM,KAAKmM,OAASC,YAAcS,IAC7CtK,EAAAC,EAAAC,cAACwK,EAAA,EAAD,CAAYJ,UAAYA,GACtBtK,EAAAC,EAAAC,cAACyK,EAAA,EAAD,CAASC,MAAM,KACb5K,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKuK,GAAG,MACN7K,EAAAC,EAAAC,cAAC4K,EAAD,CACEjD,aAAe2C,EACfhD,iBAAmB/J,KAAKJ,MAAMmK,iBAC9BG,qBAAuBlK,KAAKJ,MAAMsK,qBAClCD,oBAAsBjK,KAAKJ,MAAMqK,oBACjCH,eAAiB9J,KAAKJ,MAAMkK,eAC5BO,kBAAoBrK,KAAKJ,MAAMyK,kBAC/BO,WAAa5K,KAAKJ,MAAMgL,WACxBF,IAAM1K,KAAKJ,MAAM8K,IACjBtE,YAAcpG,KAAKJ,MAAMwG,YACzBjB,aAAenF,KAAKJ,MAAMuF,aAC1BW,WAAa9F,KAAKJ,MAAMkG,WACxBqB,SAAWnH,KAAKJ,MAAMuH,SACtBwD,WAAa3K,KAAKJ,MAAM+K,gBAKhCpI,EAAAC,EAAAC,cAACyK,EAAA,EAAD,CAASC,MAAM,KACb5K,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKuK,GAAG,MACN7K,EAAAC,EAAAC,cAAC6K,EAAD,CAAgBpL,UAAYlC,KAAKJ,MAAMsC,wBArDhCmC,cC+HRkJ,eAhIb,SAAAA,EAAY3N,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuN,IACjB1N,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyN,GAAApN,KAAAH,KAAMJ,KACDtB,MAAQ,CACXyO,SAAU,GACV1C,kBAAmB,GACnBjE,YAAa,GACbjB,aAAc,GACdW,WAAY,GACZqB,SAAU,GACVwD,WAAY,GACZD,IAAK,GAEP7K,EAAK2N,WAAa3N,EAAK2N,WAAWnN,KAAhBP,OAAAQ,EAAA,EAAAR,CAAAD,IAClBA,EAAKqK,qBAAuBrK,EAAKqK,qBAAqB7J,KAA1BP,OAAAQ,EAAA,EAAAR,CAAAD,IAC5BA,EAAKiK,eAAiBjK,EAAKiK,eAAezJ,KAApBP,OAAAQ,EAAA,EAAAR,CAAAD,IACtBA,EAAKkK,iBAAmBlK,EAAKkK,iBAAiB1J,KAAtBP,OAAAQ,EAAA,EAAAR,CAAAD,IACxBA,EAAKoK,oBAAsBpK,EAAKoK,oBAAoB5J,KAAzBP,OAAAQ,EAAA,EAAAR,CAAAD,IAC3BA,EAAK+K,WAAa/K,EAAK+K,WAAWvK,KAAhBP,OAAAQ,EAAA,EAAAR,CAAAD,IAjBDA,0EAoBR0E,GACT,IAAM6F,EAAYtK,OAAAoH,EAAA,EAAApH,CAAA,GAAQE,KAAK1B,MAAMyO,UAErC3C,EADWpB,KAAKC,OAChBnJ,OAAAoH,EAAA,EAAApH,CAAA,GACKyE,EADL,CAEExF,UAAW,GACXC,SAAU,KAEZgB,KAAK2B,SAAS,CAAEoL,SAAU3C,2CAGb7F,EAAMkJ,GAAO,IAAA1L,EACc/B,KAAK1B,MAArCyO,EADkBhL,EAClBgL,SAAU1C,EADQtI,EACRsI,kBACZD,EAAYtK,OAAAoH,EAAA,EAAApH,CAAA,GAAQiN,GACpBW,EAAkBtD,EAAaC,GPhCX,aOiCtBoD,EACFC,EAAgB1O,SAAWuF,EAE3BmJ,EAAgB3O,UAAYwF,EAE9B6F,EAAaC,GAAqBqD,EAClC1N,KAAK2B,SAAS,CAAEoL,SAAU3C,iDAGPvG,GACnB7D,KAAK2B,SAAS,CACZ0I,kBAAmBxG,uCAIZU,GAAM,IAAAjC,EAGXtC,KAAK1B,MADP8H,EAFa9D,EAEb8D,YAAae,EAFA7E,EAEA6E,SAAUhC,EAFV7C,EAEU6C,aAAcW,EAFxBxD,EAEwBwD,WAAY6E,EAFpCrI,EAEoCqI,WAAYD,EAFhDpI,EAEgDoI,IAE/D1K,KAAK2B,SAAS,CACZyE,YPlDiB,IOkDHsE,EAAD,GAAAhF,OAAA5F,OAAAmL,EAAA,EAAAnL,CAAwBsG,GAAxB,CAAqC7B,EAAKvF,WAAY,GACnEmI,SPnDiB,IOmDNuD,EAAD,GAAAhF,OAAA5F,OAAAmL,EAAA,EAAAnL,CAAwBqH,GAAxB,CAAkC5C,EAAKsG,OAAQ,GACzD1F,aPpDiB,IOoDFuF,EAAD,GAAAhF,OAAA5F,OAAAmL,EAAA,EAAAnL,CAAwBqF,GAAxB,CAAsCZ,EAAKxF,YAAa,GACtE+G,WPrDiB,IOqDJ4E,EAAD,GAAAhF,OAAA5F,OAAAmL,EAAA,EAAAnL,CAAwBgG,GAAxB,CAAoCvB,EAAKuG,SAAU,GAC/DH,WPtDiB,IOsDJD,EAAD,GAAAhF,OAAA5F,OAAAmL,EAAA,EAAAnL,CAAwB6K,GAAxB,CAAoCpG,EAAKwG,SAAU,GAC/DL,IPvDiB,IOuDXA,EAAoBA,EPtDT,+CO0DJ5G,GAAM,IACbiJ,EAAa/M,KAAK1B,MAAlByO,SACR,OAAOjN,OAAO6N,OAAOZ,GAAUtG,KAAK,SAAAxE,GAClC,OAAOA,EAAQrE,cAAgBkG,gDAIfvE,GAElB,IAFyB,IACjBwN,EAAa/M,KAAK1B,MAAlByO,SACRa,EAAA,EAAAC,EAAuB/N,OAAOyL,QAAQwB,GAAtCa,EAAAC,EAAAjI,OAAAgI,IAAiD,KAAAE,EAAAD,EAAAD,GAAAlC,EAAA5L,OAAA6L,EAAA,EAAA7L,CAAAgO,EAAA,GAAvCC,EAAuCrC,EAAA,GAAlCE,EAAkCF,EAAA,GAC/C,GAAIjD,KAAKC,UAAUkD,KAASnD,KAAKC,UAAUnJ,GACzC,OAAOwO,gDAMX,IACE/N,KAAKgO,YAAc1Q,EAAK2Q,UP9EJ,WO8E0B,CAC5CC,QAASlO,KACT1B,MPhFkB,aOmFtB,MAAO+D,GAEL,MADAkG,QAAQC,IAAInG,GACNA,oCAID,IAAA8L,EAUHnO,KAAK1B,MARPyO,EAFKoB,EAELpB,SACArC,EAHKyD,EAGLzD,IACAL,EAJK8D,EAIL9D,kBACAjE,EALK+H,EAKL/H,YACAjB,EANKgJ,EAMLhJ,aACAW,EAPKqI,EAOLrI,WACAqB,EARKgH,EAQLhH,SACAwD,EATKwD,EASLxD,WAGF,OACEpI,EAAAC,EAAAC,cAAC2L,EAAA,EAAD,CAAW1K,UAAU,OACnBnB,EAAAC,EAAAC,cAAC4L,GAAD,CACEnM,UAAYlC,KAAKwN,WACjBzD,iBAAmB/J,KAAK+J,iBACxBG,qBAAuBlK,KAAKkK,qBAC5BD,oBAAsBjK,KAAKiK,oBAC3BH,eAAiB9J,KAAK8J,eACtBiD,SAAWA,EACX1C,kBAAoBA,EACpBO,WAAa5K,KAAK4K,WAClBF,IAAMA,EACNtE,YAAcA,EACdjB,aAAeA,EACfW,WAAaA,EACbqB,SAAWA,EACXwD,WAAaA,YA1HLtG,aCKEiK,QACW,cAA7BnD,OAAOoD,SAASC,UAEe,UAA7BrD,OAAOoD,SAASC,UAEhBrD,OAAOoD,SAASC,SAASC,MACvB,kECXNC,IAASxG,OAAO3F,EAAAC,EAAAC,cAACkM,GAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3d591888.chunk.js","sourcesContent":["import Rebase from 're-base'\nimport firebase from 'firebase'\n\nconst config = {\n  apiKey: process.env.REACT_APP_FIREBASE_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n}\n\nconst app = firebase.initializeApp(config)\nconst base = Rebase.createClass(app.database())\n\nexport { base }","// MAIN FORM\nexport const DATE_FORMAT = 'MMDDYYYY'\nexport const ERROR_LABEL = 'Error message'\nexport const ERROR_MESSAGE = 'Please, fill in all fields!'\nexport const SUCCES_MESSAGE = 'You add new patient'\nexport const SUCCES_LABEL = 'Success'\nexport const SUCCES_GENERATION = 'Generation'\nexport const TIMEOUT_MESSAGE = 3000\nexport const FIRST_NAV_TAB = '1'\nexport const SECOND_NAV_TAB = '2'\nexport const SERVICES_FIELD = 'services'\nexport const DIAGNOSES_FIELD = 'diagnoses'\nexport const TABLE_NAME = 'patients'\nexport const MAX_DAY = 7\nexport const MIN_DAY = 1\n\n//DoctorsAppointment\n\nexport const INITIAL_STATE_DOCTORS_APPOINTMENT = {\n  patientName: '',\n  officeAddress: '',\n  doctorName: '',\n  doctorValue: {},\n  isPatientSelected: true,\n  dateReceipt: null\n}\n\n// PATIENT DETAILS\nexport const INITIAL_STATE_PATIENT = {\n  patientName: '',\n  ssn: '',\n  addressPatient: '',\n  city: '',\n  state: '',\n  zip: '',\n  phoneNumber: '',\n  dob: null,\n  accidentDate: null,\n  gender: '',\n  insuranceHolder: '',\n  isSameHolder: false,\n  policyNumber: '',\n  diagnoses: [],\n  services: [],\n  relastionship: '',\n  isEmployment: false,\n  isAutoAccident: true,\n  isOtherAccident: false,\n  stateAccident: 'FL'\n}\n\nexport const GENDER_LIST = [\n  { value: 'Male', label: 'Male' },\n  { value: 'Female', label: 'Female' }\n]\n\nexport const RELATIONSHIP_LIST = [\n  { value: 'Selа', label: 'Selа' },\n  { value: 'Spouse', label: 'Spouse' },\n  { value: 'Child', label: 'Child' },\n  { value: 'Other', label: 'Other' }\n]\n\nexport const USA_STATES = [\n  {\n      value: \"Alabama\",\n      label: \"AL\"\n  },\n  {\n      value: \"Alaska\",\n      label: \"AK\"\n  },\n  {\n      value: \"American Samoa\",\n      label: \"AS\"\n  },\n  {\n      value: \"Arizona\",\n      label: \"AZ\"\n  },\n  {\n      value: \"Arkansas\",\n      label: \"AR\"\n  },\n  {\n      value: \"California\",\n      label: \"CA\"\n  },\n  {\n      value: \"Colorado\",\n      label: \"CO\"\n  },\n  {\n      value: \"Connecticut\",\n      label: \"CT\"\n  },\n  {\n      value: \"Delaware\",\n      label: \"DE\"\n  },\n  {\n      value: \"District Of Columbia\",\n      label: \"DC\"\n  },\n  {\n      value: \"Federated States Of Micronesia\",\n      label: \"FM\"\n  },\n  {\n      value: \"Florida\",\n      label: \"FL\"\n  },\n  {\n      value: \"Georgia\",\n      label: \"GA\"\n  },\n  {\n      value: \"Guam\",\n      label: \"GU\"\n  },\n  {\n      value: \"Hawaii\",\n      label: \"HI\"\n  },\n  {\n      value: \"Idaho\",\n      label: \"ID\"\n  },\n  {\n      value: \"Illinois\",\n      label: \"IL\"\n  },\n  {\n      value: \"Indiana\",\n      label: \"IN\"\n  },\n  {\n      value: \"Iowa\",\n      label: \"IA\"\n  },\n  {\n      value: \"Kansas\",\n      label: \"KS\"\n  },\n  {\n      value: \"Kentucky\",\n      label: \"KY\"\n  },\n  {\n      value: \"Louisiana\",\n      label: \"LA\"\n  },\n  {\n      value: \"Maine\",\n      label: \"ME\"\n  },\n  {\n      value: \"Marshall Islands\",\n      label: \"MH\"\n  },\n  {\n      value: \"Maryland\",\n      label: \"MD\"\n  },\n  {\n      value: \"Massachusetts\",\n      label: \"MA\"\n  },\n  {\n      value: \"Michigan\",\n      label: \"MI\"\n  },\n  {\n      value: \"Minnesota\",\n      label: \"MN\"\n  },\n  {\n      value: \"Mississippi\",\n      label: \"MS\"\n  },\n  {\n      value: \"Missouri\",\n      label: \"MO\"\n  },\n  {\n      value: \"Montana\",\n      label: \"MT\"\n  },\n  {\n      value: \"Nebraska\",\n      label: \"NE\"\n  },\n  {\n      value: \"Nevada\",\n      label: \"NV\"\n  },\n  {\n      value: \"New Hampshire\",\n      label: \"NH\"\n  },\n  {\n      value: \"New Jersey\",\n      label: \"NJ\"\n  },\n  {\n      value: \"New Mexico\",\n      label: \"NM\"\n  },\n  {\n      value: \"New York\",\n      label: \"NY\"\n  },\n  {\n      value: \"North Carolina\",\n      label: \"NC\"\n  },\n  {\n      value: \"North Dakota\",\n      label: \"ND\"\n  },\n  {\n      value: \"Northern Mariana Islands\",\n      label: \"MP\"\n  },\n  {\n      value: \"Ohio\",\n      label: \"OH\"\n  },\n  {\n      value: \"Oklahoma\",\n      label: \"OK\"\n  },\n  {\n      value: \"Oregon\",\n      label: \"OR\"\n  },\n  {\n      value: \"Palau\",\n      label: \"PW\"\n  },\n  {\n      value: \"Pennsylvania\",\n      label: \"PA\"\n  },\n  {\n      value: \"Puerto Rico\",\n      label: \"PR\"\n  },\n  {\n      value: \"Rhode Island\",\n      label: \"RI\"\n  },\n  {\n      value: \"South Carolina\",\n      label: \"SC\"\n  },\n  {\n      value: \"South Dakota\",\n      label: \"SD\"\n  },\n  {\n      value: \"Tennessee\",\n      label: \"TN\"\n  },\n  {\n      value: \"Texas\",\n      label: \"TX\"\n  },\n  {\n      value: \"Utah\",\n      label: \"UT\"\n  },\n  {\n      value: \"Vermont\",\n      label: \"VT\"\n  },\n  {\n      value: \"Virgin Islands\",\n      label: \"VI\"\n  },\n  {\n      value: \"Virginia\",\n      label: \"VA\"\n  },\n  {\n      value: \"Washington\",\n      label: \"WA\"\n  },\n  {\n      value: \"West Virginia\",\n      label: \"WV\"\n  },\n  {\n      value: \"Wisconsin\",\n      label: \"WI\"\n  },\n  {\n      value: \"Wyoming\",\n      label: \"WY\"\n  }\n]","import React, { Component } from 'react'\nimport { Button, Form, FormGroup, Label, Input, Col, Row, CustomInput  } from 'reactstrap'\nimport { NotificationContainer, NotificationManager } from 'react-notifications'\nimport {\n  INITIAL_STATE_PATIENT, GENDER_LIST, \n  USA_STATES, DATE_FORMAT, ERROR_LABEL, \n  ERROR_MESSAGE, TIMEOUT_MESSAGE,\n  SUCCES_MESSAGE, SUCCES_LABEL,\n  RELATIONSHIP_LIST\n} from '../../constants/mainForm'\nimport moment from 'moment'\nimport Select from 'react-select'\nimport './PatientDetails.scss'\nimport PropTypes from 'prop-types'\nimport 'react-notifications/lib/notifications.css'\n\nclass PatientDetails extends Component {\n  static propTypes = {\n    addPatien: PropTypes.func.isRequired\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = INITIAL_STATE_PATIENT\n    this.onSSNChange = this.onSSNChange.bind(this)\n    this.onPatientNameChange = this.onPatientNameChange.bind(this)\n    this.onInsuranceHolderChange = this.onInsuranceHolderChange.bind(this)\n    this.onPolicyNumberChange = this.onPolicyNumberChange.bind(this)\n    this.onDobChange = this.onDobChange.bind(this)\n    this.onSameHolderChange = this.onSameHolderChange.bind(this)\n    this.onAddressPatientChange = this.onAddressPatientChange.bind(this)\n    this.onStateChange = this.onStateChange.bind(this)\n    this.onGenderChange = this.onGenderChange.bind(this)\n    this.onZipChange = this.onZipChange.bind(this)\n    this.onCityChange = this.onCityChange.bind(this)\n    this.onPhoneNumberChange = this.onPhoneNumberChange.bind(this)\n    this.checkValidForm = this.checkValidForm.bind(this)\n    this.onEmploymentChange = this.onEmploymentChange.bind(this)\n    this.onAutoAccidentChange = this.onAutoAccidentChange.bind(this)\n    this.onOtherAccidentChange = this.onOtherAccidentChange.bind(this)\n    this.onStateAccidentChange = this.onStateAccidentChange.bind(this)\n    this.onRelastionshipChange = this.onRelastionshipChange.bind(this)\n    this.onAccidentDateChange = this.onAccidentDateChange.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  onSSNChange(event) {\n    this.setState({ ssn: event.target.value })\n  }\n\n  onRelastionshipChange(event) {\n    this.setState({ relastionship: event.value })\n  }\n\n  onEmploymentChange(event) {\n    const { isEmployment } = this.state\n    this.setState({ isEmployment: !isEmployment })\n  }\n\n  onAutoAccidentChange(event) {\n    const { isAutoAccident } = this.state\n    this.setState({ isAutoAccident: !isAutoAccident })\n  }\n\n  onOtherAccidentChange(event) {\n    const { isOtherAccident } = this.state\n    this.setState({ isOtherAccident: !isOtherAccident })\n  }\n\n  onStateAccidentChange(event) {\n    this.setState({ stateAccident: event.target.value })\n  }\n\n  onPatientNameChange(event) {\n    this.setState({\n      patientName: event.target.value\n    })\n    if (this.state.isSameHolder) {\n      this.setState({\n        insuranceHolder: event.target.value\n      })\n    }\n  }\n\n  onInsuranceHolderChange(event) {\n    this.setState({ insuranceHolder: event.target.value })\n  }\n\n  onPolicyNumberChange(event) {\n    this.setState({ policyNumber: event.target.value })\n  }\n\n  onAddressPatientChange(event) {\n    this.setState({ addressPatient: event.target.value })\n  }\n\n  onDobChange(event) {\n    this.setState({\n      dob: moment(event.target.value).format(DATE_FORMAT)\n    })\n  }\n\n  onAccidentDateChange(event) {\n    this.setState({\n      accidentDate: moment(event.target.value).format(DATE_FORMAT)\n    })\n  }\n\n  onCityChange(event) {\n    this.setState({ city: event.target.value })\n  }\n\n  onStateChange(event) {\n    this.setState({ state: event.label })\n  }\n\n  onPhoneNumberChange(event) {\n    this.setState({ phoneNumber: event.target.value })\n  }\n\n  onGenderChange(event) {\n    this.setState({ gender: event.value })\n  }\n\n  onOfficeAddressChange(event) {\n    this.setState({ officeAddress: event.value })\n  }\n\n  onZipChange(event) {\n    this.setState({ zip: event.target.value })\n  }\n\n  onSameHolderChange() {\n    const { isSameHolder, patientName } = this.state\n    !(isSameHolder) ? this.setState({\n      insuranceHolder: patientName,\n    }) : this.setState({\n      insuranceHolder: ''\n    })\n    this.setState({\n      isSameHolder: !isSameHolder\n    })\n  }\n\n  checkValidForm() {\n    return this.state.gender && this.state.state && \n           this.state.relastionship\n  }\n\n  onSubmit(event) {\n    event.preventDefault()\n    if (this.checkValidForm()) {\n      const patient = this.state\n      delete patient.isSameHolder\n      this.props.addPatien(patient)\n      NotificationManager.success(\n        SUCCES_MESSAGE,\n        SUCCES_LABEL,\n        TIMEOUT_MESSAGE\n      )\n    } else {\n      NotificationManager.error(\n        ERROR_LABEL,\n        ERROR_MESSAGE,\n        TIMEOUT_MESSAGE\n      )\n    }\n  }\n\n\n  render() {\n    const { isEmployment, isAutoAccident, isOtherAccident, stateAccident } = this.state\n    return (\n      <Form onSubmit={ this.onSubmit }>\n        <Row form>\n          <Col md={7}>\n          <FormGroup>\n            <Label>Full name patient:</Label>\n              <Input\n                placeholder='full name patient...'\n                onChange={ this.onPatientNameChange }\n                required\n              />\n              </FormGroup>\n            </Col>\n            <Col md={5}>\n              <FormGroup>\n                <Label>Social Security Number (SSN):</Label>\n                <Input\n                  placeholder='ssn...'\n                  onChange={ this.onSSNChange }\n                  required\n                />\n            </FormGroup>\n          </Col>\n        </Row>\n        <FormGroup>\n          <Label>Address patient:</Label>\n          <Input\n            placeholder='address patient...'\n            onChange={ this.onAddressPatientChange }\n            required\n          />\n        </FormGroup>\n        <Row form>\n          <Col md={6}>\n            <FormGroup>\n              <Label>City:</Label>\n              <Input\n                placeholder='city patient...'\n                onChange={ this.onCityChange }\n                required\n              />\n            </FormGroup>\n          </Col>\n          <Col md={4}>\n            <FormGroup>\n              <Label>State:</Label>\n              <Select\n                placeholder='state patient...'\n                options={ USA_STATES }\n                onChange={ this.onStateChange }\n              />\n            </FormGroup>\n          </Col>\n          <Col md={2}>\n            <FormGroup>\n              <Label>Zip:</Label>\n              <Input\n                placeholder='zip patient...'\n                onChange={ this.onZipChange }\n                required\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row form>\n          <Col md={6}>\n            <FormGroup>\n              <Label>Phone number:</Label>\n              <Input\n                placeholder='phone number...'\n                onChange={ this.onPhoneNumberChange }\n                required\n              />\n            </FormGroup>\n          </Col>\n          <Col md={4}>\n            <FormGroup>\n              <Label>Date of Birth:</Label>\n              <Input\n                type='date'\n                placeholder='date of birth...'\n                onChange={ this.onDobChange }\n                required\n              />\n            </FormGroup>\n          </Col>\n          <Col md={2}>\n            <FormGroup>\n              <Label>Gender:</Label>\n                <Select\n                  placeholder='gender...'\n                  options={ GENDER_LIST }\n                  onChange={ this.onGenderChange }\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row form>\n            <Col md={6}>\n              <FormGroup>\n                <Label>Full name insurance holder:</Label>\n                <Input\n                  placeholder='full name insurance holder...'\n                  value={ this.state.insuranceHolder }\n                  disabled={ this.state.isSameHolder }\n                  onChange={ this.onInsuranceHolderChange }\n                  required\n                />\n                <Label check className='check-box'>\n                  <Input\n                    type='checkbox'\n                    onChange={ this.onSameHolderChange }\n                  />{' '}\n                    the name of the insurer matches the name of the patient\n                </Label>\n              </FormGroup>\n            </Col>\n            <Col md={6}>\n              <FormGroup>\n              <Label>Palicy Number:</Label>\n              <Input\n                placeholder='palicy number...'\n                onChange={ this.onPolicyNumberChange }\n              />\n            </FormGroup>\n          </Col>\n          </Row>\n          <Row className='line'>\n            <Col md={6}>\n              <FormGroup>\n                <Label>Patient to relationship to insured:</Label>\n                  <Select\n                    placeholder='...'\n                    options={ RELATIONSHIP_LIST }\n                    onChange={ this.onRelastionshipChange }\n                  />\n              </FormGroup>\n              <FormGroup>\n                <Label>Accident date:</Label>\n                <Input\n                  type='date'\n                  placeholder='accident date...'\n                  onChange={ this.onAccidentDateChange }\n                  required\n                />\n              </FormGroup>\n            </Col>\n            <Col md={6}>\n              <FormGroup>\n                <Label for='exampleCheckbox'>Is patients condition related to:</Label>\n                <div>\n                  <CustomInput\n                    type='switch'\n                    id='exampleCustomSwitch'\n                    name='customSwitch'\n                    label='EMPLOYMENT? (Courrent or Previous)'\n                    onChange={ this.onEmploymentChange }\n                    checked={ isEmployment }\n                  />\n                  <Row>\n                    <Col md={3}>\n                      <CustomInput\n                        type='switch'\n                        id='exampleCustomSwitch2'\n                        name='customSwitch'\n                        label='AUTO ACCIDENT?'\n                        onChange={ this.onAutoAccidentChange }\n                        checked={ isAutoAccident }\n                      />\n                    </Col>\n                    <Col className='inputState' md={2}>\n                      State:\n                      <Input\n                        bsSize='sm'\n                        value={ stateAccident }\n                        onChange={ this.onStateAccidentChange }\n                      />\n                    </Col>\n                  </Row>\n                  <CustomInput\n                    type='switch'\n                    id='exampleCustomSwitch3'\n                    label='OTHER ACCIDENT?'\n                    onChange={ this.onOtherAccidentChange }\n                    checked={ isOtherAccident }\n                  />\n                </div>\n              </FormGroup>\n            </Col>\n          </Row>\n        <Button color='secondary' size='lg'>Add</Button>\n        <NotificationContainer />\n      </Form>\n    )\n  }\n}\n\nexport default PatientDetails","import docxtemplater  from 'docxtemplater'\nimport JSZipUtils from 'jszip-utils'\nimport { saveAs } from 'file-saver'\nimport PizZip from 'pizzip'\nimport moment from 'moment'\nimport { \n  URL_TEMPLATE,\n  MINE_TYPE,\n  TYPE_OUTPUT,\n  DATE_FORMAT,\n  CODE_97110,\n  CODE_97530,\n  CODE_97140,\n  CODE_98940,\n  CODE_98941,\n  CODE_98942,\n  CODE_99202,\n  CODE_99203,\n  CODE_99212,\n  CODE_99213\n} from '../constants/api'\n\nconst loadFile = (url, callback) => {\n  JSZipUtils.getBinaryContent(url, callback)\n}\n\nexport const generateFile = (data, patient) => {\n  loadFile(process.env.REACT_APP_URL_DOCX, (error, content) => {\n    if (error) {\n      throw error\n    }\n\n    let propsData = data\n\n    let diagnosesList = []\n    let diagnosesRemainList = []\n    let temporaryDate = null\n    let doctorsList = []\n    let paySum = []\n    let temporarySum = 0\n    //const accidentDate = moment(patient.accidentDate).format('MM DD YYYY') // TODO: CHECK FORMAT\n\n    propsData.allDiagnoses.forEach((list, indexList) => {\n      temporaryDate = {}\n      list.slice(0, 11).forEach((element, indexElement) => {\n        temporaryDate[`dai_${indexList}_${indexElement}`] = element.value\n      })\n      diagnosesList.push(temporaryDate)\n      diagnosesRemainList.push(\n        list.slice(11, list.length - 1).join()\n      )\n    })\n\n    propsData.allDoctors.forEach((element, index) => {\n      doctorsList.push({\n        [`dN_${index}`]: element.name,\n        [`npi_${index}`]: element.npi,\n        [`sig_${index}`]: element.signature\n      })\n    })\n\n    propsData.allServices.forEach((list, index) => {\n      temporarySum = 0\n      list.forEach((element, number) => {\n        element.value = element.value.replace(`${element.label}_`, '')\n        temporarySum += parseInt(element.value)\n        if ((element.label === CODE_97110) && \n            (list.find(elem => elem.label === CODE_97530) !== undefined)) {\n          propsData.allServices[index][number].label = `${CODE_97110} 59`\n        } else if ((element.label === CODE_97140) && \n                   (list.find(elem => ((elem.label === CODE_98940) || \n                   (elem.label === CODE_98941) || \n                   (elem.label === CODE_98942) )) !== undefined)) {\n          propsData.allServices[index][number].label = `${CODE_97140} 59`\n        } else if (((element.label === CODE_99202) || (element.label === CODE_99203) ||\n                   (element.label === CODE_99212) || (element.label === CODE_99213)) && \n                   propsData.allServices[index].length > 1) {\n          propsData.allServices[index][number].label = `${element.label} 25`\n        }\n      })\n      paySum.push({\n        [`sum_${index}`]: temporarySum\n      })\n    })\n\n    const zip = new PizZip(content)\n    const doc = new docxtemplater().loadZip(zip)\n    doc.setOptions({ nullGetter: () => {\n      return ''\n    }})\n    doc.setData({\n      ...patient,\n      ...propsData.allDates,\n\n      firstServices: propsData.allServices[0],\n      secondServices: propsData.allServices[1],\n      thirdServices: propsData.allServices[2],\n      fourthServices: propsData.allServices[3],\n      fifthServices: propsData.allServices[4],\n      sixthServices: propsData.allServices[5],\n      seventhServices: propsData.allServices[6],\n\n      firstRemain: diagnosesRemainList[0],\n      secondRemain: diagnosesRemainList[1],\n      thirdRemain: diagnosesRemainList[2],\n      fourthRemain: diagnosesRemainList[3],\n      fifthRemain: diagnosesRemainList[4],\n      sixthRemains: diagnosesRemainList[5],\n      seventhRemain: diagnosesRemainList[6],\n\n      ...diagnosesList[0],\n      ...diagnosesList[1],\n      ...diagnosesList[2],\n      ...diagnosesList[3],\n      ...diagnosesList[4],\n      ...diagnosesList[5],\n      ...diagnosesList[6],\n\n      ...doctorsList[0],\n      ...doctorsList[1],\n      ...doctorsList[2],\n      ...doctorsList[3],\n      ...doctorsList[4],\n      ...doctorsList[5],\n      ...doctorsList[6],\n\n      ...paySum[0],\n      ...paySum[1],\n      ...paySum[2],\n      ...paySum[3],\n      ...paySum[4],\n      ...paySum[5],\n      ...paySum[6],\n    })\n\n    try {\n      doc.render()\n    }\n    catch (error) {\n      const e = {\n        message: error.message,\n        name: error.name,\n        stack: error.stack,\n        properties: error.properties,\n      }\n      console.log(JSON.stringify({ error: e }))\n      throw error\n    }\n\n    const output = doc.getZip().generate({\n      type: TYPE_OUTPUT,\n      mimeType: MINE_TYPE,\n    })\n    const dateTimeCreate = moment(Date.now()).format(DATE_FORMAT)\n    const outputName = `report_${ dateTimeCreate }.docx`\n    saveAs(output, outputName)\n  })\n}","export const URL_TEMPLATE = '/tag-example.docx'\nexport const MINE_TYPE = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\nexport const DATE_FORMAT = 'YYYY_MM_DD_HH_mm_ss'\nexport const TYPE_OUTPUT = 'blob'\nexport const CODE_97110 = '97110'\nexport const CODE_97530 = '97530'\nexport const CODE_97140 = '97140'\nexport const CODE_98940 = '98940'\nexport const CODE_98941 = '98941'\nexport const CODE_98942 = '98942'\nexport const CODE_99202 = '99202'\nexport const CODE_99203 = '99203'\nexport const CODE_99212 = '99212'\nexport const CODE_99213 = '99213'","import React, { Component } from 'react'\nimport { Button, Form, FormGroup, Label, Input, Col, Row } from 'reactstrap'\nimport { NotificationContainer, NotificationManager } from 'react-notifications'\nimport {\n  INITIAL_STATE_DOCTORS_APPOINTMENT,\n  DATE_FORMAT, ERROR_LABEL, SUCCES_LABEL,\n  ERROR_MESSAGE, TIMEOUT_MESSAGE, SUCCES_GENERATION,\n  SERVICES_FIELD, DIAGNOSES_FIELD,\n  MIN_DAY, MAX_DAY\n} from '../../constants/mainForm'\nimport { generateFile } from '../../api/index'\nimport moment from 'moment'\nimport Select from 'react-select'\nimport 'react-notifications/lib/notifications.css'\nimport './DoctorsAppointment.scss'\n\nclass DoctorsAppointment extends Component {\n  constructor(props) {\n    super(props)\n    this.state = INITIAL_STATE_DOCTORS_APPOINTMENT\n    this.onDataReceiptbChange = this.onDataReceiptbChange.bind(this)\n    this.onOfficeAddress = this.onOfficeAddress.bind(this)\n    this.onPatientChange = this.onPatientChange.bind(this)\n    this.onDoctorChange = this.onDoctorChange.bind(this)\n    this.onServicesChange = this.onServicesChange.bind(this)\n    this.onDiagnosesChange = this.onDiagnosesChange.bind(this)\n    this.checkValid = this.checkValid.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  onDataReceiptbChange(event) {\n    this.setState({\n      dateReceipt: moment(event.target.value).format(DATE_FORMAT)\n    })\n  }\n\n  onServicesChange(event) {\n    this.props.setPatientInfo(event, SERVICES_FIELD)\n  }\n  \n  onOfficeAddress(event) {\n    this.setState({ officeAddress: event.value })\n  }\n\n  onPatientChange(event) {\n    const patient = this.props.getPatientByName(event.value)\n    const patientId = this.props.getPatientIdByValue(patient)\n    this.props.setSelectedPatientId(patientId)\n    this.setState({\n      patientName: event.value,\n      isPatientSelected: false\n    })\n  }\n\n  onDoctorChange(event) {\n    this.setState({ \n      doctorName: event.label,\n      doctorValue: event.value\n    })\n  }\n\n  onDiagnosesChange(event) {\n    this.props.setPatientInfo(event, DIAGNOSES_FIELD )\n  }\n\n  checkValid() {\n    const { doctorName, patientName, officeAddress } = this.state\n    const { patientsList, selectedPatientId } = this.props\n    const servicesList = patientsList[selectedPatientId].services\n    const diagnosesList = patientsList[selectedPatientId].diagnoses\n    return officeAddress && doctorName && patientName && \n           Array.isArray(servicesList) && servicesList.length && \n           Array.isArray(diagnosesList) && diagnosesList.length\n  }\n\n  onSubmit(event) {\n    event.preventDefault()\n    if (this.checkValid()) {\n      const { \n        patientsList,\n        selectedPatientId,\n        day,\n        allServices,\n        allDiagnoses,\n        allDoctors,\n        allDates,\n        allOffices,\n      } = this.props\n      const { doctorValue, officeAddress, dateReceipt } = this.state\n\n      this.props.setAllData({\n        services: patientsList[selectedPatientId].services,\n        date: dateReceipt,\n        diagnoses: patientsList[selectedPatientId].diagnoses,\n        doctor: doctorValue,\n        office: officeAddress\n      })\n      if (day === MAX_DAY) {\n        const genData = {\n          allServices: [...allServices, patientsList[selectedPatientId].services],\n          allDiagnoses: [...allDiagnoses, patientsList[selectedPatientId].diagnoses],\n          allDoctors: [...allDoctors, doctorValue],\n          allDates: [...allDates, dateReceipt],\n          allOffices: [...allOffices, officeAddress]\n        }\n        try {\n          generateFile(genData, patientsList[selectedPatientId])\n          NotificationManager.success(\n            SUCCES_GENERATION,\n            SUCCES_LABEL,\n            TIMEOUT_MESSAGE\n          )\n        } catch (e) {\n          NotificationManager.error(\n            ERROR_LABEL,\n            '',\n            TIMEOUT_MESSAGE\n          )\n        }\n      }\n    } else {\n      NotificationManager.error(\n        ERROR_LABEL,\n        ERROR_MESSAGE,\n        TIMEOUT_MESSAGE\n      )\n    }\n  }\n\n  render() {\n    const doctorList = window.doctorList\n    const servicesList = window.servicesList\n    const officeAddressList = window.officeAddressList\n    const diagnosesList = window.diagnosesList\n    const { patientsList, selectedPatientId, day } = this.props\n    const { isPatientSelected } = this.state\n    const selectPatientList = []\n    Object.entries(patientsList).map(([key, val]) => {\n      return (\n        selectPatientList.push({\n          value: val.patientName,\n          label: val.patientName\n        })\n      )\n    })\n\n    return (\n      <Form onSubmit={ this.onSubmit }>\n        <h4 className='input-label'>Input info for { day } day:</h4>\n        <Row form>\n            <Col md={6}>\n              <FormGroup>\n                <Label>Patient:</Label>\n                <Select \n                  options={ selectPatientList }\n                  onChange={ this.onPatientChange }\n                  isDisabled={ day !== MIN_DAY }\n                />\n              </FormGroup>\n            </Col>\n            <Col md={6}>\n              <FormGroup>\n                <Label>Date of Receipt:</Label>\n                <Input\n                  type='date'\n                  placeholder='date of receipt...'\n                  onChange={ this.onDataReceiptbChange }\n                  required\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row form>\n            <Col md={6}>\n              <FormGroup>\n                <Label>Office address:</Label>\n                <Select\n                  options={ officeAddressList }\n                  onChange={ this.onOfficeAddress }\n                />\n              </FormGroup>\n            </Col>\n            <Col md={6}>\n              <FormGroup>\n                <Label>Doctor:</Label>\n                <Select \n                  options={ doctorList }\n                  onChange={ this.onDoctorChange }\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row form>\n            <Col md={6}>\n              <FormGroup>\n              <Label>Diagnoses:</Label>\n              <Select\n                isMulti name='colors' options={ diagnosesList }\n                className='basic-multi-select'\n                classNamePrefix='select'\n                closeMenuOnSelect={ false }\n                hideSelectedOptions={ true }\n                onChange={ this.onDiagnosesChange }\n                isDisabled={ isPatientSelected }\n                value={ selectedPatientId && patientsList[selectedPatientId].diagnoses }\n              />\n              </FormGroup>\n            </Col>\n            <Col md={6}>\n              <FormGroup>\n              <Label>Selection of services rendered:</Label>\n              <Select\n                isMulti name='colors' options={ servicesList }\n                className='basic-multi-select'\n                classNamePrefix='select'\n                closeMenuOnSelect={ false }\n                hideSelectedOptions={ true }\n                onChange={ this.onServicesChange }\n                isDisabled={ isPatientSelected }\n                value={ selectedPatientId && patientsList[selectedPatientId].services }\n              />\n              </FormGroup>\n            </Col>\n          </Row>\n        <Button color='secondary' size='lg'>Submit</Button>\n        <NotificationContainer />\n      </Form>\n    )\n  }\n}\n\nexport default DoctorsAppointment","import React, { Component } from 'react'\nimport { Nav, NavItem, NavLink } from 'reactstrap'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nexport { FIRST_NAV_TAB, SECOND_NAV_TAB } from '../../constants/mainForm'\n\nconst FIRST_NAV_TAB = '1' // DO EXPORT\nconst SECOND_NAV_TAB = '2'  // DO EXPORT\n\nclass NavBar extends Component {\n  static propTypes = {\n    toggle: PropTypes.func.isRequired,\n    tabPosition: PropTypes.string.isRequired\n  }\n\n  render() {\n    const { toggle, tabPosition } = this.props\n    return (\n      <Nav tabs>\n        <NavItem>\n          <NavLink\n            className={\n              classnames({\n                active: tabPosition === FIRST_NAV_TAB\n              })\n            }\n            onClick={ () => toggle(FIRST_NAV_TAB) }\n          >\n            Doctor's Appointment\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={\n              classnames({\n                active: tabPosition === SECOND_NAV_TAB\n              })\n            }\n            onClick={ () => toggle(SECOND_NAV_TAB) }\n          >\n            Patient Details\n          </NavLink>\n        </NavItem>\n      </Nav>\n    )\n  }\n}\n\nexport default NavBar","import React, { Component } from 'react'\nimport { TabContent, TabPane, Row, Col } from 'reactstrap'\nimport PatientDetails from '../PatientDetails/PatientDetails'\nimport DoctorsAppointment from '../DoctorsAppointment/DoctorsAppointment'\nimport { FIRST_NAV_TAB  } from '../../constants/mainForm'\nimport NavBar from '../NavBar/NavBar'\nimport PropTypes from 'prop-types'\nimport './MainForm.scss'\n\nclass MainForm extends Component {\n  static propTypes = {\n    addPatien: PropTypes.func.isRequired\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      activeTab: FIRST_NAV_TAB\n    }\n    this.toggle = this.toggle.bind(this)\n  }\n\n  toggle(tab) {\n    if (this.state.activeTab !== tab) {\n      this.setState({\n        activeTab: tab\n      })\n    }\n  }\n\n  render() {\n    const { activeTab } = this.state\n    const { patients } = this.props\n    return (\n      <div className='main-form'>\n        <h2>Medrepot-generator</h2>\n        <NavBar toggle={ this.toggle } tabPosition={ activeTab } />\n        <TabContent activeTab={ activeTab }>\n          <TabPane tabId='1'>\n            <Row>\n              <Col sm='12'>\n                <DoctorsAppointment\n                  patientsList={ patients }\n                  getPatientByName={ this.props.getPatientByName }\n                  setSelectedPatientId={ this.props.setSelectedPatientId }\n                  getPatientIdByValue={ this.props.getPatientIdByValue }\n                  setPatientInfo={ this.props.setPatientInfo }\n                  selectedPatientId={ this.props.selectedPatientId }\n                  setAllData={ this.props.setAllData }\n                  day={ this.props.day }\n                  allServices={ this.props.allServices }\n                  allDiagnoses={ this.props.allDiagnoses }\n                  allDoctors={ this.props.allDoctors }\n                  allDates={ this.props.allDates }\n                  allOffices={ this.props.allOffices }\n                />\n              </Col>\n            </Row>\n          </TabPane>\n          <TabPane tabId='2'>\n            <Row>\n              <Col sm='12'>\n                <PatientDetails addPatien={ this.props.addPatien } />\n              </Col>\n            </Row>\n          </TabPane>\n        </TabContent>\n      </div>\n    )\n  }\n}\n\nexport default MainForm","import React, { Component } from 'react'\nimport './App.scss'\nimport { Container } from 'reactstrap'\nimport { base } from '../../db/base'\nimport MainForm from '../../components/MainForm/MainForm'\nimport { SERVICES_FIELD, TABLE_NAME, MAX_DAY, MIN_DAY } from '../../constants/mainForm'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      patients: {},\n      selectedPatientId: '',\n      allServices: [],\n      allDiagnoses: [],\n      allDoctors: [],\n      allDates: [],\n      allOffices: [],\n      day: 1\n    }\n    this.addPatient = this.addPatient.bind(this)\n    this.setSelectedPatientId = this.setSelectedPatientId.bind(this)\n    this.setPatientInfo = this.setPatientInfo.bind(this)\n    this.getPatientByName = this.getPatientByName.bind(this)\n    this.getPatientIdByValue = this.getPatientIdByValue.bind(this)\n    this.setAllData = this.setAllData.bind(this)\n  }\n\n  addPatient(data) {\n    const patientsList = { ...this.state.patients }\n    const id = Date.now()\n    patientsList[id] = {\n      ...data,\n      diagnoses: [],\n      services: []\n    }\n    this.setState({ patients: patientsList })\n  }\n\n  setPatientInfo(data, field) {\n    const { patients, selectedPatientId } = this.state\n    const patientsList = { ...patients }\n    const selectedPatient = patientsList[selectedPatientId]\n    if (field === SERVICES_FIELD) {\n      selectedPatient.services = data\n    } else {\n      selectedPatient.diagnoses = data\n    }\n    patientsList[selectedPatientId] = selectedPatient\n    this.setState({ patients: patientsList })\n  }\n\n  setSelectedPatientId(id) {\n    this.setState({\n      selectedPatientId: id\n    })\n  }\n\n  setAllData(data) {\n    const {\n      allServices, allDates, allDiagnoses, allDoctors, allOffices, day\n    } = this.state\n    this.setState({\n      allServices: (day !== MAX_DAY) ? [...allServices, data.services] : [],\n      allDates: (day !== MAX_DAY) ? [...allDates, data.date] : [],\n      allDiagnoses: (day !== MAX_DAY) ? [...allDiagnoses, data.diagnoses] : [],\n      allDoctors: (day !== MAX_DAY) ? [...allDoctors, data.doctor] : [],\n      allOffices: (day !== MAX_DAY) ? [...allOffices, data.office] : [],\n      day: (day !== MAX_DAY) ? (day + MIN_DAY) : MIN_DAY\n    })\n  }\n\n  getPatientByName(name) {\n    const { patients } = this.state\n    return Object.values(patients).find(patient => {\n      return patient.patientName === name\n    })\n  }\n\n  getPatientIdByValue(value) {\n    const { patients } = this.state\n    for (let [key, val] of Object.entries(patients)) {\n      if (JSON.stringify(val) === JSON.stringify(value)) {\n        return key\n      }\n    }\n  }\n\n  componentWillMount() {\n    try {\n      this.patientsRef = base.syncState(TABLE_NAME, {\n        context: this,\n        state: TABLE_NAME\n      })\n    }\n    catch (error) {\n      console.log(error)\n      throw error\n    }\n  }\n\n  render() {\n    const { \n      patients,\n      day,\n      selectedPatientId,\n      allServices,\n      allDiagnoses,\n      allDoctors,\n      allDates,\n      allOffices,\n    } = this.state\n\n    return (\n      <Container className='app'>\n        <MainForm\n          addPatien={ this.addPatient }\n          getPatientByName={ this.getPatientByName }\n          setSelectedPatientId={ this.setSelectedPatientId }\n          getPatientIdByValue={ this.getPatientIdByValue }\n          setPatientInfo={ this.setPatientInfo }\n          patients={ patients }\n          selectedPatientId={ selectedPatientId }\n          setAllData={ this.setAllData }\n          day={ day }\n          allServices={ allServices }\n          allDiagnoses={ allDiagnoses }\n          allDoctors={ allDoctors }\n          allDates={ allDates }\n          allOffices={ allOffices }\n        />\n      </Container>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './containers/App/App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()"],"sourceRoot":""}